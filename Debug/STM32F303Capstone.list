
STM32F303Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a08  08004a08  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a08  08004a08  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a08  08004a08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08004a80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004a80  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb38  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e5a  00000000  00000000  0002fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  00031a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d0  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ab52  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009442  00000000  00000000  0004d802  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094332  00000000  00000000  00056c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaf76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  000eaff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004814 	.word	0x08004814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004814 	.word	0x08004814

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f92f 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f003 fcc8 	bl	8003c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f939 	bl	8000542 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f90f 	bl	800050a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000008 	.word	0x20000008
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20000098 	.word	0x20000098

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000098 	.word	0x20000098

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	3b04      	subs	r3, #4
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <NVIC_SetPriority+0x50>)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff8e 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff47 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800051c:	f7ff ff5c 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f7ff ff8e 	bl	8000448 <NVIC_EncodePriority>
 800052c:	4602      	mov	r2, r0
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff5d 	bl	80003f4 <NVIC_SetPriority>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffb0 	bl	80004b0 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000572:	e154      	b.n	800081e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8146 	beq.w	8000818 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0x40>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d123      	bne.n	80005e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3208      	adds	r2, #8
 80005de:	6939      	ldr	r1, [r7, #16]
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4313      	orrs	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00b      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062c:	2b11      	cmp	r3, #17
 800062e:	d003      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b12      	cmp	r3, #18
 8000636:	d130      	bne.n	800069a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2203      	movs	r2, #3
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066e:	2201      	movs	r2, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 0201 	and.w	r2, r3, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2203      	movs	r2, #3
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 80a0 	beq.w	8000818 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4b58      	ldr	r3, [pc, #352]	; (800083c <HAL_GPIO_Init+0x2e0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a57      	ldr	r2, [pc, #348]	; (800083c <HAL_GPIO_Init+0x2e0>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <HAL_GPIO_Init+0x2e0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006f0:	4a53      	ldr	r2, [pc, #332]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800071a:	d019      	beq.n	8000750 <HAL_GPIO_Init+0x1f4>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a49      	ldr	r2, [pc, #292]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d013      	beq.n	800074c <HAL_GPIO_Init+0x1f0>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a48      	ldr	r2, [pc, #288]	; (8000848 <HAL_GPIO_Init+0x2ec>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d00d      	beq.n	8000748 <HAL_GPIO_Init+0x1ec>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a47      	ldr	r2, [pc, #284]	; (800084c <HAL_GPIO_Init+0x2f0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d007      	beq.n	8000744 <HAL_GPIO_Init+0x1e8>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a46      	ldr	r2, [pc, #280]	; (8000850 <HAL_GPIO_Init+0x2f4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d101      	bne.n	8000740 <HAL_GPIO_Init+0x1e4>
 800073c:	2304      	movs	r3, #4
 800073e:	e008      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000740:	2305      	movs	r3, #5
 8000742:	e006      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000744:	2303      	movs	r3, #3
 8000746:	e004      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000748:	2302      	movs	r3, #2
 800074a:	e002      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000750:	2300      	movs	r3, #0
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	f002 0203 	and.w	r2, r2, #3
 8000758:	0092      	lsls	r2, r2, #2
 800075a:	4093      	lsls	r3, r2
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4313      	orrs	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000762:	4937      	ldr	r1, [pc, #220]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	3302      	adds	r3, #2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	43db      	mvns	r3, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000794:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	43db      	mvns	r3, r3
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	4013      	ands	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	43db      	mvns	r3, r3
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	43db      	mvns	r3, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4313      	orrs	r3, r2
 8000810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	fa22 f303 	lsr.w	r3, r2, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	f47f aea3 	bne.w	8000574 <HAL_GPIO_Init+0x18>
  }
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000
 8000844:	48000400 	.word	0x48000400
 8000848:	48000800 	.word	0x48000800
 800084c:	48000c00 	.word	0x48000c00
 8000850:	48001000 	.word	0x48001000
 8000854:	40010400 	.word	0x40010400

08000858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691a      	ldr	r2, [r3, #16]
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	4013      	ands	r3, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e001      	b.n	800087a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
 8000894:	4613      	mov	r3, r2
 8000896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008be:	af00      	add	r7, sp, #0
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f000 beda 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 816e 	beq.w	8000bbe <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008e2:	4bb5      	ldr	r3, [pc, #724]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d00c      	beq.n	8000908 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ee:	4bb2      	ldr	r3, [pc, #712]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d15a      	bne.n	80009b0 <HAL_RCC_OscConfig+0xf8>
 80008fa:	4baf      	ldr	r3, [pc, #700]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000906:	d153      	bne.n	80009b0 <HAL_RCC_OscConfig+0xf8>
 8000908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000910:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000914:	fa93 f3a3 	rbit	r3, r3
 8000918:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800091c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b01      	cmp	r3, #1
 8000932:	d102      	bne.n	800093a <HAL_RCC_OscConfig+0x82>
 8000934:	4ba0      	ldr	r3, [pc, #640]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	e015      	b.n	8000966 <HAL_RCC_OscConfig+0xae>
 800093a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000942:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000946:	fa93 f3a3 	rbit	r3, r3
 800094a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800094e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000952:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000956:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800095a:	fa93 f3a3 	rbit	r3, r3
 800095e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000962:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800096e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000972:	fa92 f2a2 	rbit	r2, r2
 8000976:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800097a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	b252      	sxtb	r2, r2
 8000984:	f042 0220 	orr.w	r2, r2, #32
 8000988:	b252      	sxtb	r2, r2
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	f002 021f 	and.w	r2, r2, #31
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4013      	ands	r3, r2
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 810f 	beq.w	8000bbc <HAL_RCC_OscConfig+0x304>
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f040 8109 	bne.w	8000bbc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f000 be6b 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ba:	d106      	bne.n	80009ca <HAL_RCC_OscConfig+0x112>
 80009bc:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a7d      	ldr	r2, [pc, #500]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e030      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10c      	bne.n	80009ee <HAL_RCC_OscConfig+0x136>
 80009d4:	4b78      	ldr	r3, [pc, #480]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a77      	ldr	r2, [pc, #476]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a74      	ldr	r2, [pc, #464]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e01e      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009f8:	d10c      	bne.n	8000a14 <HAL_RCC_OscConfig+0x15c>
 80009fa:	4b6f      	ldr	r3, [pc, #444]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a6e      	ldr	r2, [pc, #440]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b6c      	ldr	r3, [pc, #432]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a6b      	ldr	r2, [pc, #428]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e00b      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 8000a14:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a67      	ldr	r2, [pc, #412]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a64      	ldr	r2, [pc, #400]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a2c:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f023 020f 	bic.w	r2, r3, #15
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	495f      	ldr	r1, [pc, #380]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d05a      	beq.n	8000b00 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fc73 	bl	8000334 <HAL_GetTick>
 8000a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a52:	e00a      	b.n	8000a6a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a54:	f7ff fc6e 	bl	8000334 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	2b64      	cmp	r3, #100	; 0x64
 8000a62:	d902      	bls.n	8000a6a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a64:	2303      	movs	r3, #3
 8000a66:	f000 be0e 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a6e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a72:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	095b      	lsrs	r3, r3, #5
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d102      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1e4>
 8000a96:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	e015      	b.n	8000ac8 <HAL_RCC_OscConfig+0x210>
 8000a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ab8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000acc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ad0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ad4:	fa92 f2a2 	rbit	r2, r2
 8000ad8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000adc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b252      	sxtb	r2, r2
 8000ae6:	f042 0220 	orr.w	r2, r2, #32
 8000aea:	b252      	sxtb	r2, r2
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	f002 021f 	and.w	r2, r2, #31
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0aa      	beq.n	8000a54 <HAL_RCC_OscConfig+0x19c>
 8000afe:	e05e      	b.n	8000bbe <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fc18 	bl	8000334 <HAL_GetTick>
 8000b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b08:	e00a      	b.n	8000b20 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fc13 	bl	8000334 <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	; 0x64
 8000b18:	d902      	bls.n	8000b20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f000 bdb3 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b38:	fab3 f383 	clz	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <HAL_RCC_OscConfig+0x29a>
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	e015      	b.n	8000b7e <HAL_RCC_OscConfig+0x2c6>
 8000b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b5e:	fa93 f3a3 	rbit	r3, r3
 8000b62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b8a:	fa92 f2a2 	rbit	r2, r2
 8000b8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b252      	sxtb	r2, r2
 8000b9c:	f042 0220 	orr.w	r2, r2, #32
 8000ba0:	b252      	sxtb	r2, r2
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	f002 021f 	and.w	r2, r2, #31
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1aa      	bne.n	8000b0a <HAL_RCC_OscConfig+0x252>
 8000bb4:	e003      	b.n	8000bbe <HAL_RCC_OscConfig+0x306>
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8170 	beq.w	8000eae <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bce:	4bd0      	ldr	r3, [pc, #832]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00b      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bda:	4bcd      	ldr	r3, [pc, #820]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d16d      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
 8000be6:	4bca      	ldr	r3, [pc, #808]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d167      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bfc:	fa93 f3a3 	rbit	r3, r3
 8000c00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c08:	fab3 f383 	clz	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_RCC_OscConfig+0x36a>
 8000c1c:	4bbc      	ldr	r3, [pc, #752]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	e013      	b.n	8000c4a <HAL_RCC_OscConfig+0x392>
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c3a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c46:	4bb2      	ldr	r3, [pc, #712]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c50:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c54:	fa92 f2a2 	rbit	r2, r2
 8000c58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b252      	sxtb	r2, r2
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	b252      	sxtb	r2, r2
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f002 021f 	and.w	r2, r2, #31
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3d6>
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f000 bcfc 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	4ba0      	ldr	r3, [pc, #640]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6959      	ldr	r1, [r3, #20]
 8000c9c:	23f8      	movs	r3, #248	; 0xf8
 8000c9e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000cae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	4995      	ldr	r1, [pc, #596]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc0:	e0f5      	b.n	8000eae <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 8085 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x520>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ce0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fb1c 	bl	8000334 <HAL_GetTick>
 8000cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e00a      	b.n	8000d18 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fb17 	bl	8000334 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d902      	bls.n	8000d18 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	f000 bcb7 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	095b      	lsrs	r3, r3, #5
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_RCC_OscConfig+0x490>
 8000d42:	4b73      	ldr	r3, [pc, #460]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	e013      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b8>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d6c:	4b68      	ldr	r3, [pc, #416]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	2202      	movs	r2, #2
 8000d72:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d76:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d7a:	fa92 f2a2 	rbit	r2, r2
 8000d7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b252      	sxtb	r2, r2
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	b252      	sxtb	r2, r2
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0ae      	beq.n	8000d02 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6959      	ldr	r1, [r3, #20]
 8000db2:	23f8      	movs	r3, #248	; 0xf8
 8000db4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000dbc:	fa93 f3a3 	rbit	r3, r3
 8000dc0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000dc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	494f      	ldr	r1, [pc, #316]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	600b      	str	r3, [r1, #0]
 8000dd6:	e06a      	b.n	8000eae <HAL_RCC_OscConfig+0x5f6>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000dea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fa97 	bl	8000334 <HAL_GetTick>
 8000e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fa92 	bl	8000334 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d902      	bls.n	8000e22 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f000 bc32 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <HAL_RCC_OscConfig+0x59a>
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	e013      	b.n	8000e7a <HAL_RCC_OscConfig+0x5c2>
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e84:	fa92 f2a2 	rbit	r2, r2
 8000e88:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e8c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	b252      	sxtb	r2, r2
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	b252      	sxtb	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1ae      	bne.n	8000e0c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80d8 	beq.w	800106e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d067      	beq.n	8000f98 <HAL_RCC_OscConfig+0x6e0>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_RCC_OscConfig+0x65c>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	461a      	mov	r2, r3
 8000eec:	2301      	movs	r3, #1
 8000eee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fa20 	bl	8000334 <HAL_GetTick>
 8000ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef8:	e00e      	b.n	8000f18 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fa1b 	bl	8000334 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d906      	bls.n	8000f18 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e3bb      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	10908120 	.word	0x10908120
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f34:	fa93 f2a3 	rbit	r2, r3
 8000f38:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f42:	2202      	movs	r2, #2
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	fa93 f2a3 	rbit	r2, r3
 8000f50:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	4ba5      	ldr	r3, [pc, #660]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8000f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f5e:	2102      	movs	r1, #2
 8000f60:	6019      	str	r1, [r3, #0]
 8000f62:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	fa93 f1a3 	rbit	r1, r3
 8000f6c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f70:	6019      	str	r1, [r3, #0]
  return(result);
 8000f72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0b1      	beq.n	8000efa <HAL_RCC_OscConfig+0x642>
 8000f96:	e06a      	b.n	800106e <HAL_RCC_OscConfig+0x7b6>
 8000f98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	fa93 f2a3 	rbit	r2, r3
 8000faa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fae:	601a      	str	r2, [r3, #0]
  return(result);
 8000fb0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <HAL_RCC_OscConfig+0x938>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff f9b4 	bl	8000334 <HAL_GetTick>
 8000fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	e009      	b.n	8000fe6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff f9af 	bl	8000334 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e34f      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8000fe6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	fa93 f2a3 	rbit	r2, r3
 8000ff8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	fa93 f2a3 	rbit	r2, r3
 8001010:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800101a:	2202      	movs	r2, #2
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	fa93 f2a3 	rbit	r2, r3
 8001028:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800102c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102e:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001032:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001036:	2102      	movs	r1, #2
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	fa93 f1a3 	rbit	r1, r3
 8001044:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001048:	6019      	str	r1, [r3, #0]
  return(result);
 800104a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b25b      	sxtb	r3, r3
 8001056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800105a:	b25b      	sxtb	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1b1      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8159 	beq.w	8001330 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a55      	ldr	r2, [pc, #340]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b6:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11a      	bne.n	80010f8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ce:	f7ff f931 	bl	8000334 <HAL_GetTick>
 80010d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d6:	e009      	b.n	80010ec <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d8:	f7ff f92c 	bl	8000334 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	; 0x64
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e2cc      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ef      	beq.n	80010d8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x858>
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a39      	ldr	r2, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e02f      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x87c>
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x8a0>
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800116a:	f023 0304 	bic.w	r3, r3, #4
 800116e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06b      	beq.n	8001252 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff f8db 	bl	8000334 <HAL_GetTick>
 800117e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff f8d6 	bl	8000334 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e274      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 800119c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	fa93 f2a3 	rbit	r2, r3
 80011ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011b8:	2202      	movs	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	fa93 f2a3 	rbit	r2, r3
 80011c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011ca:	601a      	str	r2, [r3, #0]
  return(result);
 80011cc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d108      	bne.n	80011f8 <HAL_RCC_OscConfig+0x940>
 80011e6:	4b01      	ldr	r3, [pc, #4]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	e013      	b.n	8001214 <HAL_RCC_OscConfig+0x95c>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	10908120 	.word	0x10908120
 80011f4:	40007000 	.word	0x40007000
 80011f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011fc:	2202      	movs	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fa93 f2a3 	rbit	r2, r3
 800120a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4bbb      	ldr	r3, [pc, #748]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001218:	2102      	movs	r1, #2
 800121a:	6011      	str	r1, [r2, #0]
 800121c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	fa92 f1a2 	rbit	r1, r2
 8001226:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800122a:	6011      	str	r1, [r2, #0]
  return(result);
 800122c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	b252      	sxtb	r2, r2
 8001238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800123c:	b252      	sxtb	r2, r2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d099      	beq.n	8001184 <HAL_RCC_OscConfig+0x8cc>
 8001250:	e064      	b.n	800131c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff f86f 	bl	8000334 <HAL_GetTick>
 8001256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f7ff f86a 	bl	8000334 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e208      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2202      	movs	r2, #2
 800127a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa93 f2a3 	rbit	r2, r3
 8001286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	fa93 f2a3 	rbit	r2, r3
 800129e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012a2:	601a      	str	r2, [r3, #0]
  return(result);
 80012a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0xa0c>
 80012be:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	e00d      	b.n	80012e0 <HAL_RCC_OscConfig+0xa28>
 80012c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c8:	2202      	movs	r2, #2
 80012ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012e4:	2102      	movs	r1, #2
 80012e6:	6011      	str	r1, [r2, #0]
 80012e8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	fa92 f1a2 	rbit	r1, r2
 80012f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012f6:	6011      	str	r1, [r2, #0]
  return(result);
 80012f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b252      	sxtb	r2, r2
 8001304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001308:	b252      	sxtb	r2, r2
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d19f      	bne.n	800125c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800131c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800132a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 81a4 	beq.w	8001684 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	f000 819b 	beq.w	8001680 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f040 8113 	bne.w	800157c <HAL_RCC_OscConfig+0xcc4>
 8001356:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800135a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800135e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	fa93 f2a3 	rbit	r2, r3
 800136a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800136e:	601a      	str	r2, [r3, #0]
  return(result);
 8001370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001374:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	2300      	movs	r3, #0
 8001388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7fe ffd3 	bl	8000334 <HAL_GetTick>
 800138e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e009      	b.n	80013a8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7fe ffce 	bl	8000334 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e16e      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80013a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fa93 f2a3 	rbit	r2, r3
 80013bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c0:	601a      	str	r2, [r3, #0]
  return(result);
 80013c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_RCC_OscConfig+0xb2a>
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	e01b      	b.n	800141a <HAL_RCC_OscConfig+0xb62>
 80013e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f2a3 	rbit	r2, r3
 80013f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800141e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001422:	6011      	str	r1, [r2, #0]
 8001424:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	fa92 f1a2 	rbit	r1, r2
 800142e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001432:	6011      	str	r1, [r2, #0]
  return(result);
 8001434:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	fab2 f282 	clz	r2, r2
 800143e:	b252      	sxtb	r2, r2
 8001440:	f042 0220 	orr.w	r2, r2, #32
 8001444:	b252      	sxtb	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f002 021f 	and.w	r2, r2, #31
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f202 	lsl.w	r2, r1, r2
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d19d      	bne.n	8001394 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	430b      	orrs	r3, r1
 800146e:	4924      	ldr	r1, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800147c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148c:	601a      	str	r2, [r3, #0]
  return(result);
 800148e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001492:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800149c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7fe ff44 	bl	8000334 <HAL_GetTick>
 80014ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7fe ff3f 	bl	8000334 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0df      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80014c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014de:	601a      	str	r2, [r3, #0]
  return(result);
 80014e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d104      	bne.n	8001504 <HAL_RCC_OscConfig+0xc4c>
 80014fa:	4b01      	ldr	r3, [pc, #4]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xc84>
 8001500:	40021000 	.word	0x40021000
 8001504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001544:	6011      	str	r1, [r2, #0]
 8001546:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	fa92 f1a2 	rbit	r1, r2
 8001550:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001554:	6011      	str	r1, [r2, #0]
  return(result);
 8001556:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	fab2 f282 	clz	r2, r2
 8001560:	b252      	sxtb	r2, r2
 8001562:	f042 0220 	orr.w	r2, r2, #32
 8001566:	b252      	sxtb	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d09b      	beq.n	80014b2 <HAL_RCC_OscConfig+0xbfa>
 800157a:	e083      	b.n	8001684 <HAL_RCC_OscConfig+0xdcc>
 800157c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001594:	601a      	str	r2, [r3, #0]
  return(result);
 8001596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	461a      	mov	r2, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7fe fec0 	bl	8000334 <HAL_GetTick>
 80015b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	e009      	b.n	80015ce <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7fe febb 	bl	8000334 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e05b      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80015ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	601a      	str	r2, [r3, #0]
  return(result);
 80015e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0xd50>
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	e01b      	b.n	8001640 <HAL_RCC_OscConfig+0xd88>
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f2a3 	rbit	r2, r3
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	f107 0214 	add.w	r2, r7, #20
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fa92 f1a2 	rbit	r1, r2
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	6011      	str	r1, [r2, #0]
  return(result);
 800165a:	f107 0210 	add.w	r2, r7, #16
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fab2 f282 	clz	r2, r2
 8001664:	b252      	sxtb	r2, r2
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	b252      	sxtb	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f002 021f 	and.w	r2, r2, #31
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d19d      	bne.n	80015ba <HAL_RCC_OscConfig+0xd02>
 800167e:	e001      	b.n	8001684 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b09e      	sub	sp, #120	; 0x78
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e164      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d910      	bls.n	80016dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0207 	bic.w	r2, r3, #7
 80016c2:	498d      	ldr	r1, [pc, #564]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e14c      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4981      	ldr	r1, [pc, #516]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80df 	beq.w	80018c6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d13d      	bne.n	800178c <HAL_RCC_ClockConfig+0xf8>
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800171e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_RCC_ClockConfig+0xa6>
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e00f      	b.n	800175a <HAL_RCC_ClockConfig+0xc6>
 800173a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	663b      	str	r3, [r7, #96]	; 0x60
 800174e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b252      	sxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b252      	sxtb	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d17d      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0f4      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d13d      	bne.n	8001810 <HAL_RCC_ClockConfig+0x17c>
 8001794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80017a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_RCC_ClockConfig+0x12a>
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e00f      	b.n	80017de <HAL_RCC_ClockConfig+0x14a>
 80017be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
 80017cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e6:	fa92 f2a2 	rbit	r2, r2
 80017ea:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b252      	sxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b252      	sxtb	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d13b      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b2      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
 8001810:	2302      	movs	r3, #2
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_RCC_ClockConfig+0x1a4>
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e00d      	b.n	8001854 <HAL_RCC_ClockConfig+0x1c0>
 8001838:	2302      	movs	r3, #2
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2202      	movs	r2, #2
 8001856:	61ba      	str	r2, [r7, #24]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	fa92 f2a2 	rbit	r2, r2
 800185e:	617a      	str	r2, [r7, #20]
  return(result);
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b252      	sxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b252      	sxtb	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 021f 	and.w	r2, r2, #31
 8001874:	2101      	movs	r1, #1
 8001876:	fa01 f202 	lsl.w	r2, r1, r2
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e078      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 0203 	bic.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	491a      	ldr	r1, [pc, #104]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001896:	f7fe fd4d 	bl	8000334 <HAL_GetTick>
 800189a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7fe fd49 	bl	8000334 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e060      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 020c 	and.w	r2, r3, #12
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d1eb      	bne.n	800189e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d215      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	4906      	ldr	r1, [pc, #24]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d006      	beq.n	8001900 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e03f      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4919      	ldr	r1, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4911      	ldr	r1, [pc, #68]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800193e:	f000 f825 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001942:	4601      	mov	r1, r0
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800194c:	23f0      	movs	r3, #240	; 0xf0
 800194e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	60fb      	str	r3, [r7, #12]
  return(result);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_RCC_ClockConfig+0x2f0>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RCC_ClockConfig+0x2f4>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800196e:	2000      	movs	r0, #0
 8001970:	f7fe fc9c 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3778      	adds	r7, #120	; 0x78
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	080049c4 	.word	0x080049c4
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x30>
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ba:	e03c      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019be:	623b      	str	r3, [r7, #32]
      break;
 80019c0:	e03c      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019cc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	607b      	str	r3, [r7, #4]
  return(result);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 020f 	and.w	r2, r3, #15
 80019ee:	230f      	movs	r3, #15
 80019f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e004      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	623b      	str	r3, [r7, #32]
      break;
 8001a34:	e002      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a38:	623b      	str	r3, [r7, #32]
      break;
 8001a3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	372c      	adds	r7, #44	; 0x2c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	007a1200 	.word	0x007a1200
 8001a54:	080049a0 	.word	0x080049a0
 8001a58:	080049b0 	.word	0x080049b0
 8001a5c:	003d0900 	.word	0x003d0900

08001a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e01d      	b.n	8001aae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f002 f8f6 	bl	8003c78 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 f920 	bl	8001ce4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e01d      	b.n	8001b04 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f815 	bl	8001b0c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f000 f8f5 	bl	8001ce4 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_TIM_ConfigClockSource+0x1c>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e0cf      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x1bc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d07c      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x152>
 8001b78:	2b40      	cmp	r3, #64	; 0x40
 8001b7a:	d80f      	bhi.n	8001b9c <HAL_TIM_ConfigClockSource+0x7c>
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	f000 808f 	beq.w	8001ca0 <HAL_TIM_ConfigClockSource+0x180>
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d803      	bhi.n	8001b8e <HAL_TIM_ConfigClockSource+0x6e>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8083 	beq.w	8001c92 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8001b8c:	e09d      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	f000 808d 	beq.w	8001cae <HAL_TIM_ConfigClockSource+0x18e>
 8001b94:	2b30      	cmp	r3, #48	; 0x30
 8001b96:	f000 8091 	beq.w	8001cbc <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8001b9a:	e096      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001b9c:	2b70      	cmp	r3, #112	; 0x70
 8001b9e:	d018      	beq.n	8001bd2 <HAL_TIM_ConfigClockSource+0xb2>
 8001ba0:	2b70      	cmp	r3, #112	; 0x70
 8001ba2:	d804      	bhi.n	8001bae <HAL_TIM_ConfigClockSource+0x8e>
 8001ba4:	2b50      	cmp	r3, #80	; 0x50
 8001ba6:	d044      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x112>
 8001ba8:	2b60      	cmp	r3, #96	; 0x60
 8001baa:	d052      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8001bac:	e08d      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8001bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb2:	d003      	beq.n	8001bbc <HAL_TIM_ConfigClockSource+0x9c>
 8001bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb8:	d028      	beq.n	8001c0c <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8001bba:	e086      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	f023 0307 	bic.w	r3, r3, #7
 8001bce:	6093      	str	r3, [r2, #8]
    break;
 8001bd0:	e07b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f000 fbbc 	bl	800235e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001bf8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	609a      	str	r2, [r3, #8]
    break;
 8001c0a:	e05e      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f000 fb9f 	bl	800235e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c2e:	609a      	str	r2, [r3, #8]
    break;
 8001c30:	e04b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f000 fb06 	bl	8002250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2150      	movs	r1, #80	; 0x50
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fb67 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001c50:	e03b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f000 fb29 	bl	80022b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2160      	movs	r1, #96	; 0x60
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 fb57 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001c70:	e02b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f000 fae6 	bl	8002250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fb47 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001c90:	e01b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fb40 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001c9e:	e014      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fb39 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001cac:	e00d      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fb32 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001cba:	e006      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2130      	movs	r1, #48	; 0x30
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fb2b 	bl	800231e <TIM_ITRx_SetConfig>
    break;
 8001cc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3c      	ldr	r2, [pc, #240]	; (8001dec <TIM_Base_SetConfig+0x108>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x3c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x3c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a39      	ldr	r2, [pc, #228]	; (8001df0 <TIM_Base_SetConfig+0x10c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x3c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <TIM_Base_SetConfig+0x110>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x3c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a37      	ldr	r2, [pc, #220]	; (8001df8 <TIM_Base_SetConfig+0x114>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <TIM_Base_SetConfig+0x108>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d017      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <TIM_Base_SetConfig+0x10c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <TIM_Base_SetConfig+0x110>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <TIM_Base_SetConfig+0x114>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <TIM_Base_SetConfig+0x118>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <TIM_Base_SetConfig+0x11c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x8e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <TIM_Base_SetConfig+0x120>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <TIM_Base_SetConfig+0x108>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00f      	beq.n	8001dd0 <TIM_Base_SetConfig+0xec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <TIM_Base_SetConfig+0x114>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00b      	beq.n	8001dd0 <TIM_Base_SetConfig+0xec>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <TIM_Base_SetConfig+0x118>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <TIM_Base_SetConfig+0xec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <TIM_Base_SetConfig+0x11c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <TIM_Base_SetConfig+0xec>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <TIM_Base_SetConfig+0x120>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d103      	bne.n	8001dd8 <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	615a      	str	r2, [r3, #20]
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40012c00 	.word	0x40012c00
 8001df0:	40000400 	.word	0x40000400
 8001df4:	40000800 	.word	0x40000800
 8001df8:	40013400 	.word	0x40013400
 8001dfc:	40014000 	.word	0x40014000
 8001e00:	40014400 	.word	0x40014400
 8001e04:	40014800 	.word	0x40014800

08001e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f023 0201 	bic.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f023 0302 	bic.w	r3, r3, #2
 8001e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <TIM_OC1_SetConfig+0x118>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00f      	beq.n	8001e94 <TIM_OC1_SetConfig+0x8c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <TIM_OC1_SetConfig+0x11c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00b      	beq.n	8001e94 <TIM_OC1_SetConfig+0x8c>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <TIM_OC1_SetConfig+0x120>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <TIM_OC1_SetConfig+0x8c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <TIM_OC1_SetConfig+0x124>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_OC1_SetConfig+0x8c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <TIM_OC1_SetConfig+0x128>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d10c      	bne.n	8001eae <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f023 0308 	bic.w	r3, r3, #8
 8001e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <TIM_OC1_SetConfig+0x118>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00f      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xce>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <TIM_OC1_SetConfig+0x11c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00b      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xce>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <TIM_OC1_SetConfig+0x120>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xce>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <TIM_OC1_SetConfig+0x124>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <TIM_OC1_SetConfig+0xce>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <TIM_OC1_SetConfig+0x128>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d111      	bne.n	8001efa <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	621a      	str	r2, [r3, #32]
} 
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40013400 	.word	0x40013400
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40014800 	.word	0x40014800

08001f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f023 0210 	bic.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f023 0320 	bic.w	r3, r3, #32
 8001f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <TIM_OC2_SetConfig+0x10c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_OC2_SetConfig+0x78>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a27      	ldr	r2, [pc, #156]	; (8002044 <TIM_OC2_SetConfig+0x110>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d10d      	bne.n	8001fc8 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fc6:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <TIM_OC2_SetConfig+0x10c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00f      	beq.n	8001ff0 <TIM_OC2_SetConfig+0xbc>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <TIM_OC2_SetConfig+0x110>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_OC2_SetConfig+0xbc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <TIM_OC2_SetConfig+0x114>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_OC2_SetConfig+0xbc>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <TIM_OC2_SetConfig+0x118>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_OC2_SetConfig+0xbc>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <TIM_OC2_SetConfig+0x11c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d113      	bne.n	8002018 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ff6:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ffe:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	621a      	str	r2, [r3, #32]
}
 8002032:	bf00      	nop
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40013400 	.word	0x40013400
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800

08002054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <TIM_OC3_SetConfig+0x108>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <TIM_OC3_SetConfig+0x76>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_OC3_SetConfig+0x10c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10d      	bne.n	80020e6 <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020e4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <TIM_OC3_SetConfig+0x108>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00f      	beq.n	800210e <TIM_OC3_SetConfig+0xba>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <TIM_OC3_SetConfig+0x10c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00b      	beq.n	800210e <TIM_OC3_SetConfig+0xba>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <TIM_OC3_SetConfig+0x110>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <TIM_OC3_SetConfig+0xba>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <TIM_OC3_SetConfig+0x114>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <TIM_OC3_SetConfig+0xba>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <TIM_OC3_SetConfig+0x118>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d113      	bne.n	8002136 <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800211c:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	621a      	str	r2, [r3, #32]
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40013400 	.word	0x40013400
 8002164:	40014000 	.word	0x40014000
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800

08002170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ae:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ca:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a18      	ldr	r2, [pc, #96]	; (800223c <TIM_OC4_SetConfig+0xcc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00f      	beq.n	8002200 <TIM_OC4_SetConfig+0x90>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <TIM_OC4_SetConfig+0xd0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00b      	beq.n	8002200 <TIM_OC4_SetConfig+0x90>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <TIM_OC4_SetConfig+0xd4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <TIM_OC4_SetConfig+0x90>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <TIM_OC4_SetConfig+0xd8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_OC4_SetConfig+0x90>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <TIM_OC4_SetConfig+0xdc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d109      	bne.n	8002214 <TIM_OC4_SetConfig+0xa4>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002206:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	621a      	str	r2, [r3, #32]
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40013400 	.word	0x40013400
 8002244:	40014000 	.word	0x40014000
 8002248:	40014400 	.word	0x40014400
 800224c:	40014800 	.word	0x40014800

08002250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f023 0201 	bic.w	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f023 030a 	bic.w	r3, r3, #10
 8002294:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f023 0210 	bic.w	r2, r3, #16
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	031b      	lsls	r3, r3, #12
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	f043 0307 	orr.w	r3, r3, #7
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	609a      	str	r2, [r3, #8]
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800235e:	b480      	push	{r7}
 8002360:	b087      	sub	sp, #28
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	431a      	orrs	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	609a      	str	r2, [r3, #8]
} 
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e105      	b.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x226>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b14      	cmp	r3, #20
 80023d2:	f200 80f0 	bhi.w	80025b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	08002431 	.word	0x08002431
 80023e0:	080025b7 	.word	0x080025b7
 80023e4:	080025b7 	.word	0x080025b7
 80023e8:	080025b7 	.word	0x080025b7
 80023ec:	08002471 	.word	0x08002471
 80023f0:	080025b7 	.word	0x080025b7
 80023f4:	080025b7 	.word	0x080025b7
 80023f8:	080025b7 	.word	0x080025b7
 80023fc:	080024b3 	.word	0x080024b3
 8002400:	080025b7 	.word	0x080025b7
 8002404:	080025b7 	.word	0x080025b7
 8002408:	080025b7 	.word	0x080025b7
 800240c:	080024f3 	.word	0x080024f3
 8002410:	080025b7 	.word	0x080025b7
 8002414:	080025b7 	.word	0x080025b7
 8002418:	080025b7 	.word	0x080025b7
 800241c:	08002535 	.word	0x08002535
 8002420:	080025b7 	.word	0x080025b7
 8002424:	080025b7 	.word	0x080025b7
 8002428:	080025b7 	.word	0x080025b7
 800242c:	08002575 	.word	0x08002575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fce6 	bl	8001e08 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0208 	orr.w	r2, r2, #8
 800244a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0204 	bic.w	r2, r2, #4
 800245a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6999      	ldr	r1, [r3, #24]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	619a      	str	r2, [r3, #24]
    }
    break;
 800246e:	e0a3      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fd5c 	bl	8001f34 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6999      	ldr	r1, [r3, #24]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	021a      	lsls	r2, r3, #8
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	619a      	str	r2, [r3, #24]
    }
    break;
 80024b0:	e082      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fdcb 	bl	8002054 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0208 	orr.w	r2, r2, #8
 80024cc:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0204 	bic.w	r2, r2, #4
 80024dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69d9      	ldr	r1, [r3, #28]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
    }
    break;
 80024f0:	e062      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fe39 	bl	8002170 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69d9      	ldr	r1, [r3, #28]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	021a      	lsls	r2, r3, #8
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	61da      	str	r2, [r3, #28]
    }
    break;
 8002532:	e041      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f89e 	bl	800267c <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0208 	orr.w	r2, r2, #8
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0204 	bic.w	r2, r2, #4
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002572:	e021      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f8e8 	bl	8002750 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	021a      	lsls	r2, r3, #8
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80025b4:	e000      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80025b6:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop

080025d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e03d      	b.n	8002668 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800261e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002642:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	4313      	orrs	r3, r2
 800264c:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
} 
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40013400 	.word	0x40013400

0800267c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80026cc:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <TIM_OC5_SetConfig+0xc0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_OC5_SetConfig+0x86>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <TIM_OC5_SetConfig+0xc4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_OC5_SetConfig+0x86>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <TIM_OC5_SetConfig+0xc8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_OC5_SetConfig+0x86>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <TIM_OC5_SetConfig+0xcc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_OC5_SetConfig+0x86>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a13      	ldr	r2, [pc, #76]	; (800274c <TIM_OC5_SetConfig+0xd0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d109      	bne.n	8002716 <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40013400 	.word	0x40013400
 8002744:	40014000 	.word	0x40014000
 8002748:	40014400 	.word	0x40014400
 800274c:	40014800 	.word	0x40014800

08002750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	051b      	lsls	r3, r3, #20
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <TIM_OC6_SetConfig+0xc4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00f      	beq.n	80027d8 <TIM_OC6_SetConfig+0x88>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <TIM_OC6_SetConfig+0xc8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00b      	beq.n	80027d8 <TIM_OC6_SetConfig+0x88>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <TIM_OC6_SetConfig+0xcc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <TIM_OC6_SetConfig+0x88>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a15      	ldr	r2, [pc, #84]	; (8002820 <TIM_OC6_SetConfig+0xd0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d003      	beq.n	80027d8 <TIM_OC6_SetConfig+0x88>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a14      	ldr	r2, [pc, #80]	; (8002824 <TIM_OC6_SetConfig+0xd4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d109      	bne.n	80027ec <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	029b      	lsls	r3, r3, #10
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	621a      	str	r2, [r3, #32]
} 
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40013400 	.word	0x40013400
 800281c:	40014000 	.word	0x40014000
 8002820:	40014400 	.word	0x40014400
 8002824:	40014800 	.word	0x40014800

08002828 <keypadRead>:
#include "keypad.h"
#include "stm32f3xx_hal.h"
#include "main.h"

int keypadRead()
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
	uint8_t state = 16;
 800282e:	2310      	movs	r3, #16
 8002830:	71fb      	strb	r3, [r7, #7]

	do
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002838:	4868      	ldr	r0, [pc, #416]	; (80029dc <keypadRead+0x1b4>)
 800283a:	f7fe f825 	bl	8000888 <HAL_GPIO_WritePin>
		if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	4866      	ldr	r0, [pc, #408]	; (80029dc <keypadRead+0x1b4>)
 8002842:	f7fe f809 	bl	8000858 <HAL_GPIO_ReadPin>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <keypadRead+0x28>
		{
			state = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 8002850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002854:	4861      	ldr	r0, [pc, #388]	; (80029dc <keypadRead+0x1b4>)
 8002856:	f7fd ffff 	bl	8000858 <HAL_GPIO_ReadPin>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <keypadRead+0x3c>
		{
			state = 1;
 8002860:	2301      	movs	r3, #1
 8002862:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 8002864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002868:	485c      	ldr	r0, [pc, #368]	; (80029dc <keypadRead+0x1b4>)
 800286a:	f7fd fff5 	bl	8000858 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <keypadRead+0x50>
		{
			state = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 8002878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800287c:	4857      	ldr	r0, [pc, #348]	; (80029dc <keypadRead+0x1b4>)
 800287e:	f7fd ffeb 	bl	8000858 <HAL_GPIO_ReadPin>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <keypadRead+0x64>
		{
			state = 3;
 8002888:	2303      	movs	r3, #3
 800288a:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002892:	4852      	ldr	r0, [pc, #328]	; (80029dc <keypadRead+0x1b4>)
 8002894:	f7fd fff8 	bl	8000888 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289e:	484f      	ldr	r0, [pc, #316]	; (80029dc <keypadRead+0x1b4>)
 80028a0:	f7fd fff2 	bl	8000888 <HAL_GPIO_WritePin>
		if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	484d      	ldr	r0, [pc, #308]	; (80029dc <keypadRead+0x1b4>)
 80028a8:	f7fd ffd6 	bl	8000858 <HAL_GPIO_ReadPin>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <keypadRead+0x8e>
		{
			state = 4;
 80028b2:	2304      	movs	r3, #4
 80028b4:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 80028b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ba:	4848      	ldr	r0, [pc, #288]	; (80029dc <keypadRead+0x1b4>)
 80028bc:	f7fd ffcc 	bl	8000858 <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <keypadRead+0xa2>
		{
			state = 5;
 80028c6:	2305      	movs	r3, #5
 80028c8:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 80028ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ce:	4843      	ldr	r0, [pc, #268]	; (80029dc <keypadRead+0x1b4>)
 80028d0:	f7fd ffc2 	bl	8000858 <HAL_GPIO_ReadPin>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <keypadRead+0xb6>
		{
			state = 6;
 80028da:	2306      	movs	r3, #6
 80028dc:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 80028de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e2:	483e      	ldr	r0, [pc, #248]	; (80029dc <keypadRead+0x1b4>)
 80028e4:	f7fd ffb8 	bl	8000858 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <keypadRead+0xca>
		{
			state = 7;
 80028ee:	2307      	movs	r3, #7
 80028f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f8:	4838      	ldr	r0, [pc, #224]	; (80029dc <keypadRead+0x1b4>)
 80028fa:	f7fd ffc5 	bl	8000888 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002904:	4835      	ldr	r0, [pc, #212]	; (80029dc <keypadRead+0x1b4>)
 8002906:	f7fd ffbf 	bl	8000888 <HAL_GPIO_WritePin>
		if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	4833      	ldr	r0, [pc, #204]	; (80029dc <keypadRead+0x1b4>)
 800290e:	f7fd ffa3 	bl	8000858 <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <keypadRead+0xf4>
		{
			state = 8;
 8002918:	2308      	movs	r3, #8
 800291a:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 800291c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002920:	482e      	ldr	r0, [pc, #184]	; (80029dc <keypadRead+0x1b4>)
 8002922:	f7fd ff99 	bl	8000858 <HAL_GPIO_ReadPin>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <keypadRead+0x108>
		{
			state = 9;
 800292c:	2309      	movs	r3, #9
 800292e:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 8002930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002934:	4829      	ldr	r0, [pc, #164]	; (80029dc <keypadRead+0x1b4>)
 8002936:	f7fd ff8f 	bl	8000858 <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <keypadRead+0x11c>
		{
			state = 10;
 8002940:	230a      	movs	r3, #10
 8002942:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 8002944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002948:	4824      	ldr	r0, [pc, #144]	; (80029dc <keypadRead+0x1b4>)
 800294a:	f7fd ff85 	bl	8000858 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <keypadRead+0x130>
		{
			state = 11;
 8002954:	230b      	movs	r3, #11
 8002956:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8002958:	2201      	movs	r2, #1
 800295a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800295e:	481f      	ldr	r0, [pc, #124]	; (80029dc <keypadRead+0x1b4>)
 8002960:	f7fd ff92 	bl	8000888 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296a:	481c      	ldr	r0, [pc, #112]	; (80029dc <keypadRead+0x1b4>)
 800296c:	f7fd ff8c 	bl	8000888 <HAL_GPIO_WritePin>
		if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	481a      	ldr	r0, [pc, #104]	; (80029dc <keypadRead+0x1b4>)
 8002974:	f7fd ff70 	bl	8000858 <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <keypadRead+0x15a>
		{
			state = 12;
 800297e:	230c      	movs	r3, #12
 8002980:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 8002982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002986:	4815      	ldr	r0, [pc, #84]	; (80029dc <keypadRead+0x1b4>)
 8002988:	f7fd ff66 	bl	8000858 <HAL_GPIO_ReadPin>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <keypadRead+0x16e>
		{
			state = 13;
 8002992:	230d      	movs	r3, #13
 8002994:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 8002996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800299a:	4810      	ldr	r0, [pc, #64]	; (80029dc <keypadRead+0x1b4>)
 800299c:	f7fd ff5c 	bl	8000858 <HAL_GPIO_ReadPin>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <keypadRead+0x182>
		{
			state = 14;
 80029a6:	230e      	movs	r3, #14
 80029a8:	71fb      	strb	r3, [r7, #7]
		}
		if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 80029aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ae:	480b      	ldr	r0, [pc, #44]	; (80029dc <keypadRead+0x1b4>)
 80029b0:	f7fd ff52 	bl	8000858 <HAL_GPIO_ReadPin>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <keypadRead+0x196>
		{
			state = 15;
 80029ba:	230f      	movs	r3, #15
 80029bc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80029be:	2201      	movs	r2, #1
 80029c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <keypadRead+0x1b4>)
 80029c6:	f7fd ff5f 	bl	8000888 <HAL_GPIO_WritePin>
	}while(state == 16);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	f43f af30 	beq.w	8002832 <keypadRead+0xa>

	return state;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	48001000 	.word	0x48001000

080029e0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80029ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80029f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029fa:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80029fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fe:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8002a00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a02:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 f80e 	bl	8002a36 <Lcd_init>

	return lcd;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	f107 0410 	add.w	r4, r7, #16
 8002a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdb0      	pop	{r4, r5, r7, pc}

08002a36 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7d9b      	ldrb	r3, [r3, #22]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8002a46:	2133      	movs	r1, #51	; 0x33
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f889 	bl	8002b60 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8002a4e:	2132      	movs	r1, #50	; 0x32
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f885 	bl	8002b60 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8002a56:	2128      	movs	r1, #40	; 0x28
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f881 	bl	8002b60 <lcd_write_command>
 8002a5e:	e003      	b.n	8002a68 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8002a60:	2138      	movs	r1, #56	; 0x38
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f87c 	bl	8002b60 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8002a68:	2101      	movs	r1, #1
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f878 	bl	8002b60 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8002a70:	210c      	movs	r1, #12
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f874 	bl	8002b60 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8002a78:	2106      	movs	r1, #6
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f870 	bl	8002b60 <lcd_write_command>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4906      	ldr	r1, [pc, #24]	; (8002ab4 <Lcd_int+0x2c>)
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 fab4 	bl	8004008 <siprintf>

	Lcd_string(lcd, buffer);
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f806 	bl	8002ab8 <Lcd_string>
}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	0800482c 	.word	0x0800482c

08002ab8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e00a      	b.n	8002ade <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f872 	bl	8002bbc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	7bfc      	ldrb	r4, [r7, #15]
 8002ae0:	6838      	ldr	r0, [r7, #0]
 8002ae2:	f7fd fb75 	bl	80001d0 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d3ed      	bcc.n	8002ac8 <Lcd_string+0x10>
	}
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}

08002af4 <Lcd_char>:

void Lcd_char(Lcd_HandleTypeDef * lcd, char  string)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
		lcd_write_data(lcd, string);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f859 	bl	8002bbc <lcd_write_data>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
 8002b20:	4613      	mov	r3, r2
 8002b22:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <Lcd_cursor+0x30>)
 8002b28:	5cd2      	ldrb	r2, [r2, r3]
 8002b2a:	78bb      	ldrb	r3, [r7, #2]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3b80      	subs	r3, #128	; 0x80
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4619      	mov	r1, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f812 	bl	8002b60 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	080049c0 	.word	0x080049c0

08002b48 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8002b50:	2101      	movs	r1, #1
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f804 	bl	8002b60 <lcd_write_command>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6898      	ldr	r0, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	899b      	ldrh	r3, [r3, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	4619      	mov	r1, r3
 8002b78:	f7fd fe86 	bl	8000888 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7d9b      	ldrb	r3, [r3, #22]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f842 	bl	8002c18 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f839 	bl	8002c18 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8002ba6:	e005      	b.n	8002bb4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	2208      	movs	r2, #8
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f832 	bl	8002c18 <lcd_write>
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	899b      	ldrh	r3, [r3, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f7fd fe58 	bl	8000888 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7d9b      	ldrb	r3, [r3, #22]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2204      	movs	r2, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f814 	bl	8002c18 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f80b 	bl	8002c18 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8002c02:	e005      	b.n	8002c10 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	2208      	movs	r2, #8
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f804 	bl	8002c18 <lcd_write>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
 8002c24:	4613      	mov	r3, r2
 8002c26:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e019      	b.n	8002c62 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	8819      	ldrh	r1, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	fa42 f303 	asr.w	r3, r2, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	f7fd fe16 	bl	8000888 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	78bb      	ldrb	r3, [r7, #2]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3e1      	bcc.n	8002c2e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6918      	ldr	r0, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8a9b      	ldrh	r3, [r3, #20]
 8002c72:	2201      	movs	r2, #1
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd fe07 	bl	8000888 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fd fb66 	bl	800034c <HAL_Delay>
	//DWT_Delay_us(2000);
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6918      	ldr	r0, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8a9b      	ldrh	r3, [r3, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fd fdfc 	bl	8000888 <HAL_GPIO_WritePin>
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b0aa      	sub	sp, #168	; 0xa8
 8002c9c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t returnKey = 16;
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	uint8_t menuState = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t dutyCycles[3];
	char userStatus[] = "Available";
 8002caa:	4ac9      	ldr	r2, [pc, #804]	; (8002fd0 <main+0x338>)
 8002cac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb2:	c303      	stmia	r3!, {r0, r1}
 8002cb4:	801a      	strh	r2, [r3, #0]
	char userName[18] = { 0 };
 8002cb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	821a      	strh	r2, [r3, #16]
	char alphabets[2][26] = { { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v','w', 'x', 'y', 'z' },
 8002cc6:	4bc3      	ldr	r3, [pc, #780]	; (8002fd4 <main+0x33c>)
 8002cc8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002ccc:	461d      	mov	r5, r3
 8002cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	6023      	str	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cde:	f7fd facf 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce2:	f000 fd69 	bl	80037b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ce6:	f000 ff0b 	bl	8003b00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002cea:	f000 fda7 	bl	800383c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cee:	f000 fe1b 	bl	8003928 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002cf2:	f000 fe8f 	bl	8003a14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	Lcd_PortType ports[] = {
 8002cf6:	4bb8      	ldr	r3, [pc, #736]	; (8002fd8 <main+0x340>)
 8002cf8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002cfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	};

	Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8002d02:	4ab6      	ldr	r2, [pc, #728]	; (8002fdc <main+0x344>)
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d0c:	e883 0003 	stmia.w	r3, {r0, r1}

	Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8002d10:	1d38      	adds	r0, r7, #4
 8002d12:	f107 021c 	add.w	r2, r7, #28
 8002d16:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9303      	str	r3, [sp, #12]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	4baf      	ldr	r3, [pc, #700]	; (8002fe0 <main+0x348>)
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2340      	movs	r3, #64	; 0x40
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4bad      	ldr	r3, [pc, #692]	; (8002fe0 <main+0x348>)
 8002d2c:	f7ff fe58 	bl	80029e0 <Lcd_create>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Main menu
		if (menuState == 1)
 8002d30:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d137      	bne.n	8002da8 <main+0x110>
		{
			Lcd_clear(&lcd);
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff04 	bl	8002b48 <Lcd_clear>
			Lcd_string(&lcd, "1.Settings 2.Status");
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	49a8      	ldr	r1, [pc, #672]	; (8002fe4 <main+0x34c>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff feb7 	bl	8002ab8 <Lcd_string>
			returnKey = keypadRead();
 8002d4a:	f7ff fd6d 	bl	8002828 <keypadRead>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			switch (returnKey)
 8002d54:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d81f      	bhi.n	8002d9c <main+0x104>
 8002d5c:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <main+0xcc>)
 8002d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002d75 	.word	0x08002d75
 8002d68:	08002d7d 	.word	0x08002d7d
 8002d6c:	08002d85 	.word	0x08002d85
 8002d70:	08002d91 	.word	0x08002d91
			{
			case 0:
				menuState = 11;
 8002d74:	230b      	movs	r3, #11
 8002d76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002d7a:	e016      	b.n	8002daa <main+0x112>

			case 1:
				menuState = 12;
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002d82:	e012      	b.n	8002daa <main+0x112>

			case 2:
				Lcd_string(&lcd, "3");
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4998      	ldr	r1, [pc, #608]	; (8002fe8 <main+0x350>)
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fe95 	bl	8002ab8 <Lcd_string>
				break;
 8002d8e:	e00c      	b.n	8002daa <main+0x112>

			case 3:
				Lcd_string(&lcd, "A");
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	4996      	ldr	r1, [pc, #600]	; (8002fec <main+0x354>)
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fe8f 	bl	8002ab8 <Lcd_string>
				break;
 8002d9a:	e006      	b.n	8002daa <main+0x112>

			default:
				Lcd_string(&lcd, "Wrong");
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	4994      	ldr	r1, [pc, #592]	; (8002ff0 <main+0x358>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fe89 	bl	8002ab8 <Lcd_string>
				break;
 8002da6:	e000      	b.n	8002daa <main+0x112>
			}
		}
 8002da8:	bf00      	nop

		//Settings Menu
		if (menuState == 11)
 8002daa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002dae:	2b0b      	cmp	r3, #11
 8002db0:	d15a      	bne.n	8002e68 <main+0x1d0>
		{
			Lcd_clear(&lcd);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fec7 	bl	8002b48 <Lcd_clear>
			Lcd_cursor(&lcd, 0, 4);
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fea7 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "Customize...");
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	498a      	ldr	r1, [pc, #552]	; (8002ff4 <main+0x35c>)
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe74 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fe9c 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "1.Buzzer 2.Vibration");
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	4986      	ldr	r1, [pc, #536]	; (8002ff8 <main+0x360>)
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe69 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 2, 0);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2200      	movs	r2, #0
 8002dea:	2102      	movs	r1, #2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fe91 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "3.LED    4.Name");
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	4981      	ldr	r1, [pc, #516]	; (8002ffc <main+0x364>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe5e 	bl	8002ab8 <Lcd_string>

			returnKey = keypadRead();
 8002dfc:	f7ff fd14 	bl	8002828 <keypadRead>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			switch (returnKey)
 8002e06:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002e0a:	2b07      	cmp	r3, #7
 8002e0c:	d826      	bhi.n	8002e5c <main+0x1c4>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <main+0x17c>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e35 	.word	0x08002e35
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	08002e45 	.word	0x08002e45
 8002e20:	08002e5d 	.word	0x08002e5d
 8002e24:	08002e4d 	.word	0x08002e4d
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e55 	.word	0x08002e55
			{
			case 0:
				menuState = 111;
 8002e34:	236f      	movs	r3, #111	; 0x6f
 8002e36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002e3a:	e016      	b.n	8002e6a <main+0x1d2>

			case 1:
				menuState = 112;
 8002e3c:	2370      	movs	r3, #112	; 0x70
 8002e3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002e42:	e012      	b.n	8002e6a <main+0x1d2>

			case 2:
				menuState = 113;
 8002e44:	2371      	movs	r3, #113	; 0x71
 8002e46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002e4a:	e00e      	b.n	8002e6a <main+0x1d2>

			case 4:
				menuState = 114;
 8002e4c:	2372      	movs	r3, #114	; 0x72
 8002e4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002e52:	e00a      	b.n	8002e6a <main+0x1d2>

			case 7:
				menuState = 1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002e5a:	e006      	b.n	8002e6a <main+0x1d2>

			default:
				Lcd_string(&lcd, "Wrong");
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	4964      	ldr	r1, [pc, #400]	; (8002ff0 <main+0x358>)
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fe29 	bl	8002ab8 <Lcd_string>
				break;
 8002e66:	e000      	b.n	8002e6a <main+0x1d2>
			}
		}
 8002e68:	bf00      	nop

		//Buzzer Menu
		if (menuState == 111)
 8002e6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002e6e:	2b6f      	cmp	r3, #111	; 0x6f
 8002e70:	f040 808a 	bne.w	8002f88 <main+0x2f0>
		{
			Lcd_clear(&lcd);
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fe66 	bl	8002b48 <Lcd_clear>
			Lcd_string(&lcd, "Buzzer");
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	4960      	ldr	r1, [pc, #384]	; (8003000 <main+0x368>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fe19 	bl	8002ab8 <Lcd_string>

			htim2.Instance->CCR2 = dutyCycles[0]; //% Duty Cycle
 8002e86:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8002e8a:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <main+0x36c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
			//__HAL_TIM_SET_AUTORELOAD(&htim2, dutyCycles[]);
			//__HAL_TIM_SET_AUTORELOAD(&htim2, 7200);

			returnKey = keypadRead();
 8002e90:	f7ff fcca 	bl	8002828 <keypadRead>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			switch (returnKey) {
 8002e9a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002e9e:	2b07      	cmp	r3, #7
 8002ea0:	d06a      	beq.n	8002f78 <main+0x2e0>
 8002ea2:	2b0f      	cmp	r3, #15
 8002ea4:	d035      	beq.n	8002f12 <main+0x27a>
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d000      	beq.n	8002eac <main+0x214>
				htim2.Instance->CCR2 = 0; //% Duty Cycle
				menuState = 11;
				break;

			default:
				break;
 8002eaa:	e06e      	b.n	8002f8a <main+0x2f2>
				if(dutyCycles[0] < 50)
 8002eac:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002eb0:	2b31      	cmp	r3, #49	; 0x31
 8002eb2:	d814      	bhi.n	8002ede <main+0x246>
					dutyCycles[0] += 10;
 8002eb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002eb8:	330a      	adds	r3, #10
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
					Lcd_cursor(&lcd, 2, 8);
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fe24 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8002ecc:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fdd6 	bl	8002a88 <Lcd_int>
				break;
 8002edc:	e055      	b.n	8002f8a <main+0x2f2>
					Lcd_cursor(&lcd, 1, 1);
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe15 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go higher!");
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	4946      	ldr	r1, [pc, #280]	; (8003008 <main+0x370>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fde2 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	2102      	movs	r1, #2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fe0a 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8002f00:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f04:	461a      	mov	r2, r3
 8002f06:	1d3b      	adds	r3, r7, #4
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fdbc 	bl	8002a88 <Lcd_int>
				break;
 8002f10:	e03b      	b.n	8002f8a <main+0x2f2>
				if (dutyCycles[0] > 0) {
 8002f12:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d014      	beq.n	8002f44 <main+0x2ac>
					dutyCycles[0] -= 10;
 8002f1a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f1e:	3b0a      	subs	r3, #10
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
					Lcd_cursor(&lcd, 2, 8);
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2208      	movs	r2, #8
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fdf1 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8002f32:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f36:	461a      	mov	r2, r3
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fda3 	bl	8002a88 <Lcd_int>
				break;
 8002f42:	e022      	b.n	8002f8a <main+0x2f2>
					Lcd_cursor(&lcd, 1, 2);
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2202      	movs	r2, #2
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fde2 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go lower!");
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	492e      	ldr	r1, [pc, #184]	; (800300c <main+0x374>)
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fdaf 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	2102      	movs	r1, #2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fdd7 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8002f66:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fd89 	bl	8002a88 <Lcd_int>
				break;
 8002f76:	e008      	b.n	8002f8a <main+0x2f2>
				htim2.Instance->CCR2 = 0; //% Duty Cycle
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <main+0x36c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
				menuState = 11;
 8002f80:	230b      	movs	r3, #11
 8002f82:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8002f86:	e000      	b.n	8002f8a <main+0x2f2>
			}
		}
 8002f88:	bf00      	nop

		//Vib Menu
		if (menuState == 112)
 8002f8a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002f8e:	2b70      	cmp	r3, #112	; 0x70
 8002f90:	f040 80b0 	bne.w	80030f4 <main+0x45c>
		{
			Lcd_clear(&lcd);
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fdd6 	bl	8002b48 <Lcd_clear>
			Lcd_string(&lcd, "Vibration");
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	491c      	ldr	r1, [pc, #112]	; (8003010 <main+0x378>)
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fd89 	bl	8002ab8 <Lcd_string>

			htim3.Instance->CCR1 = dutyCycles[1]; //% Duty Cycle
 8002fa6:	f897 2089 	ldrb.w	r2, [r7, #137]	; 0x89
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <main+0x37c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34

			returnKey = keypadRead();
 8002fb0:	f7ff fc3a 	bl	8002828 <keypadRead>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			switch (returnKey) {
 8002fba:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	f000 8090 	beq.w	80030e4 <main+0x44c>
 8002fc4:	2b0f      	cmp	r3, #15
 8002fc6:	d05a      	beq.n	800307e <main+0x3e6>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d025      	beq.n	8003018 <main+0x380>
				htim3.Instance->CCR1 = 0; //% Duty Cycle
				menuState = 11;
				break;

			default:
				break;
 8002fcc:	e093      	b.n	80030f6 <main+0x45e>
 8002fce:	bf00      	nop
 8002fd0:	08004938 	.word	0x08004938
 8002fd4:	08004954 	.word	0x08004954
 8002fd8:	08004988 	.word	0x08004988
 8002fdc:	08004998 	.word	0x08004998
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	08004830 	.word	0x08004830
 8002fe8:	08004844 	.word	0x08004844
 8002fec:	08004848 	.word	0x08004848
 8002ff0:	0800484c 	.word	0x0800484c
 8002ff4:	08004854 	.word	0x08004854
 8002ff8:	08004864 	.word	0x08004864
 8002ffc:	0800487c 	.word	0x0800487c
 8003000:	0800488c 	.word	0x0800488c
 8003004:	2000011c 	.word	0x2000011c
 8003008:	08004894 	.word	0x08004894
 800300c:	080048a8 	.word	0x080048a8
 8003010:	080048bc 	.word	0x080048bc
 8003014:	200000dc 	.word	0x200000dc
				if(dutyCycles[1] < 90)
 8003018:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800301c:	2b59      	cmp	r3, #89	; 0x59
 800301e:	d814      	bhi.n	800304a <main+0x3b2>
					dutyCycles[1] += 10;
 8003020:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003024:	330a      	adds	r3, #10
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
					Lcd_cursor(&lcd, 2, 8);
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2208      	movs	r2, #8
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fd6e 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 8003038:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800303c:	461a      	mov	r2, r3
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fd20 	bl	8002a88 <Lcd_int>
				break;
 8003048:	e055      	b.n	80030f6 <main+0x45e>
					Lcd_cursor(&lcd, 1, 1);
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	2201      	movs	r2, #1
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fd5f 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go higher!");
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	49d0      	ldr	r1, [pc, #832]	; (800339c <main+0x704>)
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fd2c 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	2208      	movs	r2, #8
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fd54 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 800306c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003070:	461a      	mov	r2, r3
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fd06 	bl	8002a88 <Lcd_int>
				break;
 800307c:	e03b      	b.n	80030f6 <main+0x45e>
				if (dutyCycles[1] > 0) {
 800307e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003082:	2b00      	cmp	r3, #0
 8003084:	d014      	beq.n	80030b0 <main+0x418>
					dutyCycles[1] -= 10;
 8003086:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800308a:	3b0a      	subs	r3, #10
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
					Lcd_cursor(&lcd, 2, 8);
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	2208      	movs	r2, #8
 8003096:	2102      	movs	r1, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fd3b 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 800309e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80030a2:	461a      	mov	r2, r3
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fced 	bl	8002a88 <Lcd_int>
				break;
 80030ae:	e022      	b.n	80030f6 <main+0x45e>
					Lcd_cursor(&lcd, 1, 2);
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	2202      	movs	r2, #2
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fd2c 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go lower!");
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	49b8      	ldr	r1, [pc, #736]	; (80033a0 <main+0x708>)
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fcf9 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	2208      	movs	r2, #8
 80030ca:	2102      	movs	r1, #2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd21 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 80030d2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80030d6:	461a      	mov	r2, r3
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fcd3 	bl	8002a88 <Lcd_int>
				break;
 80030e2:	e008      	b.n	80030f6 <main+0x45e>
				htim3.Instance->CCR1 = 0; //% Duty Cycle
 80030e4:	4baf      	ldr	r3, [pc, #700]	; (80033a4 <main+0x70c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2200      	movs	r2, #0
 80030ea:	635a      	str	r2, [r3, #52]	; 0x34
				menuState = 11;
 80030ec:	230b      	movs	r3, #11
 80030ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 80030f2:	e000      	b.n	80030f6 <main+0x45e>
			}
		}
 80030f4:	bf00      	nop

		//LED Menu
		if (menuState == 113)
 80030f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80030fa:	2b71      	cmp	r3, #113	; 0x71
 80030fc:	f040 808a 	bne.w	8003214 <main+0x57c>
		{
			Lcd_clear(&lcd);
 8003100:	1d3b      	adds	r3, r7, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fd20 	bl	8002b48 <Lcd_clear>
			Lcd_string(&lcd, "LED");
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	49a7      	ldr	r1, [pc, #668]	; (80033a8 <main+0x710>)
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fcd3 	bl	8002ab8 <Lcd_string>

			htim4.Instance->CCR1 = dutyCycles[2]; //% Duty Cycle
 8003112:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8003116:	4ba5      	ldr	r3, [pc, #660]	; (80033ac <main+0x714>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	635a      	str	r2, [r3, #52]	; 0x34

			returnKey = keypadRead();
 800311c:	f7ff fb84 	bl	8002828 <keypadRead>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			switch (returnKey) {
 8003126:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800312a:	2b07      	cmp	r3, #7
 800312c:	d06a      	beq.n	8003204 <main+0x56c>
 800312e:	2b0f      	cmp	r3, #15
 8003130:	d035      	beq.n	800319e <main+0x506>
 8003132:	2b03      	cmp	r3, #3
 8003134:	d000      	beq.n	8003138 <main+0x4a0>
				htim4.Instance->CCR1 = 0; //% Duty Cycle
				menuState = 11;
				break;

			default:
				break;
 8003136:	e06e      	b.n	8003216 <main+0x57e>
				if(dutyCycles[2] < 100)
 8003138:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800313c:	2b63      	cmp	r3, #99	; 0x63
 800313e:	d814      	bhi.n	800316a <main+0x4d2>
					dutyCycles[2] += 10;
 8003140:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003144:	330a      	adds	r3, #10
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
					Lcd_cursor(&lcd, 2, 8);
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	2208      	movs	r2, #8
 8003150:	2102      	movs	r1, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fcde 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 8003158:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800315c:	461a      	mov	r2, r3
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fc90 	bl	8002a88 <Lcd_int>
				break;
 8003168:	e055      	b.n	8003216 <main+0x57e>
					Lcd_cursor(&lcd, 1, 1);
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2201      	movs	r2, #1
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fccf 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go higher!");
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	4988      	ldr	r1, [pc, #544]	; (800339c <main+0x704>)
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fc9c 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8003180:	1d3b      	adds	r3, r7, #4
 8003182:	2208      	movs	r2, #8
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fcc4 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 800318c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003190:	461a      	mov	r2, r3
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fc76 	bl	8002a88 <Lcd_int>
				break;
 800319c:	e03b      	b.n	8003216 <main+0x57e>
				if (dutyCycles[2] > 0) {
 800319e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d014      	beq.n	80031d0 <main+0x538>
					dutyCycles[2] -= 10;
 80031a6:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80031aa:	3b0a      	subs	r3, #10
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
					Lcd_cursor(&lcd, 2, 8);
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2208      	movs	r2, #8
 80031b6:	2102      	movs	r1, #2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fcab 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 80031be:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80031c2:	461a      	mov	r2, r3
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fc5d 	bl	8002a88 <Lcd_int>
				break;
 80031ce:	e022      	b.n	8003216 <main+0x57e>
					Lcd_cursor(&lcd, 1, 2);
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2202      	movs	r2, #2
 80031d4:	2101      	movs	r1, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fc9c 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go lower!");
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	4970      	ldr	r1, [pc, #448]	; (80033a0 <main+0x708>)
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fc69 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	2208      	movs	r2, #8
 80031ea:	2102      	movs	r1, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fc91 	bl	8002b14 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 80031f2:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80031f6:	461a      	mov	r2, r3
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fc43 	bl	8002a88 <Lcd_int>
				break;
 8003202:	e008      	b.n	8003216 <main+0x57e>
				htim4.Instance->CCR1 = 0; //% Duty Cycle
 8003204:	4b69      	ldr	r3, [pc, #420]	; (80033ac <main+0x714>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	635a      	str	r2, [r3, #52]	; 0x34
				menuState = 11;
 800320c:	230b      	movs	r3, #11
 800320e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8003212:	e000      	b.n	8003216 <main+0x57e>
			}
		}
 8003214:	bf00      	nop

		//Name Menu
		if (menuState == 114)
 8003216:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800321a:	2b72      	cmp	r3, #114	; 0x72
 800321c:	f040 822c 	bne.w	8003678 <main+0x9e0>
		{
			int8_t alphaRow = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			int8_t alphaCol = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			int8_t namePos = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			int8_t cursorCol = 1;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

			Lcd_clear(&lcd);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fc84 	bl	8002b48 <Lcd_clear>
			Lcd_string(&lcd, "Name");
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	495b      	ldr	r1, [pc, #364]	; (80033b0 <main+0x718>)
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fc37 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 2, 1);
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2201      	movs	r2, #1
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fc5f 	bl	8002b14 <Lcd_cursor>
			Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8003256:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 800325a:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800325e:	211a      	movs	r1, #26
 8003260:	fb01 f202 	mul.w	r2, r1, r2
 8003264:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003268:	440a      	add	r2, r1
 800326a:	4413      	add	r3, r2
 800326c:	3b64      	subs	r3, #100	; 0x64
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fc3d 	bl	8002af4 <Lcd_char>

			do{
				Lcd_cursor(&lcd, 3, 1);
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	2201      	movs	r2, #1
 800327e:	2103      	movs	r1, #3
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fc47 	bl	8002b14 <Lcd_cursor>
				Lcd_string(&lcd, userName);
 8003286:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fc12 	bl	8002ab8 <Lcd_string>

				returnKey = keypadRead();
 8003294:	f7ff fac8 	bl	8002828 <keypadRead>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

				switch (returnKey) {
 800329e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80032a2:	3b01      	subs	r3, #1
 80032a4:	2b0e      	cmp	r3, #14
 80032a6:	f200 81df 	bhi.w	8003668 <main+0x9d0>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <main+0x618>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032ed 	.word	0x080032ed
 80032b4:	08003669 	.word	0x08003669
 80032b8:	08003669 	.word	0x08003669
 80032bc:	08003345 	.word	0x08003345
 80032c0:	080033b5 	.word	0x080033b5
 80032c4:	08003471 	.word	0x08003471
 80032c8:	08003661 	.word	0x08003661
 80032cc:	08003669 	.word	0x08003669
 80032d0:	080034c9 	.word	0x080034c9
 80032d4:	08003669 	.word	0x08003669
 80032d8:	08003521 	.word	0x08003521
 80032dc:	08003669 	.word	0x08003669
 80032e0:	08003669 	.word	0x08003669
 80032e4:	08003669 	.word	0x08003669
 80032e8:	080035cb 	.word	0x080035cb
				//Alphabet Increase
				case 1:
					alphaCol++;
 80032ec:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					if(alphaCol > 25)
 80032fa:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80032fe:	2b19      	cmp	r3, #25
 8003300:	dd02      	ble.n	8003308 <main+0x670>
					{
						alphaCol = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8003308:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fbff 	bl	8002b14 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8003316:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 800331a:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800331e:	211a      	movs	r1, #26
 8003320:	fb01 f202 	mul.w	r2, r1, r2
 8003324:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003328:	440a      	add	r2, r1
 800332a:	4413      	add	r3, r2
 800332c:	3b64      	subs	r3, #100	; 0x64
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fbdd 	bl	8002af4 <Lcd_char>
					HAL_Delay(300);
 800333a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800333e:	f7fd f805 	bl	800034c <HAL_Delay>
					break;
 8003342:	e194      	b.n	800366e <main+0x9d6>

					//Alphabet Caps
				case 4:
					alphaRow++;
 8003344:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3301      	adds	r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
					if(alphaRow > 1)
 8003352:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 8003356:	2b01      	cmp	r3, #1
 8003358:	dd02      	ble.n	8003360 <main+0x6c8>
					{
						alphaRow = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8003360:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fbd3 	bl	8002b14 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800336e:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 8003372:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 8003376:	211a      	movs	r1, #26
 8003378:	fb01 f202 	mul.w	r2, r1, r2
 800337c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003380:	440a      	add	r2, r1
 8003382:	4413      	add	r3, r2
 8003384:	3b64      	subs	r3, #100	; 0x64
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fbb1 	bl	8002af4 <Lcd_char>
					HAL_Delay(300);
 8003392:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003396:	f7fc ffd9 	bl	800034c <HAL_Delay>
					break;
 800339a:	e168      	b.n	800366e <main+0x9d6>
 800339c:	08004894 	.word	0x08004894
 80033a0:	080048a8 	.word	0x080048a8
 80033a4:	200000dc 	.word	0x200000dc
 80033a8:	080048c8 	.word	0x080048c8
 80033ac:	2000009c 	.word	0x2000009c
 80033b0:	080048cc 	.word	0x080048cc

					//Char parse
				case 5:
					if(namePos <= 17)
 80033b4:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80033b8:	2b11      	cmp	r3, #17
 80033ba:	dc49      	bgt.n	8003450 <main+0x7b8>
					{
						//Store letter in name array
						userName[namePos] = alphabets[alphaRow][alphaCol];
 80033bc:	f997 1096 	ldrsb.w	r1, [r7, #150]	; 0x96
 80033c0:	f997 2095 	ldrsb.w	r2, [r7, #149]	; 0x95
 80033c4:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80033c8:	201a      	movs	r0, #26
 80033ca:	fb00 f101 	mul.w	r1, r0, r1
 80033ce:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80033d2:	4401      	add	r1, r0
 80033d4:	440a      	add	r2, r1
 80033d6:	3a64      	subs	r2, #100	; 0x64
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80033de:	440b      	add	r3, r1
 80033e0:	f803 2c30 	strb.w	r2, [r3, #-48]
						namePos++;
 80033e4:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

						//Dont let cursor exceed 18 chars
						if (cursorCol < 18)
 80033f2:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 80033f6:	2b11      	cmp	r3, #17
 80033f8:	dc06      	bgt.n	8003408 <main+0x770>
						{
							cursorCol++;
 80033fa:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						}
						alphaCol = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
						alphaRow = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

						//Move cursor over one and reset alphabet
						Lcd_cursor(&lcd, 2, cursorCol);
 8003414:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	2102      	movs	r1, #2
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fb79 	bl	8002b14 <Lcd_cursor>
						Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8003422:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 8003426:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800342a:	211a      	movs	r1, #26
 800342c:	fb01 f202 	mul.w	r2, r1, r2
 8003430:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003434:	440a      	add	r2, r1
 8003436:	4413      	add	r3, r2
 8003438:	3b64      	subs	r3, #100	; 0x64
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fb57 	bl	8002af4 <Lcd_char>
						HAL_Delay(300);
 8003446:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800344a:	f7fc ff7f 	bl	800034c <HAL_Delay>
						//Dont let username exceed 18 chars
						Lcd_cursor(&lcd, 3, 0);
						Lcd_string(&lcd, "    Max letters!    ");
						HAL_Delay(750);
					}
					break;
 800344e:	e10e      	b.n	800366e <main+0x9d6>
						Lcd_cursor(&lcd, 3, 0);
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	2200      	movs	r2, #0
 8003454:	2103      	movs	r1, #3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fb5c 	bl	8002b14 <Lcd_cursor>
						Lcd_string(&lcd, "    Max letters!    ");
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	49cd      	ldr	r1, [pc, #820]	; (8003794 <main+0xafc>)
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fb29 	bl	8002ab8 <Lcd_string>
						HAL_Delay(750);
 8003466:	f240 20ee 	movw	r0, #750	; 0x2ee
 800346a:	f7fc ff6f 	bl	800034c <HAL_Delay>
					break;
 800346e:	e0fe      	b.n	800366e <main+0x9d6>

					//Alphabet Caps
				case 6:
					alphaRow--;
 8003470:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 8003474:	b2db      	uxtb	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
					if(alphaRow < 0)
 800347e:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 8003482:	2b00      	cmp	r3, #0
 8003484:	da02      	bge.n	800348c <main+0x7f4>
					{
						alphaRow = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 800348c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fb3d 	bl	8002b14 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800349a:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 800349e:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80034a2:	211a      	movs	r1, #26
 80034a4:	fb01 f202 	mul.w	r2, r1, r2
 80034a8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80034ac:	440a      	add	r2, r1
 80034ae:	4413      	add	r3, r2
 80034b0:	3b64      	subs	r3, #100	; 0x64
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fb1b 	bl	8002af4 <Lcd_char>
					HAL_Delay(300);
 80034be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034c2:	f7fc ff43 	bl	800034c <HAL_Delay>
					break;
 80034c6:	e0d2      	b.n	800366e <main+0x9d6>

					//Alphabet Decrease
				case 9:
					alphaCol--;
 80034c8:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					if(alphaCol < 0)
 80034d6:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da02      	bge.n	80034e4 <main+0x84c>
					{
						alphaCol = 25;
 80034de:	2319      	movs	r3, #25
 80034e0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 80034e4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fb11 	bl	8002b14 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 80034f2:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 80034f6:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80034fa:	211a      	movs	r1, #26
 80034fc:	fb01 f202 	mul.w	r2, r1, r2
 8003500:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003504:	440a      	add	r2, r1
 8003506:	4413      	add	r3, r2
 8003508:	3b64      	subs	r3, #100	; 0x64
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff faef 	bl	8002af4 <Lcd_char>
					HAL_Delay(300);
 8003516:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800351a:	f7fc ff17 	bl	800034c <HAL_Delay>
					break;
 800351e:	e0a6      	b.n	800366e <main+0x9d6>

					//Clear Username
				case 11:
					for (int k = 0; k < sizeof(userName); k++)
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003526:	e00b      	b.n	8003540 <main+0x8a8>
					{
						userName[k] = ' ';
 8003528:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800352c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003530:	4413      	add	r3, r2
 8003532:	2220      	movs	r2, #32
 8003534:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k < sizeof(userName); k++)
 8003536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800353a:	3301      	adds	r3, #1
 800353c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003544:	2b11      	cmp	r3, #17
 8003546:	d9ef      	bls.n	8003528 <main+0x890>
					}

					alphaRow = 1;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
					alphaCol = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
					namePos = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
					cursorCol = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

					Lcd_cursor(&lcd, 3, 0);
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2200      	movs	r2, #0
 8003564:	2103      	movs	r1, #3
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fad4 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "                    ");
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	498a      	ldr	r1, [pc, #552]	; (8003798 <main+0xb00>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff faa1 	bl	8002ab8 <Lcd_string>

					Lcd_cursor(&lcd, 2, cursorCol);
 8003576:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fac8 	bl	8002b14 <Lcd_cursor>
					Lcd_string(&lcd, "                    ");
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	4984      	ldr	r1, [pc, #528]	; (8003798 <main+0xb00>)
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fa95 	bl	8002ab8 <Lcd_string>
					Lcd_cursor(&lcd, 2, cursorCol);
 800358e:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fabc 	bl	8002b14 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800359c:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 80035a0:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 80035a4:	211a      	movs	r1, #26
 80035a6:	fb01 f202 	mul.w	r2, r1, r2
 80035aa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80035ae:	440a      	add	r2, r1
 80035b0:	4413      	add	r3, r2
 80035b2:	3b64      	subs	r3, #100	; 0x64
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fa9a 	bl	8002af4 <Lcd_char>
					HAL_Delay(300);
 80035c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035c4:	f7fc fec2 	bl	800034c <HAL_Delay>
					break;
 80035c8:	e051      	b.n	800366e <main+0x9d6>

					//"Backspace"
				case 15:
					if(namePos > 0)
 80035ca:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	dd4c      	ble.n	800366c <main+0x9d4>
					{
						userName[namePos-1] = ' ';
 80035d2:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80035dc:	4413      	add	r3, r2
 80035de:	2220      	movs	r2, #32
 80035e0:	f803 2c30 	strb.w	r2, [r3, #-48]
						namePos -= 1;
 80035e4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						cursorCol -= 1;
 80035f0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						alphaRow = 1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
						alphaCol = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

						Lcd_cursor(&lcd, 2, cursorCol+1);
 8003608:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800360c:	3301      	adds	r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fa7d 	bl	8002b14 <Lcd_cursor>
						Lcd_char(&lcd, ' ');
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	2120      	movs	r1, #32
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fa68 	bl	8002af4 <Lcd_char>
						Lcd_cursor(&lcd, 2, cursorCol);
 8003624:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fa71 	bl	8002b14 <Lcd_cursor>
						Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8003632:	f997 2096 	ldrsb.w	r2, [r7, #150]	; 0x96
 8003636:	f997 3095 	ldrsb.w	r3, [r7, #149]	; 0x95
 800363a:	211a      	movs	r1, #26
 800363c:	fb01 f202 	mul.w	r2, r1, r2
 8003640:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003644:	440a      	add	r2, r1
 8003646:	4413      	add	r3, r2
 8003648:	3b64      	subs	r3, #100	; 0x64
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fa4f 	bl	8002af4 <Lcd_char>
						HAL_Delay(300);
 8003656:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800365a:	f7fc fe77 	bl	800034c <HAL_Delay>
					}
					break;
 800365e:	e005      	b.n	800366c <main+0x9d4>

					//Back
				case 7:
					menuState = 11;
 8003660:	230b      	movs	r3, #11
 8003662:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8003666:	e002      	b.n	800366e <main+0x9d6>

				default:
					break;
 8003668:	bf00      	nop
 800366a:	e000      	b.n	800366e <main+0x9d6>
					break;
 800366c:	bf00      	nop
				}
			}while(menuState != 11);
 800366e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003672:	2b0b      	cmp	r3, #11
 8003674:	f47f ae01 	bne.w	800327a <main+0x5e2>
		}

		//Status Menu
		if(menuState == 12)
 8003678:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d17f      	bne.n	8003780 <main+0xae8>
		{
			Lcd_clear(&lcd);
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fa60 	bl	8002b48 <Lcd_clear>
			Lcd_cursor(&lcd, 0, 4);
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	2204      	movs	r2, #4
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fa40 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "Pick Status");
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	4941      	ldr	r1, [pc, #260]	; (800379c <main+0xb04>)
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fa0d 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2200      	movs	r2, #0
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fa35 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "1.Available  2.Busy");
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	493c      	ldr	r1, [pc, #240]	; (80037a0 <main+0xb08>)
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fa02 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 2, 0);
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	2200      	movs	r2, #0
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fa2a 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "3.Away");
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4938      	ldr	r1, [pc, #224]	; (80037a4 <main+0xb0c>)
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f9f7 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 3, 0);
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2200      	movs	r2, #0
 80036ce:	2103      	movs	r1, #3
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fa1f 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, "Current: ");
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	4933      	ldr	r1, [pc, #204]	; (80037a8 <main+0xb10>)
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9ec 	bl	8002ab8 <Lcd_string>
			Lcd_cursor(&lcd, 3, 9);
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	2209      	movs	r2, #9
 80036e4:	2103      	movs	r1, #3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fa14 	bl	8002b14 <Lcd_cursor>
			Lcd_string(&lcd, userStatus);
 80036ec:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f9df 	bl	8002ab8 <Lcd_string>

			returnKey = keypadRead();
 80036fa:	f7ff f895 	bl	8002828 <keypadRead>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			switch (returnKey) {
 8003704:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003708:	2b07      	cmp	r3, #7
 800370a:	d83b      	bhi.n	8003784 <main+0xaec>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <main+0xa7c>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003735 	.word	0x08003735
 8003718:	08003749 	.word	0x08003749
 800371c:	08003761 	.word	0x08003761
 8003720:	08003785 	.word	0x08003785
 8003724:	08003785 	.word	0x08003785
 8003728:	08003785 	.word	0x08003785
 800372c:	08003785 	.word	0x08003785
 8003730:	08003779 	.word	0x08003779
			case 0:
				strcpy(userStatus, "Available");
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <main+0xb14>)
 8003736:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800373a:	ca07      	ldmia	r2, {r0, r1, r2}
 800373c:	c303      	stmia	r3!, {r0, r1}
 800373e:	801a      	strh	r2, [r3, #0]
				menuState = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8003746:	e01e      	b.n	8003786 <main+0xaee>

			case 1:
				strcpy(userStatus, "Busy");
 8003748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800374c:	4a18      	ldr	r2, [pc, #96]	; (80037b0 <main+0xb18>)
 800374e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003752:	6018      	str	r0, [r3, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	7019      	strb	r1, [r3, #0]
				menuState = 1;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 800375e:	e012      	b.n	8003786 <main+0xaee>

			case 2:
				strcpy(userStatus, "Away");
 8003760:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003764:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <main+0xb1c>)
 8003766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800376a:	6018      	str	r0, [r3, #0]
 800376c:	3304      	adds	r3, #4
 800376e:	7019      	strb	r1, [r3, #0]
				menuState = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 8003776:	e006      	b.n	8003786 <main+0xaee>
			case 4:

				break;

			case 7:
				menuState = 1;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				break;
 800377e:	e002      	b.n	8003786 <main+0xaee>

			default:
				break;
			}
		}
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <main+0xaee>
				break;
 8003784:	bf00      	nop

		HAL_Delay(300);
 8003786:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800378a:	f7fc fddf 	bl	800034c <HAL_Delay>
		if (menuState == 1)
 800378e:	f7ff bacf 	b.w	8002d30 <main+0x98>
 8003792:	bf00      	nop
 8003794:	080048d4 	.word	0x080048d4
 8003798:	080048ec 	.word	0x080048ec
 800379c:	08004904 	.word	0x08004904
 80037a0:	08004910 	.word	0x08004910
 80037a4:	08004924 	.word	0x08004924
 80037a8:	0800492c 	.word	0x0800492c
 80037ac:	08004938 	.word	0x08004938
 80037b0:	08004944 	.word	0x08004944
 80037b4:	0800494c 	.word	0x0800494c

080037b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b090      	sub	sp, #64	; 0x40
 80037bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037be:	f107 0318 	add.w	r3, r7, #24
 80037c2:	2228      	movs	r2, #40	; 0x28
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fc16 	bl	8003ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037de:	2301      	movs	r3, #1
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037e2:	2310      	movs	r3, #16
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037e6:	2302      	movs	r3, #2
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037ea:	2300      	movs	r3, #0
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80037ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f4:	f107 0318 	add.w	r3, r7, #24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd f85d 	bl	80008b8 <HAL_RCC_OscConfig>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003804:	f000 fa0c 	bl	8003c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003808:	230f      	movs	r3, #15
 800380a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800380c:	2302      	movs	r3, #2
 800380e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd ff36 	bl	8001694 <HAL_RCC_ClockConfig>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800382e:	f000 f9f7 	bl	8003c20 <Error_Handler>
  }
}
 8003832:	bf00      	nop
 8003834:	3740      	adds	r7, #64	; 0x40
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	; 0x38
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800385c:	463b      	mov	r3, r7
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	615a      	str	r2, [r3, #20]
 800386c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003878:	2200      	movs	r2, #0
 800387a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <MX_TIM2_Init+0xe8>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003884:	2200      	movs	r2, #0
 8003886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <MX_TIM2_Init+0xe8>)
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388e:	4b25      	ldr	r3, [pc, #148]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003894:	4823      	ldr	r0, [pc, #140]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003896:	f7fe f8e3 	bl	8001a60 <HAL_TIM_Base_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80038a0:	f000 f9be 	bl	8003c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ae:	4619      	mov	r1, r3
 80038b0:	481c      	ldr	r0, [pc, #112]	; (8003924 <MX_TIM2_Init+0xe8>)
 80038b2:	f7fe f935 	bl	8001b20 <HAL_TIM_ConfigClockSource>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80038bc:	f000 f9b0 	bl	8003c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038c0:	4818      	ldr	r0, [pc, #96]	; (8003924 <MX_TIM2_Init+0xe8>)
 80038c2:	f7fe f8f8 	bl	8001ab6 <HAL_TIM_PWM_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80038cc:	f000 f9a8 	bl	8003c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	4811      	ldr	r0, [pc, #68]	; (8003924 <MX_TIM2_Init+0xe8>)
 80038e0:	f7fe fe78 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80038ea:	f000 f999 	bl	8003c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ee:	2360      	movs	r3, #96	; 0x60
 80038f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038fe:	463b      	mov	r3, r7
 8003900:	2204      	movs	r2, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4807      	ldr	r0, [pc, #28]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003906:	f7fe fd4d 	bl	80023a4 <HAL_TIM_PWM_ConfigChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003910:	f000 f986 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003914:	4803      	ldr	r0, [pc, #12]	; (8003924 <MX_TIM2_Init+0xe8>)
 8003916:	f000 f9f5 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 800391a:	bf00      	nop
 800391c:	3738      	adds	r7, #56	; 0x38
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	2000011c 	.word	0x2000011c

08003928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800392e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800393c:	f107 031c 	add.w	r3, r7, #28
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003948:	463b      	mov	r3, r7
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	611a      	str	r2, [r3, #16]
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800395a:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <MX_TIM3_Init+0xe4>)
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <MX_TIM3_Init+0xe8>)
 800395e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003960:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <MX_TIM3_Init+0xe4>)
 8003962:	2200      	movs	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <MX_TIM3_Init+0xe4>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <MX_TIM3_Init+0xe4>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <MX_TIM3_Init+0xe4>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <MX_TIM3_Init+0xe4>)
 800397a:	2200      	movs	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800397e:	4823      	ldr	r0, [pc, #140]	; (8003a0c <MX_TIM3_Init+0xe4>)
 8003980:	f7fe f86e 	bl	8001a60 <HAL_TIM_Base_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800398a:	f000 f949 	bl	8003c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800398e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003998:	4619      	mov	r1, r3
 800399a:	481c      	ldr	r0, [pc, #112]	; (8003a0c <MX_TIM3_Init+0xe4>)
 800399c:	f7fe f8c0 	bl	8001b20 <HAL_TIM_ConfigClockSource>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80039a6:	f000 f93b 	bl	8003c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039aa:	4818      	ldr	r0, [pc, #96]	; (8003a0c <MX_TIM3_Init+0xe4>)
 80039ac:	f7fe f883 	bl	8001ab6 <HAL_TIM_PWM_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80039b6:	f000 f933 	bl	8003c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039c2:	f107 031c 	add.w	r3, r7, #28
 80039c6:	4619      	mov	r1, r3
 80039c8:	4810      	ldr	r0, [pc, #64]	; (8003a0c <MX_TIM3_Init+0xe4>)
 80039ca:	f7fe fe03 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80039d4:	f000 f924 	bl	8003c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039d8:	2360      	movs	r3, #96	; 0x60
 80039da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039e8:	463b      	mov	r3, r7
 80039ea:	2200      	movs	r2, #0
 80039ec:	4619      	mov	r1, r3
 80039ee:	4807      	ldr	r0, [pc, #28]	; (8003a0c <MX_TIM3_Init+0xe4>)
 80039f0:	f7fe fcd8 	bl	80023a4 <HAL_TIM_PWM_ConfigChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80039fa:	f000 f911 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80039fe:	4803      	ldr	r0, [pc, #12]	; (8003a0c <MX_TIM3_Init+0xe4>)
 8003a00:	f000 f980 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8003a04:	bf00      	nop
 8003a06:	3738      	adds	r7, #56	; 0x38
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200000dc 	.word	0x200000dc
 8003a10:	40000400 	.word	0x40000400

08003a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a34:	463b      	mov	r3, r7
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	611a      	str	r2, [r3, #16]
 8003a42:	615a      	str	r2, [r3, #20]
 8003a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <MX_TIM4_Init+0xe8>)
 8003a4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a6a:	4823      	ldr	r0, [pc, #140]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a6c:	f7fd fff8 	bl	8001a60 <HAL_TIM_Base_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003a76:	f000 f8d3 	bl	8003c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a84:	4619      	mov	r1, r3
 8003a86:	481c      	ldr	r0, [pc, #112]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a88:	f7fe f84a 	bl	8001b20 <HAL_TIM_ConfigClockSource>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003a92:	f000 f8c5 	bl	8003c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a96:	4818      	ldr	r0, [pc, #96]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003a98:	f7fe f80d 	bl	8001ab6 <HAL_TIM_PWM_Init>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003aa2:	f000 f8bd 	bl	8003c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aae:	f107 031c 	add.w	r3, r7, #28
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4810      	ldr	r0, [pc, #64]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003ab6:	f7fe fd8d 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003ac0:	f000 f8ae 	bl	8003c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ac4:	2360      	movs	r3, #96	; 0x60
 8003ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4807      	ldr	r0, [pc, #28]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003adc:	f7fe fc62 	bl	80023a4 <HAL_TIM_PWM_ConfigChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003ae6:	f000 f89b 	bl	8003c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003aea:	4803      	ldr	r0, [pc, #12]	; (8003af8 <MX_TIM4_Init+0xe4>)
 8003aec:	f000 f90a 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8003af0:	bf00      	nop
 8003af2:	3738      	adds	r7, #56	; 0x38
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	2000009c 	.word	0x2000009c
 8003afc:	40000800 	.word	0x40000800

08003b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b16:	4b3e      	ldr	r3, [pc, #248]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4a3d      	ldr	r2, [pc, #244]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b20:	6153      	str	r3, [r2, #20]
 8003b22:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2e:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4a37      	ldr	r2, [pc, #220]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b38:	6153      	str	r3, [r2, #20]
 8003b3a:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b46:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b50:	6153      	str	r3, [r2, #20]
 8003b52:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b68:	6153      	str	r3, [r2, #20]
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <MX_GPIO_Init+0x110>)
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003b76:	2200      	movs	r2, #0
 8003b78:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8003b7c:	4825      	ldr	r0, [pc, #148]	; (8003c14 <MX_GPIO_Init+0x114>)
 8003b7e:	f7fc fe83 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 8003b82:	2200      	movs	r2, #0
 8003b84:	21c0      	movs	r1, #192	; 0xc0
 8003b86:	4824      	ldr	r0, [pc, #144]	; (8003c18 <MX_GPIO_Init+0x118>)
 8003b88:	f7fc fe7e 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	210f      	movs	r1, #15
 8003b90:	4822      	ldr	r0, [pc, #136]	; (8003c1c <MX_GPIO_Init+0x11c>)
 8003b92:	f7fc fe79 	bl	8000888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C0_In_Pin C1_In_Pin C2_In_Pin C3_In_Pin */
  GPIO_InitStruct.Pin = C0_In_Pin|C1_In_Pin|C2_In_Pin|C3_In_Pin;
 8003b96:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4619      	mov	r1, r3
 8003baa:	481a      	ldr	r0, [pc, #104]	; (8003c14 <MX_GPIO_Init+0x114>)
 8003bac:	f7fc fcd6 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003bb0:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8003bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4812      	ldr	r0, [pc, #72]	; (8003c14 <MX_GPIO_Init+0x114>)
 8003bca:	f7fc fcc7 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 8003bce:	23c0      	movs	r3, #192	; 0xc0
 8003bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	4619      	mov	r1, r3
 8003be4:	480c      	ldr	r0, [pc, #48]	; (8003c18 <MX_GPIO_Init+0x118>)
 8003be6:	f7fc fcb9 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8003bea:	230f      	movs	r3, #15
 8003bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <MX_GPIO_Init+0x11c>)
 8003c02:	f7fc fcab 	bl	800055c <HAL_GPIO_Init>

}
 8003c06:	bf00      	nop
 8003c08:	3728      	adds	r7, #40	; 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	48001000 	.word	0x48001000
 8003c18:	48000800 	.word	0x48000800
 8003c1c:	48000c00 	.word	0x48000c00

08003c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_MspInit+0x44>)
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	; (8003c74 <HAL_MspInit+0x44>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6193      	str	r3, [r2, #24]
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <HAL_MspInit+0x44>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_MspInit+0x44>)
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_MspInit+0x44>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	61d3      	str	r3, [r2, #28]
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_MspInit+0x44>)
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c66:	2007      	movs	r0, #7
 8003c68:	f7fc fc44 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40021000 	.word	0x40021000

08003c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	61d3      	str	r3, [r2, #28]
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ca2:	e022      	b.n	8003cea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <HAL_TIM_Base_MspInit+0x84>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10c      	bne.n	8003cc8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	61d3      	str	r3, [r2, #28]
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
}
 8003cc6:	e010      	b.n	8003cea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0c      	ldr	r2, [pc, #48]	; (8003d00 <HAL_TIM_Base_MspInit+0x88>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10b      	bne.n	8003cea <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	61d3      	str	r3, [r2, #28]
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_TIM_Base_MspInit+0x80>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800

08003d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d11d      	bne.n	8003d62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d26:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4a32      	ldr	r2, [pc, #200]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d30:	6153      	str	r3, [r2, #20]
 8003d32:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	4619      	mov	r1, r3
 8003d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5c:	f7fc fbfe 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d60:	e043      	b.n	8003dea <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <HAL_TIM_MspPostInit+0xf4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d11c      	bne.n	8003da6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d76:	6153      	str	r3, [r2, #20]
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d84:	2304      	movs	r3, #4
 8003d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d94:	2302      	movs	r3, #2
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4817      	ldr	r0, [pc, #92]	; (8003dfc <HAL_TIM_MspPostInit+0xf8>)
 8003da0:	f7fc fbdc 	bl	800055c <HAL_GPIO_Init>
}
 8003da4:	e021      	b.n	8003dea <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <HAL_TIM_MspPostInit+0xfc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d11c      	bne.n	8003dea <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003db0:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dba:	6153      	str	r3, [r2, #20]
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_TIM_MspPostInit+0xf0>)
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	4619      	mov	r1, r3
 8003de4:	4807      	ldr	r0, [pc, #28]	; (8003e04 <HAL_TIM_MspPostInit+0x100>)
 8003de6:	f7fc fbb9 	bl	800055c <HAL_GPIO_Init>
}
 8003dea:	bf00      	nop
 8003dec:	3728      	adds	r7, #40	; 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	48001000 	.word	0x48001000
 8003e00:	40000800 	.word	0x40000800
 8003e04:	48000c00 	.word	0x48000c00

08003e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e1a:	e7fe      	b.n	8003e1a <HardFault_Handler+0x4>

08003e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e20:	e7fe      	b.n	8003e20 <MemManage_Handler+0x4>

08003e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e26:	e7fe      	b.n	8003e26 <BusFault_Handler+0x4>

08003e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e2c:	e7fe      	b.n	8003e2c <UsageFault_Handler+0x4>

08003e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e5c:	f7fc fa56 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <_sbrk+0x50>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <_sbrk+0x16>
		heap_end = &end;
 8003e74:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <_sbrk+0x50>)
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <_sbrk+0x54>)
 8003e78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <_sbrk+0x50>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <_sbrk+0x50>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	466a      	mov	r2, sp
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d907      	bls.n	8003e9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003e8e:	f000 f889 	bl	8003fa4 <__errno>
 8003e92:	4602      	mov	r2, r0
 8003e94:	230c      	movs	r3, #12
 8003e96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	e006      	b.n	8003eac <_sbrk+0x48>
	}

	heap_end += incr;
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <_sbrk+0x50>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <_sbrk+0x50>)
 8003ea8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	2000008c 	.word	0x2000008c
 8003eb8:	20000160 	.word	0x20000160

08003ebc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <SystemInit+0x84>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <SystemInit+0x84>)
 8003ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <SystemInit+0x88>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <SystemInit+0x88>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <SystemInit+0x88>)
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	4918      	ldr	r1, [pc, #96]	; (8003f44 <SystemInit+0x88>)
 8003ee2:	4b19      	ldr	r3, [pc, #100]	; (8003f48 <SystemInit+0x8c>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003ee8:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <SystemInit+0x88>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <SystemInit+0x88>)
 8003eee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <SystemInit+0x88>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <SystemInit+0x88>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <SystemInit+0x88>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <SystemInit+0x88>)
 8003f0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003f0e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <SystemInit+0x88>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <SystemInit+0x88>)
 8003f16:	f023 030f 	bic.w	r3, r3, #15
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <SystemInit+0x88>)
 8003f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f20:	4908      	ldr	r1, [pc, #32]	; (8003f44 <SystemInit+0x88>)
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <SystemInit+0x90>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SystemInit+0x88>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <SystemInit+0x84>)
 8003f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f34:	609a      	str	r2, [r3, #8]
#endif
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000ed00 	.word	0xe000ed00
 8003f44:	40021000 	.word	0x40021000
 8003f48:	f87fc00c 	.word	0xf87fc00c
 8003f4c:	ff00fccc 	.word	0xff00fccc

08003f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f56:	e003      	b.n	8003f60 <LoopCopyDataInit>

08003f58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f5e:	3104      	adds	r1, #4

08003f60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f60:	480b      	ldr	r0, [pc, #44]	; (8003f90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f68:	d3f6      	bcc.n	8003f58 <CopyDataInit>
	ldr	r2, =_sbss
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f6c:	e002      	b.n	8003f74 <LoopFillZerobss>

08003f6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f70:	f842 3b04 	str.w	r3, [r2], #4

08003f74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <LoopForever+0x16>)
	cmp	r2, r3
 8003f76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f78:	d3f9      	bcc.n	8003f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f7a:	f7ff ff9f 	bl	8003ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f7e:	f000 f817 	bl	8003fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f82:	f7fe fe89 	bl	8002c98 <main>

08003f86 <LoopForever>:

LoopForever:
    b LoopForever
 8003f86:	e7fe      	b.n	8003f86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f88:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003f8c:	08004a10 	.word	0x08004a10
	ldr	r0, =_sdata
 8003f90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f94:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003f98:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003f9c:	20000160 	.word	0x20000160

08003fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fa0:	e7fe      	b.n	8003fa0 <ADC1_2_IRQHandler>
	...

08003fa4 <__errno>:
 8003fa4:	4b01      	ldr	r3, [pc, #4]	; (8003fac <__errno+0x8>)
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	2000000c 	.word	0x2000000c

08003fb0 <__libc_init_array>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	4e0d      	ldr	r6, [pc, #52]	; (8003fe8 <__libc_init_array+0x38>)
 8003fb4:	4c0d      	ldr	r4, [pc, #52]	; (8003fec <__libc_init_array+0x3c>)
 8003fb6:	1ba4      	subs	r4, r4, r6
 8003fb8:	10a4      	asrs	r4, r4, #2
 8003fba:	2500      	movs	r5, #0
 8003fbc:	42a5      	cmp	r5, r4
 8003fbe:	d109      	bne.n	8003fd4 <__libc_init_array+0x24>
 8003fc0:	4e0b      	ldr	r6, [pc, #44]	; (8003ff0 <__libc_init_array+0x40>)
 8003fc2:	4c0c      	ldr	r4, [pc, #48]	; (8003ff4 <__libc_init_array+0x44>)
 8003fc4:	f000 fc26 	bl	8004814 <_init>
 8003fc8:	1ba4      	subs	r4, r4, r6
 8003fca:	10a4      	asrs	r4, r4, #2
 8003fcc:	2500      	movs	r5, #0
 8003fce:	42a5      	cmp	r5, r4
 8003fd0:	d105      	bne.n	8003fde <__libc_init_array+0x2e>
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fd8:	4798      	blx	r3
 8003fda:	3501      	adds	r5, #1
 8003fdc:	e7ee      	b.n	8003fbc <__libc_init_array+0xc>
 8003fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe2:	4798      	blx	r3
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	e7f2      	b.n	8003fce <__libc_init_array+0x1e>
 8003fe8:	08004a08 	.word	0x08004a08
 8003fec:	08004a08 	.word	0x08004a08
 8003ff0:	08004a08 	.word	0x08004a08
 8003ff4:	08004a0c 	.word	0x08004a0c

08003ff8 <memset>:
 8003ff8:	4402      	add	r2, r0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <siprintf>:
 8004008:	b40e      	push	{r1, r2, r3}
 800400a:	b500      	push	{lr}
 800400c:	b09c      	sub	sp, #112	; 0x70
 800400e:	ab1d      	add	r3, sp, #116	; 0x74
 8004010:	9002      	str	r0, [sp, #8]
 8004012:	9006      	str	r0, [sp, #24]
 8004014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004018:	4809      	ldr	r0, [pc, #36]	; (8004040 <siprintf+0x38>)
 800401a:	9107      	str	r1, [sp, #28]
 800401c:	9104      	str	r1, [sp, #16]
 800401e:	4909      	ldr	r1, [pc, #36]	; (8004044 <siprintf+0x3c>)
 8004020:	f853 2b04 	ldr.w	r2, [r3], #4
 8004024:	9105      	str	r1, [sp, #20]
 8004026:	6800      	ldr	r0, [r0, #0]
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	a902      	add	r1, sp, #8
 800402c:	f000 f866 	bl	80040fc <_svfiprintf_r>
 8004030:	9b02      	ldr	r3, [sp, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	b01c      	add	sp, #112	; 0x70
 8004038:	f85d eb04 	ldr.w	lr, [sp], #4
 800403c:	b003      	add	sp, #12
 800403e:	4770      	bx	lr
 8004040:	2000000c 	.word	0x2000000c
 8004044:	ffff0208 	.word	0xffff0208

08004048 <__ssputs_r>:
 8004048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	688e      	ldr	r6, [r1, #8]
 800404e:	429e      	cmp	r6, r3
 8004050:	4682      	mov	sl, r0
 8004052:	460c      	mov	r4, r1
 8004054:	4690      	mov	r8, r2
 8004056:	4699      	mov	r9, r3
 8004058:	d837      	bhi.n	80040ca <__ssputs_r+0x82>
 800405a:	898a      	ldrh	r2, [r1, #12]
 800405c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004060:	d031      	beq.n	80040c6 <__ssputs_r+0x7e>
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	6909      	ldr	r1, [r1, #16]
 8004066:	1a6f      	subs	r7, r5, r1
 8004068:	6965      	ldr	r5, [r4, #20]
 800406a:	2302      	movs	r3, #2
 800406c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004070:	fb95 f5f3 	sdiv	r5, r5, r3
 8004074:	f109 0301 	add.w	r3, r9, #1
 8004078:	443b      	add	r3, r7
 800407a:	429d      	cmp	r5, r3
 800407c:	bf38      	it	cc
 800407e:	461d      	movcc	r5, r3
 8004080:	0553      	lsls	r3, r2, #21
 8004082:	d530      	bpl.n	80040e6 <__ssputs_r+0x9e>
 8004084:	4629      	mov	r1, r5
 8004086:	f000 fb2b 	bl	80046e0 <_malloc_r>
 800408a:	4606      	mov	r6, r0
 800408c:	b950      	cbnz	r0, 80040a4 <__ssputs_r+0x5c>
 800408e:	230c      	movs	r3, #12
 8004090:	f8ca 3000 	str.w	r3, [sl]
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a4:	463a      	mov	r2, r7
 80040a6:	6921      	ldr	r1, [r4, #16]
 80040a8:	f000 faa8 	bl	80045fc <memcpy>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	6126      	str	r6, [r4, #16]
 80040ba:	6165      	str	r5, [r4, #20]
 80040bc:	443e      	add	r6, r7
 80040be:	1bed      	subs	r5, r5, r7
 80040c0:	6026      	str	r6, [r4, #0]
 80040c2:	60a5      	str	r5, [r4, #8]
 80040c4:	464e      	mov	r6, r9
 80040c6:	454e      	cmp	r6, r9
 80040c8:	d900      	bls.n	80040cc <__ssputs_r+0x84>
 80040ca:	464e      	mov	r6, r9
 80040cc:	4632      	mov	r2, r6
 80040ce:	4641      	mov	r1, r8
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	f000 fa9e 	bl	8004612 <memmove>
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	1b9b      	subs	r3, r3, r6
 80040da:	60a3      	str	r3, [r4, #8]
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	441e      	add	r6, r3
 80040e0:	6026      	str	r6, [r4, #0]
 80040e2:	2000      	movs	r0, #0
 80040e4:	e7dc      	b.n	80040a0 <__ssputs_r+0x58>
 80040e6:	462a      	mov	r2, r5
 80040e8:	f000 fb54 	bl	8004794 <_realloc_r>
 80040ec:	4606      	mov	r6, r0
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d1e2      	bne.n	80040b8 <__ssputs_r+0x70>
 80040f2:	6921      	ldr	r1, [r4, #16]
 80040f4:	4650      	mov	r0, sl
 80040f6:	f000 faa5 	bl	8004644 <_free_r>
 80040fa:	e7c8      	b.n	800408e <__ssputs_r+0x46>

080040fc <_svfiprintf_r>:
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004100:	461d      	mov	r5, r3
 8004102:	898b      	ldrh	r3, [r1, #12]
 8004104:	061f      	lsls	r7, r3, #24
 8004106:	b09d      	sub	sp, #116	; 0x74
 8004108:	4680      	mov	r8, r0
 800410a:	460c      	mov	r4, r1
 800410c:	4616      	mov	r6, r2
 800410e:	d50f      	bpl.n	8004130 <_svfiprintf_r+0x34>
 8004110:	690b      	ldr	r3, [r1, #16]
 8004112:	b96b      	cbnz	r3, 8004130 <_svfiprintf_r+0x34>
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	f000 fae3 	bl	80046e0 <_malloc_r>
 800411a:	6020      	str	r0, [r4, #0]
 800411c:	6120      	str	r0, [r4, #16]
 800411e:	b928      	cbnz	r0, 800412c <_svfiprintf_r+0x30>
 8004120:	230c      	movs	r3, #12
 8004122:	f8c8 3000 	str.w	r3, [r8]
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	e0c8      	b.n	80042be <_svfiprintf_r+0x1c2>
 800412c:	2340      	movs	r3, #64	; 0x40
 800412e:	6163      	str	r3, [r4, #20]
 8004130:	2300      	movs	r3, #0
 8004132:	9309      	str	r3, [sp, #36]	; 0x24
 8004134:	2320      	movs	r3, #32
 8004136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800413a:	2330      	movs	r3, #48	; 0x30
 800413c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004140:	9503      	str	r5, [sp, #12]
 8004142:	f04f 0b01 	mov.w	fp, #1
 8004146:	4637      	mov	r7, r6
 8004148:	463d      	mov	r5, r7
 800414a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800414e:	b10b      	cbz	r3, 8004154 <_svfiprintf_r+0x58>
 8004150:	2b25      	cmp	r3, #37	; 0x25
 8004152:	d13e      	bne.n	80041d2 <_svfiprintf_r+0xd6>
 8004154:	ebb7 0a06 	subs.w	sl, r7, r6
 8004158:	d00b      	beq.n	8004172 <_svfiprintf_r+0x76>
 800415a:	4653      	mov	r3, sl
 800415c:	4632      	mov	r2, r6
 800415e:	4621      	mov	r1, r4
 8004160:	4640      	mov	r0, r8
 8004162:	f7ff ff71 	bl	8004048 <__ssputs_r>
 8004166:	3001      	adds	r0, #1
 8004168:	f000 80a4 	beq.w	80042b4 <_svfiprintf_r+0x1b8>
 800416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416e:	4453      	add	r3, sl
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	783b      	ldrb	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 809d 	beq.w	80042b4 <_svfiprintf_r+0x1b8>
 800417a:	2300      	movs	r3, #0
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004184:	9304      	str	r3, [sp, #16]
 8004186:	9307      	str	r3, [sp, #28]
 8004188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800418c:	931a      	str	r3, [sp, #104]	; 0x68
 800418e:	462f      	mov	r7, r5
 8004190:	2205      	movs	r2, #5
 8004192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004196:	4850      	ldr	r0, [pc, #320]	; (80042d8 <_svfiprintf_r+0x1dc>)
 8004198:	f7fc f822 	bl	80001e0 <memchr>
 800419c:	9b04      	ldr	r3, [sp, #16]
 800419e:	b9d0      	cbnz	r0, 80041d6 <_svfiprintf_r+0xda>
 80041a0:	06d9      	lsls	r1, r3, #27
 80041a2:	bf44      	itt	mi
 80041a4:	2220      	movmi	r2, #32
 80041a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041aa:	071a      	lsls	r2, r3, #28
 80041ac:	bf44      	itt	mi
 80041ae:	222b      	movmi	r2, #43	; 0x2b
 80041b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041b4:	782a      	ldrb	r2, [r5, #0]
 80041b6:	2a2a      	cmp	r2, #42	; 0x2a
 80041b8:	d015      	beq.n	80041e6 <_svfiprintf_r+0xea>
 80041ba:	9a07      	ldr	r2, [sp, #28]
 80041bc:	462f      	mov	r7, r5
 80041be:	2000      	movs	r0, #0
 80041c0:	250a      	movs	r5, #10
 80041c2:	4639      	mov	r1, r7
 80041c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c8:	3b30      	subs	r3, #48	; 0x30
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	d94d      	bls.n	800426a <_svfiprintf_r+0x16e>
 80041ce:	b1b8      	cbz	r0, 8004200 <_svfiprintf_r+0x104>
 80041d0:	e00f      	b.n	80041f2 <_svfiprintf_r+0xf6>
 80041d2:	462f      	mov	r7, r5
 80041d4:	e7b8      	b.n	8004148 <_svfiprintf_r+0x4c>
 80041d6:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <_svfiprintf_r+0x1dc>)
 80041d8:	1a80      	subs	r0, r0, r2
 80041da:	fa0b f000 	lsl.w	r0, fp, r0
 80041de:	4318      	orrs	r0, r3
 80041e0:	9004      	str	r0, [sp, #16]
 80041e2:	463d      	mov	r5, r7
 80041e4:	e7d3      	b.n	800418e <_svfiprintf_r+0x92>
 80041e6:	9a03      	ldr	r2, [sp, #12]
 80041e8:	1d11      	adds	r1, r2, #4
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	9103      	str	r1, [sp, #12]
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	db01      	blt.n	80041f6 <_svfiprintf_r+0xfa>
 80041f2:	9207      	str	r2, [sp, #28]
 80041f4:	e004      	b.n	8004200 <_svfiprintf_r+0x104>
 80041f6:	4252      	negs	r2, r2
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	9207      	str	r2, [sp, #28]
 80041fe:	9304      	str	r3, [sp, #16]
 8004200:	783b      	ldrb	r3, [r7, #0]
 8004202:	2b2e      	cmp	r3, #46	; 0x2e
 8004204:	d10c      	bne.n	8004220 <_svfiprintf_r+0x124>
 8004206:	787b      	ldrb	r3, [r7, #1]
 8004208:	2b2a      	cmp	r3, #42	; 0x2a
 800420a:	d133      	bne.n	8004274 <_svfiprintf_r+0x178>
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	1d1a      	adds	r2, r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	9203      	str	r2, [sp, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	bfb8      	it	lt
 8004218:	f04f 33ff 	movlt.w	r3, #4294967295
 800421c:	3702      	adds	r7, #2
 800421e:	9305      	str	r3, [sp, #20]
 8004220:	4d2e      	ldr	r5, [pc, #184]	; (80042dc <_svfiprintf_r+0x1e0>)
 8004222:	7839      	ldrb	r1, [r7, #0]
 8004224:	2203      	movs	r2, #3
 8004226:	4628      	mov	r0, r5
 8004228:	f7fb ffda 	bl	80001e0 <memchr>
 800422c:	b138      	cbz	r0, 800423e <_svfiprintf_r+0x142>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	1b40      	subs	r0, r0, r5
 8004232:	fa03 f000 	lsl.w	r0, r3, r0
 8004236:	9b04      	ldr	r3, [sp, #16]
 8004238:	4303      	orrs	r3, r0
 800423a:	3701      	adds	r7, #1
 800423c:	9304      	str	r3, [sp, #16]
 800423e:	7839      	ldrb	r1, [r7, #0]
 8004240:	4827      	ldr	r0, [pc, #156]	; (80042e0 <_svfiprintf_r+0x1e4>)
 8004242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004246:	2206      	movs	r2, #6
 8004248:	1c7e      	adds	r6, r7, #1
 800424a:	f7fb ffc9 	bl	80001e0 <memchr>
 800424e:	2800      	cmp	r0, #0
 8004250:	d038      	beq.n	80042c4 <_svfiprintf_r+0x1c8>
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <_svfiprintf_r+0x1e8>)
 8004254:	bb13      	cbnz	r3, 800429c <_svfiprintf_r+0x1a0>
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	3307      	adds	r3, #7
 800425a:	f023 0307 	bic.w	r3, r3, #7
 800425e:	3308      	adds	r3, #8
 8004260:	9303      	str	r3, [sp, #12]
 8004262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004264:	444b      	add	r3, r9
 8004266:	9309      	str	r3, [sp, #36]	; 0x24
 8004268:	e76d      	b.n	8004146 <_svfiprintf_r+0x4a>
 800426a:	fb05 3202 	mla	r2, r5, r2, r3
 800426e:	2001      	movs	r0, #1
 8004270:	460f      	mov	r7, r1
 8004272:	e7a6      	b.n	80041c2 <_svfiprintf_r+0xc6>
 8004274:	2300      	movs	r3, #0
 8004276:	3701      	adds	r7, #1
 8004278:	9305      	str	r3, [sp, #20]
 800427a:	4619      	mov	r1, r3
 800427c:	250a      	movs	r5, #10
 800427e:	4638      	mov	r0, r7
 8004280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004284:	3a30      	subs	r2, #48	; 0x30
 8004286:	2a09      	cmp	r2, #9
 8004288:	d903      	bls.n	8004292 <_svfiprintf_r+0x196>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0c8      	beq.n	8004220 <_svfiprintf_r+0x124>
 800428e:	9105      	str	r1, [sp, #20]
 8004290:	e7c6      	b.n	8004220 <_svfiprintf_r+0x124>
 8004292:	fb05 2101 	mla	r1, r5, r1, r2
 8004296:	2301      	movs	r3, #1
 8004298:	4607      	mov	r7, r0
 800429a:	e7f0      	b.n	800427e <_svfiprintf_r+0x182>
 800429c:	ab03      	add	r3, sp, #12
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	4622      	mov	r2, r4
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <_svfiprintf_r+0x1ec>)
 80042a4:	a904      	add	r1, sp, #16
 80042a6:	4640      	mov	r0, r8
 80042a8:	f3af 8000 	nop.w
 80042ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80042b0:	4681      	mov	r9, r0
 80042b2:	d1d6      	bne.n	8004262 <_svfiprintf_r+0x166>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	065b      	lsls	r3, r3, #25
 80042b8:	f53f af35 	bmi.w	8004126 <_svfiprintf_r+0x2a>
 80042bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042be:	b01d      	add	sp, #116	; 0x74
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c4:	ab03      	add	r3, sp, #12
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4622      	mov	r2, r4
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <_svfiprintf_r+0x1ec>)
 80042cc:	a904      	add	r1, sp, #16
 80042ce:	4640      	mov	r0, r8
 80042d0:	f000 f882 	bl	80043d8 <_printf_i>
 80042d4:	e7ea      	b.n	80042ac <_svfiprintf_r+0x1b0>
 80042d6:	bf00      	nop
 80042d8:	080049d4 	.word	0x080049d4
 80042dc:	080049da 	.word	0x080049da
 80042e0:	080049de 	.word	0x080049de
 80042e4:	00000000 	.word	0x00000000
 80042e8:	08004049 	.word	0x08004049

080042ec <_printf_common>:
 80042ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	4691      	mov	r9, r2
 80042f2:	461f      	mov	r7, r3
 80042f4:	688a      	ldr	r2, [r1, #8]
 80042f6:	690b      	ldr	r3, [r1, #16]
 80042f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bfb8      	it	lt
 8004300:	4613      	movlt	r3, r2
 8004302:	f8c9 3000 	str.w	r3, [r9]
 8004306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800430a:	4606      	mov	r6, r0
 800430c:	460c      	mov	r4, r1
 800430e:	b112      	cbz	r2, 8004316 <_printf_common+0x2a>
 8004310:	3301      	adds	r3, #1
 8004312:	f8c9 3000 	str.w	r3, [r9]
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	0699      	lsls	r1, r3, #26
 800431a:	bf42      	ittt	mi
 800431c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004320:	3302      	addmi	r3, #2
 8004322:	f8c9 3000 	strmi.w	r3, [r9]
 8004326:	6825      	ldr	r5, [r4, #0]
 8004328:	f015 0506 	ands.w	r5, r5, #6
 800432c:	d107      	bne.n	800433e <_printf_common+0x52>
 800432e:	f104 0a19 	add.w	sl, r4, #25
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	f8d9 2000 	ldr.w	r2, [r9]
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	42ab      	cmp	r3, r5
 800433c:	dc28      	bgt.n	8004390 <_printf_common+0xa4>
 800433e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	3300      	adds	r3, #0
 8004346:	bf18      	it	ne
 8004348:	2301      	movne	r3, #1
 800434a:	0692      	lsls	r2, r2, #26
 800434c:	d42d      	bmi.n	80043aa <_printf_common+0xbe>
 800434e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004352:	4639      	mov	r1, r7
 8004354:	4630      	mov	r0, r6
 8004356:	47c0      	blx	r8
 8004358:	3001      	adds	r0, #1
 800435a:	d020      	beq.n	800439e <_printf_common+0xb2>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	68e5      	ldr	r5, [r4, #12]
 8004360:	f8d9 2000 	ldr.w	r2, [r9]
 8004364:	f003 0306 	and.w	r3, r3, #6
 8004368:	2b04      	cmp	r3, #4
 800436a:	bf08      	it	eq
 800436c:	1aad      	subeq	r5, r5, r2
 800436e:	68a3      	ldr	r3, [r4, #8]
 8004370:	6922      	ldr	r2, [r4, #16]
 8004372:	bf0c      	ite	eq
 8004374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004378:	2500      	movne	r5, #0
 800437a:	4293      	cmp	r3, r2
 800437c:	bfc4      	itt	gt
 800437e:	1a9b      	subgt	r3, r3, r2
 8004380:	18ed      	addgt	r5, r5, r3
 8004382:	f04f 0900 	mov.w	r9, #0
 8004386:	341a      	adds	r4, #26
 8004388:	454d      	cmp	r5, r9
 800438a:	d11a      	bne.n	80043c2 <_printf_common+0xd6>
 800438c:	2000      	movs	r0, #0
 800438e:	e008      	b.n	80043a2 <_printf_common+0xb6>
 8004390:	2301      	movs	r3, #1
 8004392:	4652      	mov	r2, sl
 8004394:	4639      	mov	r1, r7
 8004396:	4630      	mov	r0, r6
 8004398:	47c0      	blx	r8
 800439a:	3001      	adds	r0, #1
 800439c:	d103      	bne.n	80043a6 <_printf_common+0xba>
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	3501      	adds	r5, #1
 80043a8:	e7c3      	b.n	8004332 <_printf_common+0x46>
 80043aa:	18e1      	adds	r1, r4, r3
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	2030      	movs	r0, #48	; 0x30
 80043b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043b4:	4422      	add	r2, r4
 80043b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043be:	3302      	adds	r3, #2
 80043c0:	e7c5      	b.n	800434e <_printf_common+0x62>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4622      	mov	r2, r4
 80043c6:	4639      	mov	r1, r7
 80043c8:	4630      	mov	r0, r6
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0e6      	beq.n	800439e <_printf_common+0xb2>
 80043d0:	f109 0901 	add.w	r9, r9, #1
 80043d4:	e7d8      	b.n	8004388 <_printf_common+0x9c>
	...

080043d8 <_printf_i>:
 80043d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043e0:	460c      	mov	r4, r1
 80043e2:	7e09      	ldrb	r1, [r1, #24]
 80043e4:	b085      	sub	sp, #20
 80043e6:	296e      	cmp	r1, #110	; 0x6e
 80043e8:	4617      	mov	r7, r2
 80043ea:	4606      	mov	r6, r0
 80043ec:	4698      	mov	r8, r3
 80043ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043f0:	f000 80b3 	beq.w	800455a <_printf_i+0x182>
 80043f4:	d822      	bhi.n	800443c <_printf_i+0x64>
 80043f6:	2963      	cmp	r1, #99	; 0x63
 80043f8:	d036      	beq.n	8004468 <_printf_i+0x90>
 80043fa:	d80a      	bhi.n	8004412 <_printf_i+0x3a>
 80043fc:	2900      	cmp	r1, #0
 80043fe:	f000 80b9 	beq.w	8004574 <_printf_i+0x19c>
 8004402:	2958      	cmp	r1, #88	; 0x58
 8004404:	f000 8083 	beq.w	800450e <_printf_i+0x136>
 8004408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800440c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004410:	e032      	b.n	8004478 <_printf_i+0xa0>
 8004412:	2964      	cmp	r1, #100	; 0x64
 8004414:	d001      	beq.n	800441a <_printf_i+0x42>
 8004416:	2969      	cmp	r1, #105	; 0x69
 8004418:	d1f6      	bne.n	8004408 <_printf_i+0x30>
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	0605      	lsls	r5, r0, #24
 8004420:	f103 0104 	add.w	r1, r3, #4
 8004424:	d52a      	bpl.n	800447c <_printf_i+0xa4>
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6011      	str	r1, [r2, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	da03      	bge.n	8004436 <_printf_i+0x5e>
 800442e:	222d      	movs	r2, #45	; 0x2d
 8004430:	425b      	negs	r3, r3
 8004432:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004436:	486f      	ldr	r0, [pc, #444]	; (80045f4 <_printf_i+0x21c>)
 8004438:	220a      	movs	r2, #10
 800443a:	e039      	b.n	80044b0 <_printf_i+0xd8>
 800443c:	2973      	cmp	r1, #115	; 0x73
 800443e:	f000 809d 	beq.w	800457c <_printf_i+0x1a4>
 8004442:	d808      	bhi.n	8004456 <_printf_i+0x7e>
 8004444:	296f      	cmp	r1, #111	; 0x6f
 8004446:	d020      	beq.n	800448a <_printf_i+0xb2>
 8004448:	2970      	cmp	r1, #112	; 0x70
 800444a:	d1dd      	bne.n	8004408 <_printf_i+0x30>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	e003      	b.n	800445e <_printf_i+0x86>
 8004456:	2975      	cmp	r1, #117	; 0x75
 8004458:	d017      	beq.n	800448a <_printf_i+0xb2>
 800445a:	2978      	cmp	r1, #120	; 0x78
 800445c:	d1d4      	bne.n	8004408 <_printf_i+0x30>
 800445e:	2378      	movs	r3, #120	; 0x78
 8004460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004464:	4864      	ldr	r0, [pc, #400]	; (80045f8 <_printf_i+0x220>)
 8004466:	e055      	b.n	8004514 <_printf_i+0x13c>
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	1d19      	adds	r1, r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6011      	str	r1, [r2, #0]
 8004470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004478:	2301      	movs	r3, #1
 800447a:	e08c      	b.n	8004596 <_printf_i+0x1be>
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6011      	str	r1, [r2, #0]
 8004480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004484:	bf18      	it	ne
 8004486:	b21b      	sxthne	r3, r3
 8004488:	e7cf      	b.n	800442a <_printf_i+0x52>
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	6825      	ldr	r5, [r4, #0]
 800448e:	1d18      	adds	r0, r3, #4
 8004490:	6010      	str	r0, [r2, #0]
 8004492:	0628      	lsls	r0, r5, #24
 8004494:	d501      	bpl.n	800449a <_printf_i+0xc2>
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	e002      	b.n	80044a0 <_printf_i+0xc8>
 800449a:	0668      	lsls	r0, r5, #25
 800449c:	d5fb      	bpl.n	8004496 <_printf_i+0xbe>
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	4854      	ldr	r0, [pc, #336]	; (80045f4 <_printf_i+0x21c>)
 80044a2:	296f      	cmp	r1, #111	; 0x6f
 80044a4:	bf14      	ite	ne
 80044a6:	220a      	movne	r2, #10
 80044a8:	2208      	moveq	r2, #8
 80044aa:	2100      	movs	r1, #0
 80044ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044b0:	6865      	ldr	r5, [r4, #4]
 80044b2:	60a5      	str	r5, [r4, #8]
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	f2c0 8095 	blt.w	80045e4 <_printf_i+0x20c>
 80044ba:	6821      	ldr	r1, [r4, #0]
 80044bc:	f021 0104 	bic.w	r1, r1, #4
 80044c0:	6021      	str	r1, [r4, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d13d      	bne.n	8004542 <_printf_i+0x16a>
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	f040 808e 	bne.w	80045e8 <_printf_i+0x210>
 80044cc:	4665      	mov	r5, ip
 80044ce:	2a08      	cmp	r2, #8
 80044d0:	d10b      	bne.n	80044ea <_printf_i+0x112>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	07db      	lsls	r3, r3, #31
 80044d6:	d508      	bpl.n	80044ea <_printf_i+0x112>
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	bfde      	ittt	le
 80044e0:	2330      	movle	r3, #48	; 0x30
 80044e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ea:	ebac 0305 	sub.w	r3, ip, r5
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	f8cd 8000 	str.w	r8, [sp]
 80044f4:	463b      	mov	r3, r7
 80044f6:	aa03      	add	r2, sp, #12
 80044f8:	4621      	mov	r1, r4
 80044fa:	4630      	mov	r0, r6
 80044fc:	f7ff fef6 	bl	80042ec <_printf_common>
 8004500:	3001      	adds	r0, #1
 8004502:	d14d      	bne.n	80045a0 <_printf_i+0x1c8>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	b005      	add	sp, #20
 800450a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800450e:	4839      	ldr	r0, [pc, #228]	; (80045f4 <_printf_i+0x21c>)
 8004510:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	6821      	ldr	r1, [r4, #0]
 8004518:	1d1d      	adds	r5, r3, #4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6015      	str	r5, [r2, #0]
 800451e:	060a      	lsls	r2, r1, #24
 8004520:	d50b      	bpl.n	800453a <_printf_i+0x162>
 8004522:	07ca      	lsls	r2, r1, #31
 8004524:	bf44      	itt	mi
 8004526:	f041 0120 	orrmi.w	r1, r1, #32
 800452a:	6021      	strmi	r1, [r4, #0]
 800452c:	b91b      	cbnz	r3, 8004536 <_printf_i+0x15e>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	f022 0220 	bic.w	r2, r2, #32
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	2210      	movs	r2, #16
 8004538:	e7b7      	b.n	80044aa <_printf_i+0xd2>
 800453a:	064d      	lsls	r5, r1, #25
 800453c:	bf48      	it	mi
 800453e:	b29b      	uxthmi	r3, r3
 8004540:	e7ef      	b.n	8004522 <_printf_i+0x14a>
 8004542:	4665      	mov	r5, ip
 8004544:	fbb3 f1f2 	udiv	r1, r3, r2
 8004548:	fb02 3311 	mls	r3, r2, r1, r3
 800454c:	5cc3      	ldrb	r3, [r0, r3]
 800454e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004552:	460b      	mov	r3, r1
 8004554:	2900      	cmp	r1, #0
 8004556:	d1f5      	bne.n	8004544 <_printf_i+0x16c>
 8004558:	e7b9      	b.n	80044ce <_printf_i+0xf6>
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	6825      	ldr	r5, [r4, #0]
 800455e:	6961      	ldr	r1, [r4, #20]
 8004560:	1d18      	adds	r0, r3, #4
 8004562:	6010      	str	r0, [r2, #0]
 8004564:	0628      	lsls	r0, r5, #24
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	d501      	bpl.n	800456e <_printf_i+0x196>
 800456a:	6019      	str	r1, [r3, #0]
 800456c:	e002      	b.n	8004574 <_printf_i+0x19c>
 800456e:	066a      	lsls	r2, r5, #25
 8004570:	d5fb      	bpl.n	800456a <_printf_i+0x192>
 8004572:	8019      	strh	r1, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	4665      	mov	r5, ip
 800457a:	e7b9      	b.n	80044f0 <_printf_i+0x118>
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	1d19      	adds	r1, r3, #4
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	681d      	ldr	r5, [r3, #0]
 8004584:	6862      	ldr	r2, [r4, #4]
 8004586:	2100      	movs	r1, #0
 8004588:	4628      	mov	r0, r5
 800458a:	f7fb fe29 	bl	80001e0 <memchr>
 800458e:	b108      	cbz	r0, 8004594 <_printf_i+0x1bc>
 8004590:	1b40      	subs	r0, r0, r5
 8004592:	6060      	str	r0, [r4, #4]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	2300      	movs	r3, #0
 800459a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459e:	e7a7      	b.n	80044f0 <_printf_i+0x118>
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4639      	mov	r1, r7
 80045a6:	4630      	mov	r0, r6
 80045a8:	47c0      	blx	r8
 80045aa:	3001      	adds	r0, #1
 80045ac:	d0aa      	beq.n	8004504 <_printf_i+0x12c>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	079b      	lsls	r3, r3, #30
 80045b2:	d413      	bmi.n	80045dc <_printf_i+0x204>
 80045b4:	68e0      	ldr	r0, [r4, #12]
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	4298      	cmp	r0, r3
 80045ba:	bfb8      	it	lt
 80045bc:	4618      	movlt	r0, r3
 80045be:	e7a3      	b.n	8004508 <_printf_i+0x130>
 80045c0:	2301      	movs	r3, #1
 80045c2:	464a      	mov	r2, r9
 80045c4:	4639      	mov	r1, r7
 80045c6:	4630      	mov	r0, r6
 80045c8:	47c0      	blx	r8
 80045ca:	3001      	adds	r0, #1
 80045cc:	d09a      	beq.n	8004504 <_printf_i+0x12c>
 80045ce:	3501      	adds	r5, #1
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	9a03      	ldr	r2, [sp, #12]
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	42ab      	cmp	r3, r5
 80045d8:	dcf2      	bgt.n	80045c0 <_printf_i+0x1e8>
 80045da:	e7eb      	b.n	80045b4 <_printf_i+0x1dc>
 80045dc:	2500      	movs	r5, #0
 80045de:	f104 0919 	add.w	r9, r4, #25
 80045e2:	e7f5      	b.n	80045d0 <_printf_i+0x1f8>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ac      	bne.n	8004542 <_printf_i+0x16a>
 80045e8:	7803      	ldrb	r3, [r0, #0]
 80045ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f2:	e76c      	b.n	80044ce <_printf_i+0xf6>
 80045f4:	080049e5 	.word	0x080049e5
 80045f8:	080049f6 	.word	0x080049f6

080045fc <memcpy>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	1e43      	subs	r3, r0, #1
 8004600:	440a      	add	r2, r1
 8004602:	4291      	cmp	r1, r2
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	bd10      	pop	{r4, pc}
 8004608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004610:	e7f7      	b.n	8004602 <memcpy+0x6>

08004612 <memmove>:
 8004612:	4288      	cmp	r0, r1
 8004614:	b510      	push	{r4, lr}
 8004616:	eb01 0302 	add.w	r3, r1, r2
 800461a:	d807      	bhi.n	800462c <memmove+0x1a>
 800461c:	1e42      	subs	r2, r0, #1
 800461e:	4299      	cmp	r1, r3
 8004620:	d00a      	beq.n	8004638 <memmove+0x26>
 8004622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004626:	f802 4f01 	strb.w	r4, [r2, #1]!
 800462a:	e7f8      	b.n	800461e <memmove+0xc>
 800462c:	4283      	cmp	r3, r0
 800462e:	d9f5      	bls.n	800461c <memmove+0xa>
 8004630:	1881      	adds	r1, r0, r2
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	42d3      	cmn	r3, r2
 8004636:	d100      	bne.n	800463a <memmove+0x28>
 8004638:	bd10      	pop	{r4, pc}
 800463a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800463e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004642:	e7f7      	b.n	8004634 <memmove+0x22>

08004644 <_free_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4605      	mov	r5, r0
 8004648:	2900      	cmp	r1, #0
 800464a:	d045      	beq.n	80046d8 <_free_r+0x94>
 800464c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004650:	1f0c      	subs	r4, r1, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfb8      	it	lt
 8004656:	18e4      	addlt	r4, r4, r3
 8004658:	f000 f8d2 	bl	8004800 <__malloc_lock>
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <_free_r+0x98>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	4610      	mov	r0, r2
 8004662:	b933      	cbnz	r3, 8004672 <_free_r+0x2e>
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	6014      	str	r4, [r2, #0]
 8004668:	4628      	mov	r0, r5
 800466a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800466e:	f000 b8c8 	b.w	8004802 <__malloc_unlock>
 8004672:	42a3      	cmp	r3, r4
 8004674:	d90c      	bls.n	8004690 <_free_r+0x4c>
 8004676:	6821      	ldr	r1, [r4, #0]
 8004678:	1862      	adds	r2, r4, r1
 800467a:	4293      	cmp	r3, r2
 800467c:	bf04      	itt	eq
 800467e:	681a      	ldreq	r2, [r3, #0]
 8004680:	685b      	ldreq	r3, [r3, #4]
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	bf04      	itt	eq
 8004686:	1852      	addeq	r2, r2, r1
 8004688:	6022      	streq	r2, [r4, #0]
 800468a:	6004      	str	r4, [r0, #0]
 800468c:	e7ec      	b.n	8004668 <_free_r+0x24>
 800468e:	4613      	mov	r3, r2
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	b10a      	cbz	r2, 8004698 <_free_r+0x54>
 8004694:	42a2      	cmp	r2, r4
 8004696:	d9fa      	bls.n	800468e <_free_r+0x4a>
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	1858      	adds	r0, r3, r1
 800469c:	42a0      	cmp	r0, r4
 800469e:	d10b      	bne.n	80046b8 <_free_r+0x74>
 80046a0:	6820      	ldr	r0, [r4, #0]
 80046a2:	4401      	add	r1, r0
 80046a4:	1858      	adds	r0, r3, r1
 80046a6:	4282      	cmp	r2, r0
 80046a8:	6019      	str	r1, [r3, #0]
 80046aa:	d1dd      	bne.n	8004668 <_free_r+0x24>
 80046ac:	6810      	ldr	r0, [r2, #0]
 80046ae:	6852      	ldr	r2, [r2, #4]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	4401      	add	r1, r0
 80046b4:	6019      	str	r1, [r3, #0]
 80046b6:	e7d7      	b.n	8004668 <_free_r+0x24>
 80046b8:	d902      	bls.n	80046c0 <_free_r+0x7c>
 80046ba:	230c      	movs	r3, #12
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	e7d3      	b.n	8004668 <_free_r+0x24>
 80046c0:	6820      	ldr	r0, [r4, #0]
 80046c2:	1821      	adds	r1, r4, r0
 80046c4:	428a      	cmp	r2, r1
 80046c6:	bf04      	itt	eq
 80046c8:	6811      	ldreq	r1, [r2, #0]
 80046ca:	6852      	ldreq	r2, [r2, #4]
 80046cc:	6062      	str	r2, [r4, #4]
 80046ce:	bf04      	itt	eq
 80046d0:	1809      	addeq	r1, r1, r0
 80046d2:	6021      	streq	r1, [r4, #0]
 80046d4:	605c      	str	r4, [r3, #4]
 80046d6:	e7c7      	b.n	8004668 <_free_r+0x24>
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
 80046da:	bf00      	nop
 80046dc:	20000090 	.word	0x20000090

080046e0 <_malloc_r>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	1ccd      	adds	r5, r1, #3
 80046e4:	f025 0503 	bic.w	r5, r5, #3
 80046e8:	3508      	adds	r5, #8
 80046ea:	2d0c      	cmp	r5, #12
 80046ec:	bf38      	it	cc
 80046ee:	250c      	movcc	r5, #12
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	4606      	mov	r6, r0
 80046f4:	db01      	blt.n	80046fa <_malloc_r+0x1a>
 80046f6:	42a9      	cmp	r1, r5
 80046f8:	d903      	bls.n	8004702 <_malloc_r+0x22>
 80046fa:	230c      	movs	r3, #12
 80046fc:	6033      	str	r3, [r6, #0]
 80046fe:	2000      	movs	r0, #0
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	f000 f87d 	bl	8004800 <__malloc_lock>
 8004706:	4a21      	ldr	r2, [pc, #132]	; (800478c <_malloc_r+0xac>)
 8004708:	6814      	ldr	r4, [r2, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	b991      	cbnz	r1, 8004734 <_malloc_r+0x54>
 800470e:	4c20      	ldr	r4, [pc, #128]	; (8004790 <_malloc_r+0xb0>)
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	b91b      	cbnz	r3, 800471c <_malloc_r+0x3c>
 8004714:	4630      	mov	r0, r6
 8004716:	f000 f863 	bl	80047e0 <_sbrk_r>
 800471a:	6020      	str	r0, [r4, #0]
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f000 f85e 	bl	80047e0 <_sbrk_r>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d124      	bne.n	8004772 <_malloc_r+0x92>
 8004728:	230c      	movs	r3, #12
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	4630      	mov	r0, r6
 800472e:	f000 f868 	bl	8004802 <__malloc_unlock>
 8004732:	e7e4      	b.n	80046fe <_malloc_r+0x1e>
 8004734:	680b      	ldr	r3, [r1, #0]
 8004736:	1b5b      	subs	r3, r3, r5
 8004738:	d418      	bmi.n	800476c <_malloc_r+0x8c>
 800473a:	2b0b      	cmp	r3, #11
 800473c:	d90f      	bls.n	800475e <_malloc_r+0x7e>
 800473e:	600b      	str	r3, [r1, #0]
 8004740:	50cd      	str	r5, [r1, r3]
 8004742:	18cc      	adds	r4, r1, r3
 8004744:	4630      	mov	r0, r6
 8004746:	f000 f85c 	bl	8004802 <__malloc_unlock>
 800474a:	f104 000b 	add.w	r0, r4, #11
 800474e:	1d23      	adds	r3, r4, #4
 8004750:	f020 0007 	bic.w	r0, r0, #7
 8004754:	1ac3      	subs	r3, r0, r3
 8004756:	d0d3      	beq.n	8004700 <_malloc_r+0x20>
 8004758:	425a      	negs	r2, r3
 800475a:	50e2      	str	r2, [r4, r3]
 800475c:	e7d0      	b.n	8004700 <_malloc_r+0x20>
 800475e:	428c      	cmp	r4, r1
 8004760:	684b      	ldr	r3, [r1, #4]
 8004762:	bf16      	itet	ne
 8004764:	6063      	strne	r3, [r4, #4]
 8004766:	6013      	streq	r3, [r2, #0]
 8004768:	460c      	movne	r4, r1
 800476a:	e7eb      	b.n	8004744 <_malloc_r+0x64>
 800476c:	460c      	mov	r4, r1
 800476e:	6849      	ldr	r1, [r1, #4]
 8004770:	e7cc      	b.n	800470c <_malloc_r+0x2c>
 8004772:	1cc4      	adds	r4, r0, #3
 8004774:	f024 0403 	bic.w	r4, r4, #3
 8004778:	42a0      	cmp	r0, r4
 800477a:	d005      	beq.n	8004788 <_malloc_r+0xa8>
 800477c:	1a21      	subs	r1, r4, r0
 800477e:	4630      	mov	r0, r6
 8004780:	f000 f82e 	bl	80047e0 <_sbrk_r>
 8004784:	3001      	adds	r0, #1
 8004786:	d0cf      	beq.n	8004728 <_malloc_r+0x48>
 8004788:	6025      	str	r5, [r4, #0]
 800478a:	e7db      	b.n	8004744 <_malloc_r+0x64>
 800478c:	20000090 	.word	0x20000090
 8004790:	20000094 	.word	0x20000094

08004794 <_realloc_r>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	4607      	mov	r7, r0
 8004798:	4614      	mov	r4, r2
 800479a:	460e      	mov	r6, r1
 800479c:	b921      	cbnz	r1, 80047a8 <_realloc_r+0x14>
 800479e:	4611      	mov	r1, r2
 80047a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047a4:	f7ff bf9c 	b.w	80046e0 <_malloc_r>
 80047a8:	b922      	cbnz	r2, 80047b4 <_realloc_r+0x20>
 80047aa:	f7ff ff4b 	bl	8004644 <_free_r>
 80047ae:	4625      	mov	r5, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	f000 f826 	bl	8004804 <_malloc_usable_size_r>
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d20f      	bcs.n	80047dc <_realloc_r+0x48>
 80047bc:	4621      	mov	r1, r4
 80047be:	4638      	mov	r0, r7
 80047c0:	f7ff ff8e 	bl	80046e0 <_malloc_r>
 80047c4:	4605      	mov	r5, r0
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d0f2      	beq.n	80047b0 <_realloc_r+0x1c>
 80047ca:	4631      	mov	r1, r6
 80047cc:	4622      	mov	r2, r4
 80047ce:	f7ff ff15 	bl	80045fc <memcpy>
 80047d2:	4631      	mov	r1, r6
 80047d4:	4638      	mov	r0, r7
 80047d6:	f7ff ff35 	bl	8004644 <_free_r>
 80047da:	e7e9      	b.n	80047b0 <_realloc_r+0x1c>
 80047dc:	4635      	mov	r5, r6
 80047de:	e7e7      	b.n	80047b0 <_realloc_r+0x1c>

080047e0 <_sbrk_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4c06      	ldr	r4, [pc, #24]	; (80047fc <_sbrk_r+0x1c>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4605      	mov	r5, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	f7ff fb3a 	bl	8003e64 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_sbrk_r+0x1a>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_sbrk_r+0x1a>
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	2000015c 	.word	0x2000015c

08004800 <__malloc_lock>:
 8004800:	4770      	bx	lr

08004802 <__malloc_unlock>:
 8004802:	4770      	bx	lr

08004804 <_malloc_usable_size_r>:
 8004804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004808:	1f18      	subs	r0, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfbc      	itt	lt
 800480e:	580b      	ldrlt	r3, [r1, r0]
 8004810:	18c0      	addlt	r0, r0, r3
 8004812:	4770      	bx	lr

08004814 <_init>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr

08004820 <_fini>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr
