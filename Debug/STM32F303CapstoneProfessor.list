
STM32F303CapstoneProfessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab4  08008ab4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008ab4  08008ab4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ab4  08008ab4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  08008b2c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08008b2c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017336  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029e3  00000000  00000000  000373d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  00039dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec0  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c613  00000000  00000000  0003bc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db54  00000000  00000000  0005826b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c006  00000000  00000000  00065dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101dc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004598  00000000  00000000  00101e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a4 	.word	0x080082a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080082a4 	.word	0x080082a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f92f 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f005 ff86 	bl	80061ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f939 	bl	8000542 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f90f 	bl	800050a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000008 	.word	0x20000008
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20000184 	.word	0x20000184

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000184 	.word	0x20000184

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	3b04      	subs	r3, #4
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <NVIC_SetPriority+0x50>)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff8e 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff47 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800051c:	f7ff ff5c 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f7ff ff8e 	bl	8000448 <NVIC_EncodePriority>
 800052c:	4602      	mov	r2, r0
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff5d 	bl	80003f4 <NVIC_SetPriority>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffb0 	bl	80004b0 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000572:	e154      	b.n	800081e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8146 	beq.w	8000818 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0x40>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d123      	bne.n	80005e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3208      	adds	r2, #8
 80005de:	6939      	ldr	r1, [r7, #16]
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4313      	orrs	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00b      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062c:	2b11      	cmp	r3, #17
 800062e:	d003      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b12      	cmp	r3, #18
 8000636:	d130      	bne.n	800069a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2203      	movs	r2, #3
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066e:	2201      	movs	r2, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 0201 	and.w	r2, r3, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2203      	movs	r2, #3
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 80a0 	beq.w	8000818 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4b58      	ldr	r3, [pc, #352]	; (800083c <HAL_GPIO_Init+0x2e0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a57      	ldr	r2, [pc, #348]	; (800083c <HAL_GPIO_Init+0x2e0>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <HAL_GPIO_Init+0x2e0>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006f0:	4a53      	ldr	r2, [pc, #332]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800071a:	d019      	beq.n	8000750 <HAL_GPIO_Init+0x1f4>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a49      	ldr	r2, [pc, #292]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d013      	beq.n	800074c <HAL_GPIO_Init+0x1f0>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a48      	ldr	r2, [pc, #288]	; (8000848 <HAL_GPIO_Init+0x2ec>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d00d      	beq.n	8000748 <HAL_GPIO_Init+0x1ec>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a47      	ldr	r2, [pc, #284]	; (800084c <HAL_GPIO_Init+0x2f0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d007      	beq.n	8000744 <HAL_GPIO_Init+0x1e8>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a46      	ldr	r2, [pc, #280]	; (8000850 <HAL_GPIO_Init+0x2f4>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d101      	bne.n	8000740 <HAL_GPIO_Init+0x1e4>
 800073c:	2304      	movs	r3, #4
 800073e:	e008      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000740:	2305      	movs	r3, #5
 8000742:	e006      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000744:	2303      	movs	r3, #3
 8000746:	e004      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000748:	2302      	movs	r3, #2
 800074a:	e002      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <HAL_GPIO_Init+0x1f6>
 8000750:	2300      	movs	r3, #0
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	f002 0203 	and.w	r2, r2, #3
 8000758:	0092      	lsls	r2, r2, #2
 800075a:	4093      	lsls	r3, r2
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4313      	orrs	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000762:	4937      	ldr	r1, [pc, #220]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	3302      	adds	r3, #2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	43db      	mvns	r3, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000794:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	43db      	mvns	r3, r3
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	4013      	ands	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007be:	4a25      	ldr	r2, [pc, #148]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	43db      	mvns	r3, r3
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	43db      	mvns	r3, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4313      	orrs	r3, r2
 8000810:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <HAL_GPIO_Init+0x2f8>)
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	fa22 f303 	lsr.w	r3, r2, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	f47f aea3 	bne.w	8000574 <HAL_GPIO_Init+0x18>
  }
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000
 8000844:	48000400 	.word	0x48000400
 8000848:	48000800 	.word	0x48000800
 800084c:	48000c00 	.word	0x48000c00
 8000850:	48001000 	.word	0x48001000
 8000854:	40010400 	.word	0x40010400

08000858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691a      	ldr	r2, [r3, #16]
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	4013      	ands	r3, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e001      	b.n	800087a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	807b      	strh	r3, [r7, #2]
 8000894:	4613      	mov	r3, r2
 8000896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80008be:	af00      	add	r7, sp, #0
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f000 beda 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 816e 	beq.w	8000bbe <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008e2:	4bb5      	ldr	r3, [pc, #724]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d00c      	beq.n	8000908 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008ee:	4bb2      	ldr	r3, [pc, #712]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d15a      	bne.n	80009b0 <HAL_RCC_OscConfig+0xf8>
 80008fa:	4baf      	ldr	r3, [pc, #700]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000906:	d153      	bne.n	80009b0 <HAL_RCC_OscConfig+0xf8>
 8000908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800090c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000910:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000914:	fa93 f3a3 	rbit	r3, r3
 8000918:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800091c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	b2db      	uxtb	r3, r3
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b01      	cmp	r3, #1
 8000932:	d102      	bne.n	800093a <HAL_RCC_OscConfig+0x82>
 8000934:	4ba0      	ldr	r3, [pc, #640]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	e015      	b.n	8000966 <HAL_RCC_OscConfig+0xae>
 800093a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000942:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000946:	fa93 f3a3 	rbit	r3, r3
 800094a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800094e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000952:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000956:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800095a:	fa93 f3a3 	rbit	r3, r3
 800095e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000962:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800096e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000972:	fa92 f2a2 	rbit	r2, r2
 8000976:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800097a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	b252      	sxtb	r2, r2
 8000984:	f042 0220 	orr.w	r2, r2, #32
 8000988:	b252      	sxtb	r2, r2
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	f002 021f 	and.w	r2, r2, #31
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4013      	ands	r3, r2
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 810f 	beq.w	8000bbc <HAL_RCC_OscConfig+0x304>
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f040 8109 	bne.w	8000bbc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f000 be6b 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ba:	d106      	bne.n	80009ca <HAL_RCC_OscConfig+0x112>
 80009bc:	4b7e      	ldr	r3, [pc, #504]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a7d      	ldr	r2, [pc, #500]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e030      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10c      	bne.n	80009ee <HAL_RCC_OscConfig+0x136>
 80009d4:	4b78      	ldr	r3, [pc, #480]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a77      	ldr	r2, [pc, #476]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a74      	ldr	r2, [pc, #464]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	e01e      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009f8:	d10c      	bne.n	8000a14 <HAL_RCC_OscConfig+0x15c>
 80009fa:	4b6f      	ldr	r3, [pc, #444]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a6e      	ldr	r2, [pc, #440]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b6c      	ldr	r3, [pc, #432]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a6b      	ldr	r2, [pc, #428]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e00b      	b.n	8000a2c <HAL_RCC_OscConfig+0x174>
 8000a14:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a67      	ldr	r2, [pc, #412]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a64      	ldr	r2, [pc, #400]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a2c:	4b62      	ldr	r3, [pc, #392]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	f023 020f 	bic.w	r2, r3, #15
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	495f      	ldr	r1, [pc, #380]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d05a      	beq.n	8000b00 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4a:	f7ff fc73 	bl	8000334 <HAL_GetTick>
 8000a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a52:	e00a      	b.n	8000a6a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a54:	f7ff fc6e 	bl	8000334 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	2b64      	cmp	r3, #100	; 0x64
 8000a62:	d902      	bls.n	8000a6a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000a64:	2303      	movs	r3, #3
 8000a66:	f000 be0e 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a6e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a72:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000a76:	fa93 f3a3 	rbit	r3, r3
 8000a7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000a7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	095b      	lsrs	r3, r3, #5
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d102      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1e4>
 8000a96:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	e015      	b.n	8000ac8 <HAL_RCC_OscConfig+0x210>
 8000a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ab8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000abc:	fa93 f3a3 	rbit	r3, r3
 8000ac0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000acc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ad0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ad4:	fa92 f2a2 	rbit	r2, r2
 8000ad8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000adc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b252      	sxtb	r2, r2
 8000ae6:	f042 0220 	orr.w	r2, r2, #32
 8000aea:	b252      	sxtb	r2, r2
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	f002 021f 	and.w	r2, r2, #31
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0aa      	beq.n	8000a54 <HAL_RCC_OscConfig+0x19c>
 8000afe:	e05e      	b.n	8000bbe <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fc18 	bl	8000334 <HAL_GetTick>
 8000b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b08:	e00a      	b.n	8000b20 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fc13 	bl	8000334 <HAL_GetTick>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	; 0x64
 8000b18:	d902      	bls.n	8000b20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	f000 bdb3 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000b34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b38:	fab3 f383 	clz	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <HAL_RCC_OscConfig+0x29a>
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	e015      	b.n	8000b7e <HAL_RCC_OscConfig+0x2c6>
 8000b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000b5e:	fa93 f3a3 	rbit	r3, r3
 8000b62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000b6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_RCC_OscConfig+0x300>)
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b82:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000b8a:	fa92 f2a2 	rbit	r2, r2
 8000b8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000b92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	b252      	sxtb	r2, r2
 8000b9c:	f042 0220 	orr.w	r2, r2, #32
 8000ba0:	b252      	sxtb	r2, r2
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	f002 021f 	and.w	r2, r2, #31
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1aa      	bne.n	8000b0a <HAL_RCC_OscConfig+0x252>
 8000bb4:	e003      	b.n	8000bbe <HAL_RCC_OscConfig+0x306>
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8170 	beq.w	8000eae <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bce:	4bd0      	ldr	r3, [pc, #832]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00b      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bda:	4bcd      	ldr	r3, [pc, #820]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d16d      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
 8000be6:	4bca      	ldr	r3, [pc, #808]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d167      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x40a>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000bfc:	fa93 f3a3 	rbit	r3, r3
 8000c00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000c04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c08:	fab3 f383 	clz	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_RCC_OscConfig+0x36a>
 8000c1c:	4bbc      	ldr	r3, [pc, #752]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	e013      	b.n	8000c4a <HAL_RCC_OscConfig+0x392>
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000c3a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000c46:	4bb2      	ldr	r3, [pc, #712]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000c50:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000c54:	fa92 f2a2 	rbit	r2, r2
 8000c58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000c5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b252      	sxtb	r2, r2
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	b252      	sxtb	r2, r2
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f002 021f 	and.w	r2, r2, #31
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3d6>
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f000 bcfc 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8e:	4ba0      	ldr	r3, [pc, #640]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6959      	ldr	r1, [r3, #20]
 8000c9c:	23f8      	movs	r3, #248	; 0xf8
 8000c9e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000cae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	4995      	ldr	r1, [pc, #596]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc0:	e0f5      	b.n	8000eae <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 8085 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x520>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ce0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fb1c 	bl	8000334 <HAL_GetTick>
 8000cfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	e00a      	b.n	8000d18 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d02:	f7ff fb17 	bl	8000334 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d902      	bls.n	8000d18 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	f000 bcb7 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000d2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	095b      	lsrs	r3, r3, #5
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_RCC_OscConfig+0x490>
 8000d42:	4b73      	ldr	r3, [pc, #460]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	e013      	b.n	8000d70 <HAL_RCC_OscConfig+0x4b8>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000d60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000d6c:	4b68      	ldr	r3, [pc, #416]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	2202      	movs	r2, #2
 8000d72:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000d76:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d7a:	fa92 f2a2 	rbit	r2, r2
 8000d7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000d82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b252      	sxtb	r2, r2
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	b252      	sxtb	r2, r2
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0ae      	beq.n	8000d02 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6959      	ldr	r1, [r3, #20]
 8000db2:	23f8      	movs	r3, #248	; 0xf8
 8000db4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000dbc:	fa93 f3a3 	rbit	r3, r3
 8000dc0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000dc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000dc8:	fab3 f383 	clz	r3, r3
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	494f      	ldr	r1, [pc, #316]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	600b      	str	r3, [r1, #0]
 8000dd6:	e06a      	b.n	8000eae <HAL_RCC_OscConfig+0x5f6>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000dea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fa97 	bl	8000334 <HAL_GetTick>
 8000e06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fa92 	bl	8000334 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d902      	bls.n	8000e22 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f000 bc32 	b.w	8001686 <HAL_RCC_OscConfig+0xdce>
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000e2c:	fa93 f3a3 	rbit	r3, r3
 8000e30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000e34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <HAL_RCC_OscConfig+0x59a>
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	e013      	b.n	8000e7a <HAL_RCC_OscConfig+0x5c2>
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_RCC_OscConfig+0x658>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000e80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000e84:	fa92 f2a2 	rbit	r2, r2
 8000e88:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000e8c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	b252      	sxtb	r2, r2
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	b252      	sxtb	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1ae      	bne.n	8000e0c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80d8 	beq.w	800106e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d067      	beq.n	8000f98 <HAL_RCC_OscConfig+0x6e0>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_RCC_OscConfig+0x65c>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	461a      	mov	r2, r3
 8000eec:	2301      	movs	r3, #1
 8000eee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fa20 	bl	8000334 <HAL_GetTick>
 8000ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef8:	e00e      	b.n	8000f18 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efa:	f7ff fa1b 	bl	8000334 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d906      	bls.n	8000f18 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e3bb      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	10908120 	.word	0x10908120
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f34:	fa93 f2a3 	rbit	r2, r3
 8000f38:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f42:	2202      	movs	r2, #2
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	fa93 f2a3 	rbit	r2, r3
 8000f50:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	4ba5      	ldr	r3, [pc, #660]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8000f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f5e:	2102      	movs	r1, #2
 8000f60:	6019      	str	r1, [r3, #0]
 8000f62:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	fa93 f1a3 	rbit	r1, r3
 8000f6c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f70:	6019      	str	r1, [r3, #0]
  return(result);
 8000f72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0b1      	beq.n	8000efa <HAL_RCC_OscConfig+0x642>
 8000f96:	e06a      	b.n	800106e <HAL_RCC_OscConfig+0x7b6>
 8000f98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	fa93 f2a3 	rbit	r2, r3
 8000faa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fae:	601a      	str	r2, [r3, #0]
  return(result);
 8000fb0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <HAL_RCC_OscConfig+0x938>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff f9b4 	bl	8000334 <HAL_GetTick>
 8000fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	e009      	b.n	8000fe6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff f9af 	bl	8000334 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e34f      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8000fe6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	fa93 f2a3 	rbit	r2, r3
 8000ff8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	fa93 f2a3 	rbit	r2, r3
 8001010:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800101a:	2202      	movs	r2, #2
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	fa93 f2a3 	rbit	r2, r3
 8001028:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800102c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102e:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001032:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001036:	2102      	movs	r1, #2
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	fa93 f1a3 	rbit	r1, r3
 8001044:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001048:	6019      	str	r1, [r3, #0]
  return(result);
 800104a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b25b      	sxtb	r3, r3
 8001056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800105a:	b25b      	sxtb	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1b1      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8159 	beq.w	8001330 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b56      	ldr	r3, [pc, #344]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a55      	ldr	r2, [pc, #340]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b6:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11a      	bne.n	80010f8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ce:	f7ff f931 	bl	8000334 <HAL_GetTick>
 80010d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d6:	e009      	b.n	80010ec <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d8:	f7ff f92c 	bl	8000334 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b64      	cmp	r3, #100	; 0x64
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e2cc      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_OscConfig+0x93c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ef      	beq.n	80010d8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d106      	bne.n	8001110 <HAL_RCC_OscConfig+0x858>
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a39      	ldr	r2, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e02f      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x87c>
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x8a0>
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0x8b8>
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a23      	ldr	r2, [pc, #140]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 800116a:	f023 0304 	bic.w	r3, r3, #4
 800116e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06b      	beq.n	8001252 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff f8db 	bl	8000334 <HAL_GetTick>
 800117e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff f8d6 	bl	8000334 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e274      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 800119c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	fa93 f2a3 	rbit	r2, r3
 80011ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011b8:	2202      	movs	r2, #2
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	fa93 f2a3 	rbit	r2, r3
 80011c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011ca:	601a      	str	r2, [r3, #0]
  return(result);
 80011cc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d108      	bne.n	80011f8 <HAL_RCC_OscConfig+0x940>
 80011e6:	4b01      	ldr	r3, [pc, #4]	; (80011ec <HAL_RCC_OscConfig+0x934>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	e013      	b.n	8001214 <HAL_RCC_OscConfig+0x95c>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	10908120 	.word	0x10908120
 80011f4:	40007000 	.word	0x40007000
 80011f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011fc:	2202      	movs	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fa93 f2a3 	rbit	r2, r3
 800120a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4bbb      	ldr	r3, [pc, #748]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001218:	2102      	movs	r1, #2
 800121a:	6011      	str	r1, [r2, #0]
 800121c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	fa92 f1a2 	rbit	r1, r2
 8001226:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800122a:	6011      	str	r1, [r2, #0]
  return(result);
 800122c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	b252      	sxtb	r2, r2
 8001238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800123c:	b252      	sxtb	r2, r2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d099      	beq.n	8001184 <HAL_RCC_OscConfig+0x8cc>
 8001250:	e064      	b.n	800131c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff f86f 	bl	8000334 <HAL_GetTick>
 8001256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f7ff f86a 	bl	8000334 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e208      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2202      	movs	r2, #2
 800127a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa93 f2a3 	rbit	r2, r3
 8001286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	fa93 f2a3 	rbit	r2, r3
 800129e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012a2:	601a      	str	r2, [r3, #0]
  return(result);
 80012a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	095b      	lsrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0xa0c>
 80012be:	4b90      	ldr	r3, [pc, #576]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	e00d      	b.n	80012e0 <HAL_RCC_OscConfig+0xa28>
 80012c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c8:	2202      	movs	r2, #2
 80012ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	4b88      	ldr	r3, [pc, #544]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012e4:	2102      	movs	r1, #2
 80012e6:	6011      	str	r1, [r2, #0]
 80012e8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	fa92 f1a2 	rbit	r1, r2
 80012f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012f6:	6011      	str	r1, [r2, #0]
  return(result);
 80012f8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b252      	sxtb	r2, r2
 8001304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001308:	b252      	sxtb	r2, r2
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d19f      	bne.n	800125c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800131c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800132a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 81a4 	beq.w	8001684 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	f000 819b 	beq.w	8001680 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f040 8113 	bne.w	800157c <HAL_RCC_OscConfig+0xcc4>
 8001356:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800135a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800135e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	fa93 f2a3 	rbit	r2, r3
 800136a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800136e:	601a      	str	r2, [r3, #0]
  return(result);
 8001370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001374:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	2300      	movs	r3, #0
 8001388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7fe ffd3 	bl	8000334 <HAL_GetTick>
 800138e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e009      	b.n	80013a8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7fe ffce 	bl	8000334 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e16e      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80013a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fa93 f2a3 	rbit	r2, r3
 80013bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c0:	601a      	str	r2, [r3, #0]
  return(result);
 80013c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_RCC_OscConfig+0xb2a>
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	e01b      	b.n	800141a <HAL_RCC_OscConfig+0xb62>
 80013e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f2a3 	rbit	r2, r3
 80013f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800141e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001422:	6011      	str	r1, [r2, #0]
 8001424:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	fa92 f1a2 	rbit	r1, r2
 800142e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001432:	6011      	str	r1, [r2, #0]
  return(result);
 8001434:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	fab2 f282 	clz	r2, r2
 800143e:	b252      	sxtb	r2, r2
 8001440:	f042 0220 	orr.w	r2, r2, #32
 8001444:	b252      	sxtb	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f002 021f 	and.w	r2, r2, #31
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f202 	lsl.w	r2, r1, r2
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d19d      	bne.n	8001394 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	430b      	orrs	r3, r1
 800146e:	4924      	ldr	r1, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
 8001474:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800147c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800148c:	601a      	str	r2, [r3, #0]
  return(result);
 800148e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001492:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800149c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7fe ff44 	bl	8000334 <HAL_GetTick>
 80014ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b2:	f7fe ff3f 	bl	8000334 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0df      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80014c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014de:	601a      	str	r2, [r3, #0]
  return(result);
 80014e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d104      	bne.n	8001504 <HAL_RCC_OscConfig+0xc4c>
 80014fa:	4b01      	ldr	r3, [pc, #4]	; (8001500 <HAL_RCC_OscConfig+0xc48>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xc84>
 8001500:	40021000 	.word	0x40021000
 8001504:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001544:	6011      	str	r1, [r2, #0]
 8001546:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	fa92 f1a2 	rbit	r1, r2
 8001550:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001554:	6011      	str	r1, [r2, #0]
  return(result);
 8001556:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	fab2 f282 	clz	r2, r2
 8001560:	b252      	sxtb	r2, r2
 8001562:	f042 0220 	orr.w	r2, r2, #32
 8001566:	b252      	sxtb	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d09b      	beq.n	80014b2 <HAL_RCC_OscConfig+0xbfa>
 800157a:	e083      	b.n	8001684 <HAL_RCC_OscConfig+0xdcc>
 800157c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001594:	601a      	str	r2, [r3, #0]
  return(result);
 8001596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	461a      	mov	r2, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7fe fec0 	bl	8000334 <HAL_GetTick>
 80015b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	e009      	b.n	80015ce <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7fe febb 	bl	8000334 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e05b      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
 80015ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	601a      	str	r2, [r3, #0]
  return(result);
 80015e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	fab3 f383 	clz	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	095b      	lsrs	r3, r3, #5
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d102      	bne.n	8001608 <HAL_RCC_OscConfig+0xd50>
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	e01b      	b.n	8001640 <HAL_RCC_OscConfig+0xd88>
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f2a3 	rbit	r2, r3
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_RCC_OscConfig+0xdd8>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	f107 0214 	add.w	r2, r7, #20
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fa92 f1a2 	rbit	r1, r2
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	6011      	str	r1, [r2, #0]
  return(result);
 800165a:	f107 0210 	add.w	r2, r7, #16
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fab2 f282 	clz	r2, r2
 8001664:	b252      	sxtb	r2, r2
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	b252      	sxtb	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f002 021f 	and.w	r2, r2, #31
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f202 	lsl.w	r2, r1, r2
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d19d      	bne.n	80015ba <HAL_RCC_OscConfig+0xd02>
 800167e:	e001      	b.n	8001684 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b09e      	sub	sp, #120	; 0x78
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e164      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d910      	bls.n	80016dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0207 	bic.w	r2, r3, #7
 80016c2:	498d      	ldr	r1, [pc, #564]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e14c      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4981      	ldr	r1, [pc, #516]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80df 	beq.w	80018c6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d13d      	bne.n	800178c <HAL_RCC_ClockConfig+0xf8>
 8001710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001714:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800171e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_RCC_ClockConfig+0xa6>
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e00f      	b.n	800175a <HAL_RCC_ClockConfig+0xc6>
 800173a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	663b      	str	r3, [r7, #96]	; 0x60
 800174e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b252      	sxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b252      	sxtb	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d17d      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0f4      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d13d      	bne.n	8001810 <HAL_RCC_ClockConfig+0x17c>
 8001794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80017a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <HAL_RCC_ClockConfig+0x12a>
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e00f      	b.n	80017de <HAL_RCC_ClockConfig+0x14a>
 80017be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
 80017cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80017e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e6:	fa92 f2a2 	rbit	r2, r2
 80017ea:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b252      	sxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b252      	sxtb	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d13b      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b2      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
 8001810:	2302      	movs	r3, #2
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	b2db      	uxtb	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <HAL_RCC_ClockConfig+0x1a4>
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	e00d      	b.n	8001854 <HAL_RCC_ClockConfig+0x1c0>
 8001838:	2302      	movs	r3, #2
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2202      	movs	r2, #2
 8001856:	61ba      	str	r2, [r7, #24]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	fa92 f2a2 	rbit	r2, r2
 800185e:	617a      	str	r2, [r7, #20]
  return(result);
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	fab2 f282 	clz	r2, r2
 8001866:	b252      	sxtb	r2, r2
 8001868:	f042 0220 	orr.w	r2, r2, #32
 800186c:	b252      	sxtb	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 021f 	and.w	r2, r2, #31
 8001874:	2101      	movs	r1, #1
 8001876:	fa01 f202 	lsl.w	r2, r1, r2
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e078      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 0203 	bic.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	491a      	ldr	r1, [pc, #104]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001896:	f7fe fd4d 	bl	8000334 <HAL_GetTick>
 800189a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7fe fd49 	bl	8000334 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e060      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_ClockConfig+0x268>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 020c 	and.w	r2, r3, #12
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d1eb      	bne.n	800189e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d215      	bcs.n	8001900 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	4906      	ldr	r1, [pc, #24]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RCC_ClockConfig+0x264>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d006      	beq.n	8001900 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e03f      	b.n	8001976 <HAL_RCC_ClockConfig+0x2e2>
 80018f6:	bf00      	nop
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4919      	ldr	r1, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4911      	ldr	r1, [pc, #68]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800193e:	f000 f825 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001942:	4601      	mov	r1, r0
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x2ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800194c:	23f0      	movs	r3, #240	; 0xf0
 800194e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	60fb      	str	r3, [r7, #12]
  return(result);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_RCC_ClockConfig+0x2f0>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RCC_ClockConfig+0x2f4>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800196e:	2000      	movs	r0, #0
 8001970:	f7fe fc9c 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3778      	adds	r7, #120	; 0x78
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	08008a58 	.word	0x08008a58
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x30>
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x36>
 80019ba:	e03c      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019be:	623b      	str	r3, [r7, #32]
      break;
 80019c0:	e03c      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019cc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	607b      	str	r3, [r7, #4]
  return(result);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 020f 	and.w	r2, r3, #15
 80019ee:	230f      	movs	r3, #15
 80019f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e004      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	623b      	str	r3, [r7, #32]
      break;
 8001a34:	e002      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a38:	623b      	str	r3, [r7, #32]
      break;
 8001a3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	372c      	adds	r7, #44	; 0x2c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	007a1200 	.word	0x007a1200
 8001a54:	08008a34 	.word	0x08008a34
 8001a58:	08008a44 	.word	0x08008a44
 8001a5c:	003d0900 	.word	0x003d0900

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a7e:	f7ff ffef 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001a82:	4601      	mov	r1, r0
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a8c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a90:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	603b      	str	r3, [r7, #0]
  return(result);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08008a68 	.word	0x08008a68

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ac2:	f7ff ffcd 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ad0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ad4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	603b      	str	r3, [r7, #0]
  return(result);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08008a68 	.word	0x08008a68

08001b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b092      	sub	sp, #72	; 0x48
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80d6 	beq.w	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10e      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	61d3      	str	r3, [r2, #28]
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fbe5 	bl	8000334 <HAL_GetTick>
 8001b6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe fbe1 	bl	8000334 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	; 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e168      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8083 	beq.w	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d07b      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bfe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04c      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fb93 	bl	8000334 <HAL_GetTick>
 8001c0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe fb8f 	bl	8000334 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e114      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d108      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001c56:	4b01      	ldr	r3, [pc, #4]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	e00d      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	10908100 	.word	0x10908100
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2202      	movs	r2, #2
 8001c7a:	613a      	str	r2, [r7, #16]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	60fa      	str	r2, [r7, #12]
  return(result);
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b252      	sxtb	r2, r2
 8001c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c90:	b252      	sxtb	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0b6      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ca4:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	496a      	ldr	r1, [pc, #424]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a66      	ldr	r2, [pc, #408]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd6:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	495e      	ldr	r1, [pc, #376]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4956      	ldr	r1, [pc, #344]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d12:	4b52      	ldr	r3, [pc, #328]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	494f      	ldr	r1, [pc, #316]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f023 0210 	bic.w	r2, r3, #16
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4947      	ldr	r1, [pc, #284]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	4940      	ldr	r1, [pc, #256]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f023 0220 	bic.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4938      	ldr	r1, [pc, #224]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	4931      	ldr	r1, [pc, #196]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4929      	ldr	r1, [pc, #164]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	4922      	ldr	r1, [pc, #136]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	491a      	ldr	r1, [pc, #104]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d008      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	4913      	ldr	r1, [pc, #76]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	490b      	ldr	r1, [pc, #44]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4a:	4904      	ldr	r1, [pc, #16]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3748      	adds	r7, #72	; 0x48
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e084      	b.n	8001f7c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f004 f9b1 	bl	80061f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001eb2:	d902      	bls.n	8001eba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e002      	b.n	8001ec0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001ec8:	d007      	beq.n	8001eda <HAL_SPI_Init+0x7a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ed2:	d002      	beq.n	8001eda <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001eea:	d903      	bls.n	8001ef4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef2:	e002      	b.n	8001efa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f003 0204 	and.w	r2, r3, #4
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	ea42 0103 	orr.w	r1, r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_SPI_Transmit+0x26>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e13e      	b.n	8002228 <HAL_SPI_Transmit+0x2a4>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb2:	f7fe f9bf 	bl	8000334 <HAL_GetTick>
 8001fb6:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d002      	beq.n	8001fca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fc8:	e125      	b.n	8002216 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_SPI_Transmit+0x52>
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fda:	e11c      	b.n	8002216 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002026:	d107      	bne.n	8002038 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002036:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d007      	beq.n	8002056 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800205e:	d947      	bls.n	80020f0 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_SPI_Transmit+0xee>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d138      	bne.n	80020e4 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	881a      	ldrh	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3302      	adds	r3, #2
 8002080:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002090:	e028      	b.n	80020e4 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d10f      	bne.n	80020c0 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3302      	adds	r3, #2
 80020ae:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020be:	e011      	b.n	80020e4 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_SPI_Transmit+0x15a>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d00a      	beq.n	80020e4 <HAL_SPI_Transmit+0x160>
 80020ce:	f7fe f931 	bl	8000334 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d802      	bhi.n	80020e4 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020e2:	e098      	b.n	8002216 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1d1      	bne.n	8002092 <HAL_SPI_Transmit+0x10e>
 80020ee:	e070      	b.n	80021d2 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_SPI_Transmit+0x17e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d162      	bne.n	80021c8 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d90f      	bls.n	800212c <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3302      	adds	r3, #2
 800211a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b02      	subs	r3, #2
 8002124:	b29a      	uxth	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800212a:	e04d      	b.n	80021c8 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	320c      	adds	r2, #12
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800214a:	e03d      	b.n	80021c8 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b02      	cmp	r3, #2
 8002158:	d124      	bne.n	80021a4 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d90f      	bls.n	8002184 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3302      	adds	r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b02      	subs	r3, #2
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002182:	e021      	b.n	80021c8 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	320c      	adds	r2, #12
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021a2:	e011      	b.n	80021c8 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_SPI_Transmit+0x23e>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d00a      	beq.n	80021c8 <HAL_SPI_Transmit+0x244>
 80021b2:	f7fe f8bf 	bl	8000334 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d802      	bhi.n	80021c8 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021c6:	e026      	b.n	8002216 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1bc      	bne.n	800214c <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fc7d 	bl	8002ad6 <SPI_EndRxTxTransaction>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	77fb      	strb	r3, [r7, #31]
 8002212:	e000      	b.n	8002216 <HAL_SPI_Transmit+0x292>
  }

error:
 8002214:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002226:	7ffb      	ldrb	r3, [r7, #31]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3720      	adds	r7, #32
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002250:	d112      	bne.n	8002278 <HAL_SPI_Receive+0x48>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10e      	bne.n	8002278 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2204      	movs	r2, #4
 800225e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f901 	bl	8002476 <HAL_SPI_TransmitReceive>
 8002274:	4603      	mov	r3, r0
 8002276:	e0fa      	b.n	800246e <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_SPI_Receive+0x56>
 8002282:	2302      	movs	r3, #2
 8002284:	e0f3      	b.n	800246e <HAL_SPI_Receive+0x23e>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800228e:	f7fe f851 	bl	8000334 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 80022a0:	2302      	movs	r3, #2
 80022a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022a4:	e0da      	b.n	800245c <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_SPI_Receive+0x82>
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022b6:	e0d1      	b.n	800245c <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2204      	movs	r2, #4
 80022bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002302:	d908      	bls.n	8002316 <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	e007      	b.n	8002326 <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002324:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232e:	d107      	bne.n	8002340 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800233e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d007      	beq.n	800235e <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002366:	d860      	bhi.n	800242a <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002368:	e02c      	b.n	80023c4 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d113      	bne.n	80023a0 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800239e:	e011      	b.n	80023c4 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_SPI_Receive+0x18e>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d00a      	beq.n	80023c4 <HAL_SPI_Receive+0x194>
 80023ae:	f7fd ffc1 	bl	8000334 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d802      	bhi.n	80023c4 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023c2:	e04b      	b.n	800245c <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1cc      	bne.n	800236a <HAL_SPI_Receive+0x13a>
 80023d0:	e031      	b.n	8002436 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d112      	bne.n	8002406 <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	3302      	adds	r3, #2
 80023f0:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002404:	e011      	b.n	800242a <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_SPI_Receive+0x1f4>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d00a      	beq.n	800242a <HAL_SPI_Receive+0x1fa>
 8002414:	f7fd ff8e 	bl	8000334 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d802      	bhi.n	800242a <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002428:	e018      	b.n	800245c <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1cd      	bne.n	80023d2 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 faf3 	bl	8002a26 <SPI_EndRxTransaction>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
 8002458:	e000      	b.n	800245c <HAL_SPI_Receive+0x22c>
  }

error :
 800245a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800246c:	7dfb      	ldrb	r3, [r7, #23]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b08a      	sub	sp, #40	; 0x28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x32>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e1e2      	b.n	800286e <HAL_SPI_TransmitReceive+0x3f8>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b0:	f7fd ff40 	bl	8000334 <HAL_GetTick>
 80024b4:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d00e      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x74>
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d2:	d106      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x6c>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d003      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80024e8:	e1b7      	b.n	800285a <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x86>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x86>
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002502:	e1aa      	b.n	800285a <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b04      	cmp	r3, #4
 800250e:	d003      	beq.n	8002518 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2205      	movs	r2, #5
 8002514:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800255a:	d805      	bhi.n	8002568 <HAL_SPI_TransmitReceive+0xf2>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d908      	bls.n	800257a <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	e007      	b.n	800258a <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002588:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d007      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025b0:	d975      	bls.n	800269e <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x14e>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d160      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3302      	adds	r3, #2
 80025d2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e2:	e050      	b.n	8002686 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01c      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x1ae>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x1ae>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d110      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	3302      	adds	r3, #2
 8002610:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01a      	beq.n	8002666 <HAL_SPI_TransmitReceive+0x1f0>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d113      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	b29a      	uxth	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3302      	adds	r3, #2
 800264e:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002662:	2301      	movs	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d00b      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x210>
 800266e:	f7fd fe61 	bl	8000334 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267a:	429a      	cmp	r2, r3
 800267c:	d803      	bhi.n	8002686 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002684:	e0e9      	b.n	800285a <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1a9      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x16e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1a3      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x16e>
 800269c:	e0c9      	b.n	8002832 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x23c>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 80b3 	bne.w	8002818 <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d90f      	bls.n	80026dc <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	881a      	ldrh	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3302      	adds	r3, #2
 80026ca:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b02      	subs	r3, #2
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026da:	e09d      	b.n	8002818 <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	320c      	adds	r2, #12
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026fa:	e08d      	b.n	8002818 <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d031      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x2f0>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02c      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x2f0>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d125      	bne.n	8002766 <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d90f      	bls.n	8002744 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	881a      	ldrh	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3302      	adds	r3, #2
 8002732:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b02      	subs	r3, #2
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002742:	e00e      	b.n	8002762 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	60ba      	str	r2, [r7, #8]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	320c      	adds	r2, #12
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d042      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x382>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d13b      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d920      	bls.n	80027ce <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3302      	adds	r3, #2
 800279c:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b02      	subs	r3, #2
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d81b      	bhi.n	80027f4 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	e012      	b.n	80027f4 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f103 020c 	add.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	6079      	str	r1, [r7, #4]
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d00b      	beq.n	8002818 <HAL_SPI_TransmitReceive+0x3a2>
 8002800:	f7fd fd98 	bl	8000334 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280c:	429a      	cmp	r2, r3
 800280e:	d803      	bhi.n	8002818 <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002816:	e020      	b.n	800285a <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f af6c 	bne.w	80026fc <HAL_SPI_TransmitReceive+0x286>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	f47f af65 	bne.w	80026fc <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f94d 	bl	8002ad6 <SPI_EndRxTxTransaction>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002856:	e000      	b.n	800285a <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8002858:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800286a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800286e:	4618      	mov	r0, r3
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002884:	e04c      	b.n	8002920 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d048      	beq.n	8002920 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002894:	f7fd fd4e 	bl	8000334 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d83d      	bhi.n	8002920 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028bc:	d111      	bne.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c6:	d004      	beq.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d107      	bne.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	d10f      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800290a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e00e      	b.n	800293e <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d101      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002930:	2201      	movs	r2, #1
 8002932:	e000      	b.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002934:	2200      	movs	r2, #0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d1a4      	bne.n	8002886 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002954:	e05a      	b.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800295c:	d109      	bne.n	8002972 <SPI_WaitFifoStateUntilTimeout+0x2c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002970:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d048      	beq.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002980:	f7fd fcd8 	bl	8000334 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d83d      	bhi.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800299e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a8:	d111      	bne.n	80029ce <SPI_WaitFifoStateUntilTimeout+0x88>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b2:	d004      	beq.n	80029be <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029bc:	d107      	bne.n	80029ce <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d10f      	bne.n	80029f8 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e008      	b.n	8002a1e <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d19c      	bne.n	8002956 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af02      	add	r7, sp, #8
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3a:	d111      	bne.n	8002a60 <SPI_EndRxTransaction+0x3a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a44:	d004      	beq.n	8002a50 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d107      	bne.n	8002a60 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff ff03 	bl	8002876 <SPI_WaitFlagStateUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7a:	f043 0220 	orr.w	r2, r3, #32
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e023      	b.n	8002ace <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d11d      	bne.n	8002acc <SPI_EndRxTransaction+0xa6>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a98:	d004      	beq.n	8002aa4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d113      	bne.n	8002acc <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff ff48 	bl	8002946 <SPI_WaitFifoStateUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e000      	b.n	8002ace <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af02      	add	r7, sp, #8
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff ff29 	bl	8002946 <SPI_WaitFifoStateUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e027      	b.n	8002b5a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff feae 	bl	8002876 <SPI_WaitFlagStateUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e014      	b.n	8002b5a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ff02 	bl	8002946 <SPI_WaitFifoStateUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e000      	b.n	8002b5a <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e01d      	b.n	8002bb0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f003 fb75 	bl	8006278 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f000 f93b 	bl	8002e1c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e01d      	b.n	8002c3c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f815 	bl	8002c44 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f000 f8f5 	bl	8002e1c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_ConfigClockSource+0x1c>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0cf      	b.n	8002e14 <HAL_TIM_ConfigClockSource+0x1bc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	d07c      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x152>
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d80f      	bhi.n	8002cd4 <HAL_TIM_ConfigClockSource+0x7c>
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	f000 808f 	beq.w	8002dd8 <HAL_TIM_ConfigClockSource+0x180>
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d803      	bhi.n	8002cc6 <HAL_TIM_ConfigClockSource+0x6e>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8083 	beq.w	8002dca <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8002cc4:	e09d      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f000 808d 	beq.w	8002de6 <HAL_TIM_ConfigClockSource+0x18e>
 8002ccc:	2b30      	cmp	r3, #48	; 0x30
 8002cce:	f000 8091 	beq.w	8002df4 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8002cd2:	e096      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002cd4:	2b70      	cmp	r3, #112	; 0x70
 8002cd6:	d018      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0xb2>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d804      	bhi.n	8002ce6 <HAL_TIM_ConfigClockSource+0x8e>
 8002cdc:	2b50      	cmp	r3, #80	; 0x50
 8002cde:	d044      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x112>
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	d052      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8002ce4:	e08d      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	d003      	beq.n	8002cf4 <HAL_TIM_ConfigClockSource+0x9c>
 8002cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf0:	d028      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8002cf2:	e086      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	f023 0307 	bic.w	r3, r3, #7
 8002d06:	6093      	str	r3, [r2, #8]
    break;
 8002d08:	e07b      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f000 fbbc 	bl	8003496 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
    break;
 8002d42:	e05e      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f000 fb9f 	bl	8003496 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d66:	609a      	str	r2, [r3, #8]
    break;
 8002d68:	e04b      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 fb06 	bl	8003388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2150      	movs	r1, #80	; 0x50
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fb67 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002d88:	e03b      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 fb29 	bl	80033ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2160      	movs	r1, #96	; 0x60
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fb57 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002da8:	e02b      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 fae6 	bl	8003388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fb47 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002dc8:	e01b      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fb40 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002dd6:	e014      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2110      	movs	r1, #16
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fb39 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002de4:	e00d      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2120      	movs	r1, #32
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fb32 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002df2:	e006      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2130      	movs	r1, #48	; 0x30
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fb2b 	bl	8003456 <TIM_ITRx_SetConfig>
    break;
 8002e00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <TIM_Base_SetConfig+0x108>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00f      	beq.n	8002e58 <TIM_Base_SetConfig+0x3c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	d00b      	beq.n	8002e58 <TIM_Base_SetConfig+0x3c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a39      	ldr	r2, [pc, #228]	; (8002f28 <TIM_Base_SetConfig+0x10c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x3c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <TIM_Base_SetConfig+0x110>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x3c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <TIM_Base_SetConfig+0x114>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <TIM_Base_SetConfig+0x108>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01b      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d017      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <TIM_Base_SetConfig+0x10c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <TIM_Base_SetConfig+0x110>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00f      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a28      	ldr	r2, [pc, #160]	; (8002f30 <TIM_Base_SetConfig+0x114>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <TIM_Base_SetConfig+0x118>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <TIM_Base_SetConfig+0x11c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <TIM_Base_SetConfig+0x8e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <TIM_Base_SetConfig+0x120>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <TIM_Base_SetConfig+0x108>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00f      	beq.n	8002f08 <TIM_Base_SetConfig+0xec>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <TIM_Base_SetConfig+0x114>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <TIM_Base_SetConfig+0xec>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <TIM_Base_SetConfig+0x118>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <TIM_Base_SetConfig+0xec>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a0f      	ldr	r2, [pc, #60]	; (8002f38 <TIM_Base_SetConfig+0x11c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_Base_SetConfig+0xec>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <TIM_Base_SetConfig+0x120>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d103      	bne.n	8002f10 <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	615a      	str	r2, [r3, #20]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40013400 	.word	0x40013400
 8002f34:	40014000 	.word	0x40014000
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	40014800 	.word	0x40014800

08002f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0302 	bic.w	r3, r3, #2
 8002f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <TIM_OC1_SetConfig+0x118>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00f      	beq.n	8002fcc <TIM_OC1_SetConfig+0x8c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2b      	ldr	r2, [pc, #172]	; (800305c <TIM_OC1_SetConfig+0x11c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_OC1_SetConfig+0x8c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <TIM_OC1_SetConfig+0x120>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_OC1_SetConfig+0x8c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a29      	ldr	r2, [pc, #164]	; (8003064 <TIM_OC1_SetConfig+0x124>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_OC1_SetConfig+0x8c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a28      	ldr	r2, [pc, #160]	; (8003068 <TIM_OC1_SetConfig+0x128>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10c      	bne.n	8002fe6 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0308 	bic.w	r3, r3, #8
 8002fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <TIM_OC1_SetConfig+0x118>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_OC1_SetConfig+0xce>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <TIM_OC1_SetConfig+0x11c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_OC1_SetConfig+0xce>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <TIM_OC1_SetConfig+0x120>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_OC1_SetConfig+0xce>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <TIM_OC1_SetConfig+0x124>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_OC1_SetConfig+0xce>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a17      	ldr	r2, [pc, #92]	; (8003068 <TIM_OC1_SetConfig+0x128>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d111      	bne.n	8003032 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
} 
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40013400 	.word	0x40013400
 8003060:	40014000 	.word	0x40014000
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800

0800306c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0210 	bic.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0320 	bic.w	r3, r3, #32
 80030c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a28      	ldr	r2, [pc, #160]	; (8003178 <TIM_OC2_SetConfig+0x10c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_OC2_SetConfig+0x78>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a27      	ldr	r2, [pc, #156]	; (800317c <TIM_OC2_SetConfig+0x110>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d10d      	bne.n	8003100 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fe:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <TIM_OC2_SetConfig+0x10c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00f      	beq.n	8003128 <TIM_OC2_SetConfig+0xbc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a1c      	ldr	r2, [pc, #112]	; (800317c <TIM_OC2_SetConfig+0x110>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_OC2_SetConfig+0xbc>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <TIM_OC2_SetConfig+0x114>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_OC2_SetConfig+0xbc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <TIM_OC2_SetConfig+0x118>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_OC2_SetConfig+0xbc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a19      	ldr	r2, [pc, #100]	; (8003188 <TIM_OC2_SetConfig+0x11c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d113      	bne.n	8003150 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800312e:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003136:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	621a      	str	r2, [r3, #32]
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40013400 	.word	0x40013400
 8003180:	40014000 	.word	0x40014000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800

0800318c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <TIM_OC3_SetConfig+0x108>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_OC3_SetConfig+0x76>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a26      	ldr	r2, [pc, #152]	; (8003298 <TIM_OC3_SetConfig+0x10c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10d      	bne.n	800321e <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800321c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <TIM_OC3_SetConfig+0x108>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_OC3_SetConfig+0xba>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <TIM_OC3_SetConfig+0x10c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_OC3_SetConfig+0xba>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <TIM_OC3_SetConfig+0x110>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_OC3_SetConfig+0xba>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <TIM_OC3_SetConfig+0x114>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_OC3_SetConfig+0xba>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <TIM_OC3_SetConfig+0x118>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d113      	bne.n	800326e <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003254:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40013400 	.word	0x40013400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800

080032a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ee:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003302:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_OC4_SetConfig+0xcc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00f      	beq.n	8003338 <TIM_OC4_SetConfig+0x90>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a17      	ldr	r2, [pc, #92]	; (8003378 <TIM_OC4_SetConfig+0xd0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <TIM_OC4_SetConfig+0x90>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a16      	ldr	r2, [pc, #88]	; (800337c <TIM_OC4_SetConfig+0xd4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <TIM_OC4_SetConfig+0x90>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <TIM_OC4_SetConfig+0xd8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <TIM_OC4_SetConfig+0x90>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a14      	ldr	r2, [pc, #80]	; (8003384 <TIM_OC4_SetConfig+0xdc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <TIM_OC4_SetConfig+0xa4>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333e:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40013400 	.word	0x40013400
 800337c:	40014000 	.word	0x40014000
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800

08003388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0201 	bic.w	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 030a 	bic.w	r3, r3, #10
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	f043 0307 	orr.w	r3, r3, #7
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	609a      	str	r2, [r3, #8]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	021a      	lsls	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	609a      	str	r2, [r3, #8]
} 
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e105      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x226>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b14      	cmp	r3, #20
 800350a:	f200 80f0 	bhi.w	80036ee <HAL_TIM_PWM_ConfigChannel+0x212>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003569 	.word	0x08003569
 8003518:	080036ef 	.word	0x080036ef
 800351c:	080036ef 	.word	0x080036ef
 8003520:	080036ef 	.word	0x080036ef
 8003524:	080035a9 	.word	0x080035a9
 8003528:	080036ef 	.word	0x080036ef
 800352c:	080036ef 	.word	0x080036ef
 8003530:	080036ef 	.word	0x080036ef
 8003534:	080035eb 	.word	0x080035eb
 8003538:	080036ef 	.word	0x080036ef
 800353c:	080036ef 	.word	0x080036ef
 8003540:	080036ef 	.word	0x080036ef
 8003544:	0800362b 	.word	0x0800362b
 8003548:	080036ef 	.word	0x080036ef
 800354c:	080036ef 	.word	0x080036ef
 8003550:	080036ef 	.word	0x080036ef
 8003554:	0800366d 	.word	0x0800366d
 8003558:	080036ef 	.word	0x080036ef
 800355c:	080036ef 	.word	0x080036ef
 8003560:	080036ef 	.word	0x080036ef
 8003564:	080036ad 	.word	0x080036ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fce6 	bl	8002f40 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0204 	bic.w	r2, r2, #4
 8003592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6999      	ldr	r1, [r3, #24]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	619a      	str	r2, [r3, #24]
    }
    break;
 80035a6:	e0a3      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fd5c 	bl	800306c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6999      	ldr	r1, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	619a      	str	r2, [r3, #24]
    }
    break;
 80035e8:	e082      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fdcb 	bl	800318c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0204 	bic.w	r2, r2, #4
 8003614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69d9      	ldr	r1, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	61da      	str	r2, [r3, #28]
    }
    break;
 8003628:	e062      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fe39 	bl	80032a8 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003644:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	021a      	lsls	r2, r3, #8
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	61da      	str	r2, [r3, #28]
    }
    break;
 800366a:	e041      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f89e 	bl	80037b4 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80036aa:	e021      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f8e8 	bl	8003888 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80036ec:	e000      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80036ee:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003720:	2302      	movs	r3, #2
 8003722:	e03d      	b.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d108      	bne.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003756:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
} 
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40013400 	.word	0x40013400

080037b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003804:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <TIM_OC5_SetConfig+0xc0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00f      	beq.n	800383a <TIM_OC5_SetConfig+0x86>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <TIM_OC5_SetConfig+0xc4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00b      	beq.n	800383a <TIM_OC5_SetConfig+0x86>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <TIM_OC5_SetConfig+0xc8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <TIM_OC5_SetConfig+0x86>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a14      	ldr	r2, [pc, #80]	; (8003880 <TIM_OC5_SetConfig+0xcc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_OC5_SetConfig+0x86>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a13      	ldr	r2, [pc, #76]	; (8003884 <TIM_OC5_SetConfig+0xd0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d109      	bne.n	800384e <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40013400 	.word	0x40013400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c6:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038da:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	051b      	lsls	r3, r3, #20
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <TIM_OC6_SetConfig+0xc4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00f      	beq.n	8003910 <TIM_OC6_SetConfig+0x88>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <TIM_OC6_SetConfig+0xc8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00b      	beq.n	8003910 <TIM_OC6_SetConfig+0x88>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a16      	ldr	r2, [pc, #88]	; (8003954 <TIM_OC6_SetConfig+0xcc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <TIM_OC6_SetConfig+0x88>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <TIM_OC6_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_OC6_SetConfig+0x88>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <TIM_OC6_SetConfig+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d109      	bne.n	8003924 <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
} 
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40013400 	.word	0x40013400
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800

08003960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e043      	b.n	80039fa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f002 fd52 	bl	8006430 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8b9 	bl	8003b1c <UART_SetConfig>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e022      	b.n	80039fa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 faab 	bl	8003f18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fb32 	bl	800405c <UART_CheckIdleState>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af02      	add	r7, sp, #8
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d177      	bne.n	8003b12 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_UART_Transmit+0x2c>
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e070      	b.n	8003b14 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_UART_Transmit+0x3e>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e069      	b.n	8003b14 <HAL_UART_Transmit+0x112>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	; 0x21
 8003a52:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a56:	f7fc fc6d 	bl	8000334 <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003a6c:	e034      	b.n	8003ad8 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2180      	movs	r1, #128	; 0x80
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fb2f 	bl	80040ee <UART_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e03c      	b.n	8003b14 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	d111      	bne.n	8003ac8 <HAL_UART_Transmit+0xc6>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	881a      	ldrh	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003abc:	b292      	uxth	r2, r2
 8003abe:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	e007      	b.n	8003ad8 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	60ba      	str	r2, [r7, #8]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1c4      	bne.n	8003a6e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2200      	movs	r2, #0
 8003aec:	2140      	movs	r1, #64	; 0x40
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fafd 	bl	80040ee <UART_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e00a      	b.n	8003b14 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003b28:	2310      	movs	r3, #16
 8003b2a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b5a:	f023 030c 	bic.w	r3, r3, #12
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4ab4      	ldr	r2, [pc, #720]	; (8003e74 <UART_SetConfig+0x358>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d121      	bne.n	8003bec <UART_SetConfig+0xd0>
 8003ba8:	4bb3      	ldr	r3, [pc, #716]	; (8003e78 <UART_SetConfig+0x35c>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d817      	bhi.n	8003be4 <UART_SetConfig+0xc8>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <UART_SetConfig+0xa0>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bd9 	.word	0x08003bd9
 8003bc4:	08003bdf 	.word	0x08003bdf
 8003bc8:	08003bd3 	.word	0x08003bd3
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
 8003bd0:	e0b2      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	75fb      	strb	r3, [r7, #23]
 8003bd6:	e0af      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	75fb      	strb	r3, [r7, #23]
 8003bdc:	e0ac      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003bde:	2308      	movs	r3, #8
 8003be0:	75fb      	strb	r3, [r7, #23]
 8003be2:	e0a9      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003be4:	2310      	movs	r3, #16
 8003be6:	75fb      	strb	r3, [r7, #23]
 8003be8:	bf00      	nop
 8003bea:	e0a5      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4aa2      	ldr	r2, [pc, #648]	; (8003e7c <UART_SetConfig+0x360>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d123      	bne.n	8003c3e <UART_SetConfig+0x122>
 8003bf6:	4ba0      	ldr	r3, [pc, #640]	; (8003e78 <UART_SetConfig+0x35c>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d012      	beq.n	8003c2a <UART_SetConfig+0x10e>
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d802      	bhi.n	8003c10 <UART_SetConfig+0xf4>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <UART_SetConfig+0x102>
 8003c0e:	e012      	b.n	8003c36 <UART_SetConfig+0x11a>
 8003c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c14:	d00c      	beq.n	8003c30 <UART_SetConfig+0x114>
 8003c16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1a:	d003      	beq.n	8003c24 <UART_SetConfig+0x108>
 8003c1c:	e00b      	b.n	8003c36 <UART_SetConfig+0x11a>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
 8003c22:	e089      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	75fb      	strb	r3, [r7, #23]
 8003c28:	e086      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	75fb      	strb	r3, [r7, #23]
 8003c2e:	e083      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c30:	2308      	movs	r3, #8
 8003c32:	75fb      	strb	r3, [r7, #23]
 8003c34:	e080      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c36:	2310      	movs	r3, #16
 8003c38:	75fb      	strb	r3, [r7, #23]
 8003c3a:	bf00      	nop
 8003c3c:	e07c      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a8f      	ldr	r2, [pc, #572]	; (8003e80 <UART_SetConfig+0x364>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d123      	bne.n	8003c90 <UART_SetConfig+0x174>
 8003c48:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <UART_SetConfig+0x35c>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c54:	d012      	beq.n	8003c7c <UART_SetConfig+0x160>
 8003c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c5a:	d802      	bhi.n	8003c62 <UART_SetConfig+0x146>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <UART_SetConfig+0x154>
 8003c60:	e012      	b.n	8003c88 <UART_SetConfig+0x16c>
 8003c62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c66:	d00c      	beq.n	8003c82 <UART_SetConfig+0x166>
 8003c68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c6c:	d003      	beq.n	8003c76 <UART_SetConfig+0x15a>
 8003c6e:	e00b      	b.n	8003c88 <UART_SetConfig+0x16c>
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
 8003c74:	e060      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c76:	2302      	movs	r3, #2
 8003c78:	75fb      	strb	r3, [r7, #23]
 8003c7a:	e05d      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	75fb      	strb	r3, [r7, #23]
 8003c80:	e05a      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c82:	2308      	movs	r3, #8
 8003c84:	75fb      	strb	r3, [r7, #23]
 8003c86:	e057      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	75fb      	strb	r3, [r7, #23]
 8003c8c:	bf00      	nop
 8003c8e:	e053      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7b      	ldr	r2, [pc, #492]	; (8003e84 <UART_SetConfig+0x368>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d123      	bne.n	8003ce2 <UART_SetConfig+0x1c6>
 8003c9a:	4b77      	ldr	r3, [pc, #476]	; (8003e78 <UART_SetConfig+0x35c>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca6:	d012      	beq.n	8003cce <UART_SetConfig+0x1b2>
 8003ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cac:	d802      	bhi.n	8003cb4 <UART_SetConfig+0x198>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <UART_SetConfig+0x1a6>
 8003cb2:	e012      	b.n	8003cda <UART_SetConfig+0x1be>
 8003cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb8:	d00c      	beq.n	8003cd4 <UART_SetConfig+0x1b8>
 8003cba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cbe:	d003      	beq.n	8003cc8 <UART_SetConfig+0x1ac>
 8003cc0:	e00b      	b.n	8003cda <UART_SetConfig+0x1be>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]
 8003cc6:	e037      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	75fb      	strb	r3, [r7, #23]
 8003ccc:	e034      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003cce:	2304      	movs	r3, #4
 8003cd0:	75fb      	strb	r3, [r7, #23]
 8003cd2:	e031      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	75fb      	strb	r3, [r7, #23]
 8003cd8:	e02e      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003cda:	2310      	movs	r3, #16
 8003cdc:	75fb      	strb	r3, [r7, #23]
 8003cde:	bf00      	nop
 8003ce0:	e02a      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a68      	ldr	r2, [pc, #416]	; (8003e88 <UART_SetConfig+0x36c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d123      	bne.n	8003d34 <UART_SetConfig+0x218>
 8003cec:	4b62      	ldr	r3, [pc, #392]	; (8003e78 <UART_SetConfig+0x35c>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf8:	d012      	beq.n	8003d20 <UART_SetConfig+0x204>
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfe:	d802      	bhi.n	8003d06 <UART_SetConfig+0x1ea>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <UART_SetConfig+0x1f8>
 8003d04:	e012      	b.n	8003d2c <UART_SetConfig+0x210>
 8003d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d0a:	d00c      	beq.n	8003d26 <UART_SetConfig+0x20a>
 8003d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d10:	d003      	beq.n	8003d1a <UART_SetConfig+0x1fe>
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x210>
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
 8003d18:	e00e      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	75fb      	strb	r3, [r7, #23]
 8003d1e:	e00b      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003d20:	2304      	movs	r3, #4
 8003d22:	75fb      	strb	r3, [r7, #23]
 8003d24:	e008      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003d26:	2308      	movs	r3, #8
 8003d28:	75fb      	strb	r3, [r7, #23]
 8003d2a:	e005      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	75fb      	strb	r3, [r7, #23]
 8003d30:	bf00      	nop
 8003d32:	e001      	b.n	8003d38 <UART_SetConfig+0x21c>
 8003d34:	2310      	movs	r3, #16
 8003d36:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d40:	d16f      	bne.n	8003e22 <UART_SetConfig+0x306>
  {
    switch (clocksource)
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d857      	bhi.n	8003df8 <UART_SetConfig+0x2dc>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0x234>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d75 	.word	0x08003d75
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003df9 	.word	0x08003df9
 8003d60:	08003dc7 	.word	0x08003dc7
 8003d64:	08003df9 	.word	0x08003df9
 8003d68:	08003df9 	.word	0x08003df9
 8003d6c:	08003df9 	.word	0x08003df9
 8003d70:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d74:	f7fd fe80 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	005a      	lsls	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	441a      	add	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	82bb      	strh	r3, [r7, #20]
        break;
 8003d8e:	e036      	b.n	8003dfe <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d90:	f7fd fe94 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8003d94:	4603      	mov	r3, r0
 8003d96:	005a      	lsls	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	441a      	add	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	82bb      	strh	r3, [r7, #20]
        break;
 8003daa:	e028      	b.n	8003dfe <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003db6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6852      	ldr	r2, [r2, #4]
 8003dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc2:	82bb      	strh	r3, [r7, #20]
        break;
 8003dc4:	e01b      	b.n	8003dfe <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003dc6:	f7fd fde1 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	005a      	lsls	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	82bb      	strh	r3, [r7, #20]
        break;
 8003de0:	e00d      	b.n	8003dfe <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	82bb      	strh	r3, [r7, #20]
        break;
 8003df6:	e002      	b.n	8003dfe <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	74fb      	strb	r3, [r7, #19]
        break;
 8003dfc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003dfe:	8abb      	ldrh	r3, [r7, #20]
 8003e00:	f023 030f 	bic.w	r3, r3, #15
 8003e04:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e06:	8abb      	ldrh	r3, [r7, #20]
 8003e08:	105b      	asrs	r3, r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	897a      	ldrh	r2, [r7, #10]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e075      	b.n	8003f0e <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d86f      	bhi.n	8003f08 <UART_SetConfig+0x3ec>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0x314>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ead 	.word	0x08003ead
 8003e3c:	08003f09 	.word	0x08003f09
 8003e40:	08003ecd 	.word	0x08003ecd
 8003e44:	08003f09 	.word	0x08003f09
 8003e48:	08003f09 	.word	0x08003f09
 8003e4c:	08003f09 	.word	0x08003f09
 8003e50:	08003eed 	.word	0x08003eed
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e54:	f7fd fe10 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60da      	str	r2, [r3, #12]
        break;
 8003e72:	e04c      	b.n	8003f0e <UART_SetConfig+0x3f2>
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	40004800 	.word	0x40004800
 8003e84:	40004c00 	.word	0x40004c00
 8003e88:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e8c:	f7fd fe16 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60da      	str	r2, [r3, #12]
        break;
 8003eaa:	e030      	b.n	8003f0e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003eb6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6852      	ldr	r2, [r2, #4]
 8003ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
        break;
 8003eca:	e020      	b.n	8003f0e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ecc:	f7fd fd5e 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	441a      	add	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60da      	str	r2, [r3, #12]
        break;
 8003eea:	e010      	b.n	8003f0e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60da      	str	r2, [r3, #12]
        break;
 8003f06:	e002      	b.n	8003f0e <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f0c:	bf00      	nop
    }
  }

  return ret;
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]

}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01a      	beq.n	800402e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d10a      	bne.n	800402e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800406e:	f7fc f961 	bl	8000334 <HAL_GetTick>
 8004072:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b08      	cmp	r3, #8
 8004080:	d10e      	bne.n	80040a0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004082:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f82c 	bl	80040ee <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e022      	b.n	80040e6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d10e      	bne.n	80040cc <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f816 	bl	80040ee <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e00c      	b.n	80040e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fe:	e02c      	b.n	800415a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d028      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x30>
 800410e:	f7fc f911 	bl	8000334 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	429a      	cmp	r2, r3
 800411c:	d21d      	bcs.n	800415a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800412c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e00f      	b.n	800417a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	429a      	cmp	r2, r3
 8004168:	bf0c      	ite	eq
 800416a:	2301      	moveq	r3, #1
 800416c:	2300      	movne	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	429a      	cmp	r2, r3
 8004176:	d0c3      	beq.n	8004100 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <keypadRead>:
#include "keypad.h"
#include "stm32f3xx_hal.h"
#include "main.h"

int keypadRead()
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
	uint8_t state = 16;
 800418a:	2310      	movs	r3, #16
 800418c:	71fb      	strb	r3, [r7, #7]

	//do
	//{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800418e:	2200      	movs	r2, #0
 8004190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004194:	486a      	ldr	r0, [pc, #424]	; (8004340 <keypadRead+0x1bc>)
 8004196:	f7fc fb77 	bl	8000888 <HAL_GPIO_WritePin>
	if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	4868      	ldr	r0, [pc, #416]	; (8004340 <keypadRead+0x1bc>)
 800419e:	f7fc fb5b 	bl	8000858 <HAL_GPIO_ReadPin>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <keypadRead+0x28>
	{
		state = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 80041ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041b0:	4863      	ldr	r0, [pc, #396]	; (8004340 <keypadRead+0x1bc>)
 80041b2:	f7fc fb51 	bl	8000858 <HAL_GPIO_ReadPin>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <keypadRead+0x3c>
	{
		state = 1;
 80041bc:	2301      	movs	r3, #1
 80041be:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 80041c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041c4:	485e      	ldr	r0, [pc, #376]	; (8004340 <keypadRead+0x1bc>)
 80041c6:	f7fc fb47 	bl	8000858 <HAL_GPIO_ReadPin>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <keypadRead+0x50>
	{
		state = 2;
 80041d0:	2302      	movs	r3, #2
 80041d2:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 80041d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041d8:	4859      	ldr	r0, [pc, #356]	; (8004340 <keypadRead+0x1bc>)
 80041da:	f7fc fb3d 	bl	8000858 <HAL_GPIO_ReadPin>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <keypadRead+0x64>
	{
		state = 3;
 80041e4:	2303      	movs	r3, #3
 80041e6:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80041e8:	2201      	movs	r2, #1
 80041ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041ee:	4854      	ldr	r0, [pc, #336]	; (8004340 <keypadRead+0x1bc>)
 80041f0:	f7fc fb4a 	bl	8000888 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041fa:	4851      	ldr	r0, [pc, #324]	; (8004340 <keypadRead+0x1bc>)
 80041fc:	f7fc fb44 	bl	8000888 <HAL_GPIO_WritePin>
	if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	484f      	ldr	r0, [pc, #316]	; (8004340 <keypadRead+0x1bc>)
 8004204:	f7fc fb28 	bl	8000858 <HAL_GPIO_ReadPin>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <keypadRead+0x8e>
	{
		state = 4;
 800420e:	2304      	movs	r3, #4
 8004210:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 8004212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004216:	484a      	ldr	r0, [pc, #296]	; (8004340 <keypadRead+0x1bc>)
 8004218:	f7fc fb1e 	bl	8000858 <HAL_GPIO_ReadPin>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <keypadRead+0xa2>
	{
		state = 5;
 8004222:	2305      	movs	r3, #5
 8004224:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 8004226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800422a:	4845      	ldr	r0, [pc, #276]	; (8004340 <keypadRead+0x1bc>)
 800422c:	f7fc fb14 	bl	8000858 <HAL_GPIO_ReadPin>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <keypadRead+0xb6>
	{
		state = 6;
 8004236:	2306      	movs	r3, #6
 8004238:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 800423a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800423e:	4840      	ldr	r0, [pc, #256]	; (8004340 <keypadRead+0x1bc>)
 8004240:	f7fc fb0a 	bl	8000858 <HAL_GPIO_ReadPin>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <keypadRead+0xca>
	{
		state = 7;
 800424a:	2307      	movs	r3, #7
 800424c:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 800424e:	2201      	movs	r2, #1
 8004250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004254:	483a      	ldr	r0, [pc, #232]	; (8004340 <keypadRead+0x1bc>)
 8004256:	f7fc fb17 	bl	8000888 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800425a:	2200      	movs	r2, #0
 800425c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004260:	4837      	ldr	r0, [pc, #220]	; (8004340 <keypadRead+0x1bc>)
 8004262:	f7fc fb11 	bl	8000888 <HAL_GPIO_WritePin>
	if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	4835      	ldr	r0, [pc, #212]	; (8004340 <keypadRead+0x1bc>)
 800426a:	f7fc faf5 	bl	8000858 <HAL_GPIO_ReadPin>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <keypadRead+0xf4>
	{
		state = 8;
 8004274:	2308      	movs	r3, #8
 8004276:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 8004278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800427c:	4830      	ldr	r0, [pc, #192]	; (8004340 <keypadRead+0x1bc>)
 800427e:	f7fc faeb 	bl	8000858 <HAL_GPIO_ReadPin>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <keypadRead+0x108>
	{
		state = 9;
 8004288:	2309      	movs	r3, #9
 800428a:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 800428c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004290:	482b      	ldr	r0, [pc, #172]	; (8004340 <keypadRead+0x1bc>)
 8004292:	f7fc fae1 	bl	8000858 <HAL_GPIO_ReadPin>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <keypadRead+0x11c>
	{
		state = 10;
 800429c:	230a      	movs	r3, #10
 800429e:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 80042a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042a4:	4826      	ldr	r0, [pc, #152]	; (8004340 <keypadRead+0x1bc>)
 80042a6:	f7fc fad7 	bl	8000858 <HAL_GPIO_ReadPin>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <keypadRead+0x130>
	{
		state = 11;
 80042b0:	230b      	movs	r3, #11
 80042b2:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 80042b4:	2201      	movs	r2, #1
 80042b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042ba:	4821      	ldr	r0, [pc, #132]	; (8004340 <keypadRead+0x1bc>)
 80042bc:	f7fc fae4 	bl	8000888 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042c6:	481e      	ldr	r0, [pc, #120]	; (8004340 <keypadRead+0x1bc>)
 80042c8:	f7fc fade 	bl	8000888 <HAL_GPIO_WritePin>
	if(!HAL_GPIO_ReadPin(GPIOE, C0_In_Pin))
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	481c      	ldr	r0, [pc, #112]	; (8004340 <keypadRead+0x1bc>)
 80042d0:	f7fc fac2 	bl	8000858 <HAL_GPIO_ReadPin>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <keypadRead+0x15a>
	{
		state = 12;
 80042da:	230c      	movs	r3, #12
 80042dc:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C1_In_Pin))
 80042de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042e2:	4817      	ldr	r0, [pc, #92]	; (8004340 <keypadRead+0x1bc>)
 80042e4:	f7fc fab8 	bl	8000858 <HAL_GPIO_ReadPin>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <keypadRead+0x16e>
	{
		state = 13;
 80042ee:	230d      	movs	r3, #13
 80042f0:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C2_In_Pin))
 80042f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042f6:	4812      	ldr	r0, [pc, #72]	; (8004340 <keypadRead+0x1bc>)
 80042f8:	f7fc faae 	bl	8000858 <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <keypadRead+0x182>
	{
		state = 14;
 8004302:	230e      	movs	r3, #14
 8004304:	71fb      	strb	r3, [r7, #7]
	}
	if(!HAL_GPIO_ReadPin(GPIOE, C3_In_Pin))
 8004306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800430a:	480d      	ldr	r0, [pc, #52]	; (8004340 <keypadRead+0x1bc>)
 800430c:	f7fc faa4 	bl	8000858 <HAL_GPIO_ReadPin>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <keypadRead+0x196>
	{
		state = 15;
 8004316:	230f      	movs	r3, #15
 8004318:	71fb      	strb	r3, [r7, #7]
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800431a:	2201      	movs	r2, #1
 800431c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004320:	4807      	ldr	r0, [pc, #28]	; (8004340 <keypadRead+0x1bc>)
 8004322:	f7fc fab1 	bl	8000888 <HAL_GPIO_WritePin>
	//}while(state == 16);

	if(state != 16)
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	2b10      	cmp	r3, #16
 800432a:	d003      	beq.n	8004334 <keypadRead+0x1b0>
	{
		HAL_Delay(300);
 800432c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004330:	f7fc f80c 	bl	800034c <HAL_Delay>
	}
	return state;
 8004334:	79fb      	ldrb	r3, [r7, #7]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	48001000 	.word	0x48001000

08004344 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8004344:	b5b0      	push	{r4, r5, r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8004352:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800435a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800435e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8004364:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004366:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f80e 	bl	800439a <Lcd_init>

	return lcd;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	461d      	mov	r5, r3
 8004382:	f107 0410 	add.w	r4, r7, #16
 8004386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800438e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	3728      	adds	r7, #40	; 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bdb0      	pop	{r4, r5, r7, pc}

0800439a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7d9b      	ldrb	r3, [r3, #22]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80043aa:	2133      	movs	r1, #51	; 0x33
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f889 	bl	80044c4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80043b2:	2132      	movs	r1, #50	; 0x32
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f885 	bl	80044c4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80043ba:	2128      	movs	r1, #40	; 0x28
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f881 	bl	80044c4 <lcd_write_command>
 80043c2:	e003      	b.n	80043cc <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80043c4:	2138      	movs	r1, #56	; 0x38
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f87c 	bl	80044c4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80043cc:	2101      	movs	r1, #1
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f878 	bl	80044c4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80043d4:	210c      	movs	r1, #12
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f874 	bl	80044c4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80043dc:	2106      	movs	r1, #6
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f870 	bl	80044c4 <lcd_write_command>
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	4906      	ldr	r1, [pc, #24]	; (8004418 <Lcd_int+0x2c>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f003 fb4c 	bl	8007a9c <siprintf>

	Lcd_string(lcd, buffer);
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f806 	bl	800441c <Lcd_string>
}
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	080082bc 	.word	0x080082bc

0800441c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	e00a      	b.n	8004442 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	4413      	add	r3, r2
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f872 	bl	8004520 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	3301      	adds	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	7bfc      	ldrb	r4, [r7, #15]
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f7fb fec3 	bl	80001d0 <strlen>
 800444a:	4603      	mov	r3, r0
 800444c:	429c      	cmp	r4, r3
 800444e:	d3ed      	bcc.n	800442c <Lcd_string+0x10>
	}
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bd90      	pop	{r4, r7, pc}

08004458 <Lcd_char>:

void Lcd_char(Lcd_HandleTypeDef * lcd, char  string)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	70fb      	strb	r3, [r7, #3]
		lcd_write_data(lcd, string);
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f859 	bl	8004520 <lcd_write_data>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
 8004484:	4613      	mov	r3, r2
 8004486:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <Lcd_cursor+0x30>)
 800448c:	5cd2      	ldrb	r2, [r2, r3]
 800448e:	78bb      	ldrb	r3, [r7, #2]
 8004490:	4413      	add	r3, r2
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3b80      	subs	r3, #128	; 0x80
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f812 	bl	80044c4 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08008a54 	.word	0x08008a54

080044ac <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80044b4:	2101      	movs	r1, #1
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f804 	bl	80044c4 <lcd_write_command>
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6898      	ldr	r0, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	899b      	ldrh	r3, [r3, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	4619      	mov	r1, r3
 80044dc:	f7fc f9d4 	bl	8000888 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7d9b      	ldrb	r3, [r3, #22]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d111      	bne.n	800450c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2204      	movs	r2, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f842 	bl	800457c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2204      	movs	r2, #4
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f839 	bl	800457c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800450a:	e005      	b.n	8004518 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	2208      	movs	r2, #8
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f832 	bl	800457c <lcd_write>
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6898      	ldr	r0, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	899b      	ldrh	r3, [r3, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	4619      	mov	r1, r3
 8004538:	f7fc f9a6 	bl	8000888 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7d9b      	ldrb	r3, [r3, #22]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d111      	bne.n	8004568 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2204      	movs	r2, #4
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f814 	bl	800457c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2204      	movs	r2, #4
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f80b 	bl	800457c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8004566:	e005      	b.n	8004574 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	2208      	movs	r2, #8
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f804 	bl	800457c <lcd_write>
}
 8004574:	bf00      	nop
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
 8004588:	4613      	mov	r3, r2
 800458a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e019      	b.n	80045c6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	8819      	ldrh	r1, [r3, #0]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	fa42 f303 	asr.w	r3, r2, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	f7fc f964 	bl	8000888 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	3301      	adds	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	7bfa      	ldrb	r2, [r7, #15]
 80045c8:	78bb      	ldrb	r3, [r7, #2]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d3e1      	bcc.n	8004592 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6918      	ldr	r0, [r3, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8a9b      	ldrh	r3, [r3, #20]
 80045d6:	2201      	movs	r2, #1
 80045d8:	4619      	mov	r1, r3
 80045da:	f7fc f955 	bl	8000888 <HAL_GPIO_WritePin>
	//delay_us(1000);
	HAL_Delay(1);
 80045de:	2001      	movs	r0, #1
 80045e0:	f7fb feb4 	bl	800034c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6918      	ldr	r0, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8a9b      	ldrh	r3, [r3, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fc f94a 	bl	8000888 <HAL_GPIO_WritePin>
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <resetAll.10015>:
	Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
	Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);

	void resetAll()
	{
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4664      	mov	r4, ip
 8004604:	f8c7 c004 	str.w	ip, [r7, #4]
		ringDelay = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	61a3      	str	r3, [r4, #24]
		Lcd_clear(&lcd);
 800460c:	4623      	mov	r3, r4
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff4c 	bl	80044ac <Lcd_clear>
		set = false;
 8004614:	2300      	movs	r3, #0
 8004616:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
	}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	0000      	movs	r0, r0
 8004624:	0000      	movs	r0, r0
	...

08004628 <main>:
{
 8004628:	b5b0      	push	{r4, r5, r7, lr}
 800462a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800462e:	af18      	add	r7, sp, #96	; 0x60
int main(void)
 8004630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004634:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	uint8_t returnKey = 16;
 8004638:	2310      	movs	r3, #16
 800463a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
	uint8_t menuState = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	uint32_t ringDelay = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bool set = false;
 800464a:	2300      	movs	r3, #0
 800464c:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
	uint64_t RxPipeAddr = 0x11223344AA;
 8004650:	a4ea      	add	r4, pc, #936	; (adr r4, 80049fc <main+0x3d4>)
 8004652:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004656:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800465a:	e9c2 3400 	strd	r3, r4, [r2]
	uint64_t TxPipeAddr = 0x99887766BB;
 800465e:	a4e9      	add	r4, pc, #932	; (adr r4, 8004a04 <main+0x3dc>)
 8004660:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004664:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8004668:	e9c2 3400 	strd	r3, r4, [r2]
	char userStatus[] = "Available";
 800466c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004670:	4ad1      	ldr	r2, [pc, #836]	; (80049b8 <main+0x390>)
 8004672:	ca07      	ldmia	r2, {r0, r1, r2}
 8004674:	c303      	stmia	r3!, {r0, r1}
 8004676:	801a      	strh	r2, [r3, #0]
	char userName[19] = { 0 };
 8004678:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800467c:	461a      	mov	r2, r3
 800467e:	2300      	movs	r3, #0
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	6093      	str	r3, [r2, #8]
 8004686:	60d3      	str	r3, [r2, #12]
 8004688:	f8c2 300f 	str.w	r3, [r2, #15]
	char profResponses[4][19] = {"First", "Second", "Third", "Fourth"};
 800468c:	4acb      	ldr	r2, [pc, #812]	; (80049bc <main+0x394>)
 800468e:	f207 135f 	addw	r3, r7, #351	; 0x15f
 8004692:	4611      	mov	r1, r2
 8004694:	224c      	movs	r2, #76	; 0x4c
 8004696:	4618      	mov	r0, r3
 8004698:	f003 f9ec 	bl	8007a74 <memcpy>
	char alphabets[2][27] = { { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v','w', 'x', 'y', 'z', ' ' },
 800469c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046a0:	4ac7      	ldr	r2, [pc, #796]	; (80049c0 <main+0x398>)
 80046a2:	461c      	mov	r4, r3
 80046a4:	4615      	mov	r5, r2
 80046a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046b6:	6020      	str	r0, [r4, #0]
 80046b8:	3404      	adds	r4, #4
 80046ba:	8021      	strh	r1, [r4, #0]
	HAL_Init();
 80046bc:	f7fb fde0 	bl	8000280 <HAL_Init>
	SystemClock_Config();
 80046c0:	f001 fa34 	bl	8005b2c <SystemClock_Config>
	MX_GPIO_Init();
 80046c4:	f001 fcae 	bl	8006024 <MX_GPIO_Init>
	MX_SPI1_Init();
 80046c8:	f001 fa8a 	bl	8005be0 <MX_SPI1_Init>
	MX_TIM2_Init();
 80046cc:	f001 fac6 	bl	8005c5c <MX_TIM2_Init>
	MX_TIM3_Init();
 80046d0:	f001 fb3a 	bl	8005d48 <MX_TIM3_Init>
	MX_TIM4_Init();
 80046d4:	f001 fbae 	bl	8005e34 <MX_TIM4_Init>
	MX_TIM15_Init();
 80046d8:	f001 fc22 	bl	8005f20 <MX_TIM15_Init>
	MX_USART1_UART_Init();
 80046dc:	f001 fc72 	bl	8005fc4 <MX_USART1_UART_Init>
	NRF24_begin(GPIOB, CSpin_Pin, CEpin_Pin, hspi1);
 80046e0:	4cb8      	ldr	r4, [pc, #736]	; (80049c4 <main+0x39c>)
 80046e2:	4668      	mov	r0, sp
 80046e4:	1d23      	adds	r3, r4, #4
 80046e6:	2260      	movs	r2, #96	; 0x60
 80046e8:	4619      	mov	r1, r3
 80046ea:	f003 f9c3 	bl	8007a74 <memcpy>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	2202      	movs	r2, #2
 80046f2:	2101      	movs	r1, #1
 80046f4:	48b4      	ldr	r0, [pc, #720]	; (80049c8 <main+0x3a0>)
 80046f6:	f002 f917 	bl	8006928 <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80046fa:	4cb4      	ldr	r4, [pc, #720]	; (80049cc <main+0x3a4>)
 80046fc:	4668      	mov	r0, sp
 80046fe:	f104 0310 	add.w	r3, r4, #16
 8004702:	2260      	movs	r2, #96	; 0x60
 8004704:	4619      	mov	r1, r3
 8004706:	f003 f9b5 	bl	8007a74 <memcpy>
 800470a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800470e:	f003 f96f 	bl	80079f0 <nrf24_DebugUART_Init>
	printRadioSettings();
 8004712:	f002 fcdb 	bl	80070cc <printRadioSettings>
	NRF24_setChannel(44);
 8004716:	202c      	movs	r0, #44	; 0x2c
 8004718:	f002 fb19 	bl	8006d4e <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800471c:	2020      	movs	r0, #32
 800471e:	f002 fb2b 	bl	8006d78 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxPipeAddr);
 8004722:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	2001      	movs	r0, #1
 800472c:	f002 faa6 	bl	8006c7c <NRF24_openReadingPipe>
	NRF24_openWritingPipe(TxPipeAddr);
 8004730:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004738:	f002 fa7c 	bl	8006c34 <NRF24_openWritingPipe>
	HAL_TIM_Base_Start(&htim15);
 800473c:	48a4      	ldr	r0, [pc, #656]	; (80049d0 <main+0x3a8>)
 800473e:	f7fe fa3b 	bl	8002bb8 <HAL_TIM_Base_Start>
	Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 8004742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004746:	4aa3      	ldr	r2, [pc, #652]	; (80049d4 <main+0x3ac>)
 8004748:	461c      	mov	r4, r3
 800474a:	4613      	mov	r3, r2
 800474c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800474e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8004752:	f107 031c 	add.w	r3, r7, #28
 8004756:	4aa0      	ldr	r2, [pc, #640]	; (80049d8 <main+0x3b0>)
 8004758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800475c:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8004760:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8004764:	f107 021c 	add.w	r2, r7, #28
 8004768:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800476c:	2300      	movs	r3, #0
 800476e:	9303      	str	r3, [sp, #12]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	9302      	str	r3, [sp, #8]
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <main+0x3b4>)
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2340      	movs	r3, #64	; 0x40
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	4b97      	ldr	r3, [pc, #604]	; (80049dc <main+0x3b4>)
 800477e:	f7ff fde1 	bl	8004344 <Lcd_create>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Lcd_clear(&lcd);
 8004782:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fe90 	bl	80044ac <Lcd_clear>
	while (1) {

		memset(TxData, 0, 32);
 800478c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004790:	338b      	adds	r3, #139	; 0x8b
 8004792:	2220      	movs	r2, #32
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f003 f977 	bl	8007a8a <memset>

		//Main menu
		if (menuState == 1)
 800479c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d133      	bne.n	800480c <main+0x1e4>
		{
			if(!set){
 80047a4:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 80047a8:	f083 0301 	eor.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <main+0x19c>
				Lcd_string(&lcd, "1.Settings 2.Status");
 80047b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047b6:	498a      	ldr	r1, [pc, #552]	; (80049e0 <main+0x3b8>)
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fe2f 	bl	800441c <Lcd_string>
				set = true;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
			}

			//resetAll();
			//responseScreen();
			rxData();
 80047c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047c8:	469c      	mov	ip, r3
 80047ca:	f001 f97b 	bl	8005ac4 <rxData.10031>

			returnKey = keypadRead();
 80047ce:	f7ff fcd9 	bl	8004184 <keypadRead>
 80047d2:	4603      	mov	r3, r0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey)
 80047da:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <main+0x1c0>
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d009      	beq.n	80047fa <main+0x1d2>
				resetAll();
				break;

			default:
				//Lcd_string(&lcd, "Wrong");
				break;
 80047e6:	e012      	b.n	800480e <main+0x1e6>
				menuState = 11;
 80047e8:	230b      	movs	r3, #11
 80047ea:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80047ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047f2:	469c      	mov	ip, r3
 80047f4:	f7ff ff02 	bl	80045fc <resetAll.10015>
				break;
 80047f8:	e009      	b.n	800480e <main+0x1e6>
				menuState = 12;
 80047fa:	230c      	movs	r3, #12
 80047fc:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8004800:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004804:	469c      	mov	ip, r3
 8004806:	f7ff fef9 	bl	80045fc <resetAll.10015>
				break;
 800480a:	e000      	b.n	800480e <main+0x1e6>
			}
		}
 800480c:	bf00      	nop

		//Settings Menu
		if (menuState == 11)
 800480e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8004812:	2b0b      	cmp	r3, #11
 8004814:	f040 8092 	bne.w	800493c <main+0x314>
		{
			if(!set){
 8004818:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 800481c:	f083 0301 	eor.w	r3, r3, #1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d036      	beq.n	8004894 <main+0x26c>
				Lcd_cursor(&lcd, 0, 4);
 8004826:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800482a:	2204      	movs	r2, #4
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fe22 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "Customize...");
 8004834:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004838:	496a      	ldr	r1, [pc, #424]	; (80049e4 <main+0x3bc>)
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fdee 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8004840:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004844:	2200      	movs	r2, #0
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fe15 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "1.Buzzer 2.Vibration");
 800484e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004852:	4965      	ldr	r1, [pc, #404]	; (80049e8 <main+0x3c0>)
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fde1 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 2, 0);
 800485a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800485e:	2200      	movs	r2, #0
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fe08 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "3.LED    4.Name");
 8004868:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800486c:	495f      	ldr	r1, [pc, #380]	; (80049ec <main+0x3c4>)
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fdd4 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 3, 0);
 8004874:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004878:	2200      	movs	r2, #0
 800487a:	2103      	movs	r1, #3
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fdfb 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "5.Call Response");
 8004882:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004886:	495a      	ldr	r1, [pc, #360]	; (80049f0 <main+0x3c8>)
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fdc7 	bl	800441c <Lcd_string>
				set = true;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
			}

			returnKey = keypadRead();
 8004894:	f7ff fc76 	bl	8004184 <keypadRead>
 8004898:	4603      	mov	r3, r0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey)
 80048a0:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	d84b      	bhi.n	8004940 <main+0x318>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <main+0x288>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048d1 	.word	0x080048d1
 80048b4:	080048e3 	.word	0x080048e3
 80048b8:	080048f5 	.word	0x080048f5
 80048bc:	08004941 	.word	0x08004941
 80048c0:	08004907 	.word	0x08004907
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004941 	.word	0x08004941
 80048cc:	0800492b 	.word	0x0800492b
			{
			case 0:
				menuState = 111;
 80048d0:	236f      	movs	r3, #111	; 0x6f
 80048d2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80048d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048da:	469c      	mov	ip, r3
 80048dc:	f7ff fe8e 	bl	80045fc <resetAll.10015>
				break;
 80048e0:	e02f      	b.n	8004942 <main+0x31a>

			case 1:
				menuState = 112;
 80048e2:	2370      	movs	r3, #112	; 0x70
 80048e4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80048e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048ec:	469c      	mov	ip, r3
 80048ee:	f7ff fe85 	bl	80045fc <resetAll.10015>
				break;
 80048f2:	e026      	b.n	8004942 <main+0x31a>

			case 2:
				menuState = 113;
 80048f4:	2371      	movs	r3, #113	; 0x71
 80048f6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80048fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048fe:	469c      	mov	ip, r3
 8004900:	f7ff fe7c 	bl	80045fc <resetAll.10015>
				break;
 8004904:	e01d      	b.n	8004942 <main+0x31a>

			case 4:
				menuState = 114;
 8004906:	2372      	movs	r3, #114	; 0x72
 8004908:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 800490c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004910:	469c      	mov	ip, r3
 8004912:	f7ff fe73 	bl	80045fc <resetAll.10015>
				break;
 8004916:	e014      	b.n	8004942 <main+0x31a>

			case 5:
				menuState = 115;
 8004918:	2373      	movs	r3, #115	; 0x73
 800491a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 800491e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004922:	469c      	mov	ip, r3
 8004924:	f7ff fe6a 	bl	80045fc <resetAll.10015>
				break;
 8004928:	e00b      	b.n	8004942 <main+0x31a>

			case 7:
				menuState = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8004930:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004934:	469c      	mov	ip, r3
 8004936:	f7ff fe61 	bl	80045fc <resetAll.10015>
				break;
 800493a:	e002      	b.n	8004942 <main+0x31a>

			default:
				//Lcd_string(&lcd, "Wrong");
				break;
			}
		}
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <main+0x31a>
				break;
 8004940:	bf00      	nop

		//Buzzer Menu
		if (menuState == 111)
 8004942:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8004946:	2b6f      	cmp	r3, #111	; 0x6f
 8004948:	f040 80c4 	bne.w	8004ad4 <main+0x4ac>
		{
			Lcd_string(&lcd, "Buzzer");
 800494c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004950:	4928      	ldr	r1, [pc, #160]	; (80049f4 <main+0x3cc>)
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fd62 	bl	800441c <Lcd_string>

			htim2.Instance->CCR2 = dutyCycles[0]; //% Duty Cycle
 8004958:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <main+0x3d0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
			//__HAL_TIM_SET_AUTORELOAD(&htim2, dutyCycles[]);
			//__HAL_TIM_SET_AUTORELOAD(&htim2, 7200);

			returnKey = keypadRead();
 8004962:	f7ff fc0f 	bl	8004184 <keypadRead>
 8004966:	4603      	mov	r3, r0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey) {
 800496e:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8004972:	2b07      	cmp	r3, #7
 8004974:	f000 80a1 	beq.w	8004aba <main+0x492>
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d065      	beq.n	8004a48 <main+0x420>
 800497c:	2b03      	cmp	r3, #3
 800497e:	d000      	beq.n	8004982 <main+0x35a>
				menuState = 11;
				resetAll();
				break;

			default:
				break;
 8004980:	e0a9      	b.n	8004ad6 <main+0x4ae>
				if(dutyCycles[0] < 50)
 8004982:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004986:	2b31      	cmp	r3, #49	; 0x31
 8004988:	d840      	bhi.n	8004a0c <main+0x3e4>
					dutyCycles[0] += 10;
 800498a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800498e:	330a      	adds	r3, #10
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
					Lcd_cursor(&lcd, 2, 8);
 8004996:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800499a:	2208      	movs	r2, #8
 800499c:	2102      	movs	r1, #2
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd6a 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 80049a4:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80049a8:	461a      	mov	r2, r3
 80049aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fd1b 	bl	80043ec <Lcd_int>
				break;
 80049b6:	e08e      	b.n	8004ad6 <main+0x4ae>
 80049b8:	080083f4 	.word	0x080083f4
 80049bc:	08008410 	.word	0x08008410
 80049c0:	0800845c 	.word	0x0800845c
 80049c4:	200002b8 	.word	0x200002b8
 80049c8:	48000400 	.word	0x48000400
 80049cc:	20000248 	.word	0x20000248
 80049d0:	200001c8 	.word	0x200001c8
 80049d4:	08008494 	.word	0x08008494
 80049d8:	080084a4 	.word	0x080084a4
 80049dc:	48000800 	.word	0x48000800
 80049e0:	080082c0 	.word	0x080082c0
 80049e4:	080082d4 	.word	0x080082d4
 80049e8:	080082e4 	.word	0x080082e4
 80049ec:	080082fc 	.word	0x080082fc
 80049f0:	0800830c 	.word	0x0800830c
 80049f4:	0800831c 	.word	0x0800831c
 80049f8:	2000031c 	.word	0x2000031c
 80049fc:	223344aa 	.word	0x223344aa
 8004a00:	00000011 	.word	0x00000011
 8004a04:	887766bb 	.word	0x887766bb
 8004a08:	00000099 	.word	0x00000099
					Lcd_cursor(&lcd, 1, 1);
 8004a0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a10:	2201      	movs	r2, #1
 8004a12:	2101      	movs	r1, #1
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fd2f 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go higher!");
 8004a1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a1e:	49cc      	ldr	r1, [pc, #816]	; (8004d50 <main+0x728>)
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fcfb 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8004a26:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fd22 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8004a34:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff fcd3 	bl	80043ec <Lcd_int>
				break;
 8004a46:	e046      	b.n	8004ad6 <main+0x4ae>
				if (dutyCycles[0] > 0) {
 8004a48:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <main+0x456>
					dutyCycles[0] -= 10;
 8004a50:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004a54:	3b0a      	subs	r3, #10
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
					Lcd_cursor(&lcd, 2, 8);
 8004a5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a60:	2208      	movs	r2, #8
 8004a62:	2102      	movs	r1, #2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff fd07 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8004a6a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fcb8 	bl	80043ec <Lcd_int>
				break;
 8004a7c:	e02b      	b.n	8004ad6 <main+0x4ae>
					Lcd_cursor(&lcd, 1, 2);
 8004a7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a82:	2202      	movs	r2, #2
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fcf6 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go lower!");
 8004a8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a90:	49b0      	ldr	r1, [pc, #704]	; (8004d54 <main+0x72c>)
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fcc2 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8004a98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fce9 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[0]);
 8004aa6:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fc9a 	bl	80043ec <Lcd_int>
				break;
 8004ab8:	e00d      	b.n	8004ad6 <main+0x4ae>
				htim2.Instance->CCR2 = 0; //% Duty Cycle
 8004aba:	4ba7      	ldr	r3, [pc, #668]	; (8004d58 <main+0x730>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
				menuState = 11;
 8004ac2:	230b      	movs	r3, #11
 8004ac4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8004ac8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004acc:	469c      	mov	ip, r3
 8004ace:	f7ff fd95 	bl	80045fc <resetAll.10015>
				break;
 8004ad2:	e000      	b.n	8004ad6 <main+0x4ae>
			}
		}
 8004ad4:	bf00      	nop

		//Vibration Menu
		if (menuState == 112)
 8004ad6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8004ada:	2b70      	cmp	r3, #112	; 0x70
 8004adc:	f040 8099 	bne.w	8004c12 <main+0x5ea>
		{
			Lcd_string(&lcd, "Vibration");
 8004ae0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ae4:	499d      	ldr	r1, [pc, #628]	; (8004d5c <main+0x734>)
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fc98 	bl	800441c <Lcd_string>

			htim3.Instance->CCR1 = dutyCycles[1]; //% Duty Cycle
 8004aec:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8004af0:	4b9b      	ldr	r3, [pc, #620]	; (8004d60 <main+0x738>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

			returnKey = keypadRead();
 8004af6:	f7ff fb45 	bl	8004184 <keypadRead>
 8004afa:	4603      	mov	r3, r0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey) {
 8004b02:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8004b06:	2b07      	cmp	r3, #7
 8004b08:	d076      	beq.n	8004bf8 <main+0x5d0>
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	d03b      	beq.n	8004b86 <main+0x55e>
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d000      	beq.n	8004b14 <main+0x4ec>
				menuState = 11;
				resetAll();
				break;

			default:
				break;
 8004b12:	e07f      	b.n	8004c14 <main+0x5ec>
				if(dutyCycles[1] < 90)
 8004b14:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004b18:	2b59      	cmp	r3, #89	; 0x59
 8004b1a:	d816      	bhi.n	8004b4a <main+0x522>
					dutyCycles[1] += 10;
 8004b1c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004b20:	330a      	adds	r3, #10
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
					Lcd_cursor(&lcd, 2, 8);
 8004b28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fca1 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 8004b36:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fc52 	bl	80043ec <Lcd_int>
				break;
 8004b48:	e064      	b.n	8004c14 <main+0x5ec>
					Lcd_cursor(&lcd, 1, 1);
 8004b4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fc90 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go higher!");
 8004b58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b5c:	497c      	ldr	r1, [pc, #496]	; (8004d50 <main+0x728>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fc5c 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8004b64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b68:	2208      	movs	r2, #8
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fc83 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 8004b72:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004b76:	461a      	mov	r2, r3
 8004b78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fc34 	bl	80043ec <Lcd_int>
				break;
 8004b84:	e046      	b.n	8004c14 <main+0x5ec>
				if (dutyCycles[1] > 0) {
 8004b86:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <main+0x594>
					dutyCycles[1] -= 10;
 8004b8e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004b92:	3b0a      	subs	r3, #10
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
					Lcd_cursor(&lcd, 2, 8);
 8004b9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fc68 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 8004ba8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004bac:	461a      	mov	r2, r3
 8004bae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fc19 	bl	80043ec <Lcd_int>
				break;
 8004bba:	e02b      	b.n	8004c14 <main+0x5ec>
					Lcd_cursor(&lcd, 1, 2);
 8004bbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fc57 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go lower!");
 8004bca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bce:	4961      	ldr	r1, [pc, #388]	; (8004d54 <main+0x72c>)
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fc23 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8004bd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bda:	2208      	movs	r2, #8
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fc4a 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[1]);
 8004be4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004be8:	461a      	mov	r2, r3
 8004bea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fbfb 	bl	80043ec <Lcd_int>
				break;
 8004bf6:	e00d      	b.n	8004c14 <main+0x5ec>
				htim3.Instance->CCR1 = 0; //% Duty Cycle
 8004bf8:	4b59      	ldr	r3, [pc, #356]	; (8004d60 <main+0x738>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	635a      	str	r2, [r3, #52]	; 0x34
				menuState = 11;
 8004c00:	230b      	movs	r3, #11
 8004c02:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8004c06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c0a:	469c      	mov	ip, r3
 8004c0c:	f7ff fcf6 	bl	80045fc <resetAll.10015>
				break;
 8004c10:	e000      	b.n	8004c14 <main+0x5ec>
			}
		}
 8004c12:	bf00      	nop

		//LED Menu
		if (menuState == 113)
 8004c14:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8004c18:	2b71      	cmp	r3, #113	; 0x71
 8004c1a:	f040 80a7 	bne.w	8004d6c <main+0x744>
		{
			Lcd_string(&lcd, "LED");
 8004c1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c22:	4950      	ldr	r1, [pc, #320]	; (8004d64 <main+0x73c>)
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fbf9 	bl	800441c <Lcd_string>

			htim4.Instance->CCR1 = dutyCycles[2]; //% Duty Cycle
 8004c2a:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 8004c2e:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <main+0x740>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	635a      	str	r2, [r3, #52]	; 0x34

			returnKey = keypadRead();
 8004c34:	f7ff faa6 	bl	8004184 <keypadRead>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey) {
 8004c40:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8004c44:	2b07      	cmp	r3, #7
 8004c46:	d076      	beq.n	8004d36 <main+0x70e>
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d03b      	beq.n	8004cc4 <main+0x69c>
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d000      	beq.n	8004c52 <main+0x62a>
				menuState = 11;
				resetAll();
				break;

			default:
				break;
 8004c50:	e08d      	b.n	8004d6e <main+0x746>
				if(dutyCycles[2] < 100)
 8004c52:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c56:	2b63      	cmp	r3, #99	; 0x63
 8004c58:	d816      	bhi.n	8004c88 <main+0x660>
					dutyCycles[2] += 10;
 8004c5a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c5e:	330a      	adds	r3, #10
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
					Lcd_cursor(&lcd, 2, 8);
 8004c66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fc02 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 8004c74:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fbb3 	bl	80043ec <Lcd_int>
				break;
 8004c86:	e072      	b.n	8004d6e <main+0x746>
					Lcd_cursor(&lcd, 1, 1);
 8004c88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff fbf1 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go higher!");
 8004c96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c9a:	492d      	ldr	r1, [pc, #180]	; (8004d50 <main+0x728>)
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fbbd 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8004ca2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	2102      	movs	r1, #2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fbe4 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 8004cb0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fb95 	bl	80043ec <Lcd_int>
				break;
 8004cc2:	e054      	b.n	8004d6e <main+0x746>
				if (dutyCycles[2] > 0) {
 8004cc4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <main+0x6d2>
					dutyCycles[2] -= 10;
 8004ccc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cd0:	3b0a      	subs	r3, #10
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
					Lcd_cursor(&lcd, 2, 8);
 8004cd8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cdc:	2208      	movs	r2, #8
 8004cde:	2102      	movs	r1, #2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fbc9 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 8004ce6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cea:	461a      	mov	r2, r3
 8004cec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fb7a 	bl	80043ec <Lcd_int>
				break;
 8004cf8:	e039      	b.n	8004d6e <main+0x746>
					Lcd_cursor(&lcd, 1, 2);
 8004cfa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cfe:	2202      	movs	r2, #2
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fbb8 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Cannot go lower!");
 8004d08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d0c:	4911      	ldr	r1, [pc, #68]	; (8004d54 <main+0x72c>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fb84 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, 8);
 8004d14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d18:	2208      	movs	r2, #8
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fbab 	bl	8004478 <Lcd_cursor>
					Lcd_int(&lcd, dutyCycles[2]);
 8004d22:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d26:	461a      	mov	r2, r3
 8004d28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fb5c 	bl	80043ec <Lcd_int>
				break;
 8004d34:	e01b      	b.n	8004d6e <main+0x746>
				htim4.Instance->CCR1 = 0; //% Duty Cycle
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <main+0x740>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	635a      	str	r2, [r3, #52]	; 0x34
				menuState = 11;
 8004d3e:	230b      	movs	r3, #11
 8004d40:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8004d44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d48:	469c      	mov	ip, r3
 8004d4a:	f7ff fc57 	bl	80045fc <resetAll.10015>
				break;
 8004d4e:	e00e      	b.n	8004d6e <main+0x746>
 8004d50:	08008324 	.word	0x08008324
 8004d54:	08008338 	.word	0x08008338
 8004d58:	2000031c 	.word	0x2000031c
 8004d5c:	0800834c 	.word	0x0800834c
 8004d60:	20000208 	.word	0x20000208
 8004d64:	08008358 	.word	0x08008358
 8004d68:	20000188 	.word	0x20000188
			}
		}
 8004d6c:	bf00      	nop

		//Name Menu
		if (menuState == 114)
 8004d6e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8004d72:	2b72      	cmp	r3, #114	; 0x72
 8004d74:	f040 8231 	bne.w	80051da <main+0xbb2>
		{
			int8_t alphaRow = 1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
			int8_t alphaCol = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
			int8_t namePos = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
			int8_t cursorCol = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3

			Lcd_clear(&lcd);
 8004d90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fb89 	bl	80044ac <Lcd_clear>
			Lcd_string(&lcd, "Name");
 8004d9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d9e:	49de      	ldr	r1, [pc, #888]	; (8005118 <main+0xaf0>)
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fb3b 	bl	800441c <Lcd_string>
			Lcd_cursor(&lcd, 2, 1);
 8004da6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004daa:	2201      	movs	r2, #1
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fb62 	bl	8004478 <Lcd_cursor>
			Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8004db4:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8004db8:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8004dbc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00da      	lsls	r2, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	4403      	add	r3, r0
 8004dcc:	440b      	add	r3, r1
 8004dce:	781a      	ldrb	r2, [r3, #0]
 8004dd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fb3e 	bl	8004458 <Lcd_char>

			do{
				Lcd_cursor(&lcd, 3, 1);
 8004ddc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004de0:	2201      	movs	r2, #1
 8004de2:	2103      	movs	r1, #3
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fb47 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, userName);
 8004dea:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8004dee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fb11 	bl	800441c <Lcd_string>

				returnKey = keypadRead();
 8004dfa:	f7ff f9c3 	bl	8004184 <keypadRead>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

				switch (returnKey) {
 8004e06:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	2b0e      	cmp	r3, #14
 8004e0e:	f200 81dc 	bhi.w	80051ca <main+0xba2>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <main+0x7f0>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e55 	.word	0x08004e55
 8004e1c:	080051cb 	.word	0x080051cb
 8004e20:	080051cb 	.word	0x080051cb
 8004e24:	08004eab 	.word	0x08004eab
 8004e28:	08004f01 	.word	0x08004f01
 8004e2c:	08004fbd 	.word	0x08004fbd
 8004e30:	080051b9 	.word	0x080051b9
 8004e34:	080051cb 	.word	0x080051cb
 8004e38:	08005013 	.word	0x08005013
 8004e3c:	080051cb 	.word	0x080051cb
 8004e40:	08005069 	.word	0x08005069
 8004e44:	080051cb 	.word	0x080051cb
 8004e48:	080051cb 	.word	0x080051cb
 8004e4c:	080051cb 	.word	0x080051cb
 8004e50:	08005125 	.word	0x08005125
				//Alphabet Increase
				case 1:
					alphaCol++;
 8004e54:	f997 31f5 	ldrsb.w	r3, [r7, #501]	; 0x1f5
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
					if(alphaCol > 26)
 8004e62:	f997 31f5 	ldrsb.w	r3, [r7, #501]	; 0x1f5
 8004e66:	2b1a      	cmp	r3, #26
 8004e68:	dd02      	ble.n	8004e70 <main+0x848>
					{
						alphaCol = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8004e70:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8004e74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004e78:	2102      	movs	r1, #2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fafc 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8004e80:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8004e84:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8004e88:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	00da      	lsls	r2, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	4403      	add	r3, r0
 8004e98:	440b      	add	r3, r1
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fad8 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8004ea8:	e192      	b.n	80051d0 <main+0xba8>

					//Alphabet Caps
				case 4:
					alphaRow++;
 8004eaa:	f997 31f6 	ldrsb.w	r3, [r7, #502]	; 0x1f6
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
					if(alphaRow > 1)
 8004eb8:	f997 31f6 	ldrsb.w	r3, [r7, #502]	; 0x1f6
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	dd02      	ble.n	8004ec6 <main+0x89e>
					{
						alphaRow = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8004ec6:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8004eca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ece:	2102      	movs	r1, #2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fad1 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8004ed6:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8004eda:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8004ede:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00da      	lsls	r2, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	4403      	add	r3, r0
 8004eee:	440b      	add	r3, r1
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff faad 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8004efe:	e167      	b.n	80051d0 <main+0xba8>

					//Char parse
				case 5:
					if(namePos <= 17)
 8004f00:	f997 31f4 	ldrsb.w	r3, [r7, #500]	; 0x1f4
 8004f04:	2b11      	cmp	r3, #17
 8004f06:	dc47      	bgt.n	8004f98 <main+0x970>
					{
						//Store letter in name array
						userName[namePos] = alphabets[alphaRow][alphaCol];
 8004f08:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8004f0c:	f997 01f5 	ldrsb.w	r0, [r7, #501]	; 0x1f5
 8004f10:	f997 11f4 	ldrsb.w	r1, [r7, #500]	; 0x1f4
 8004f14:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004f18:	4613      	mov	r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00da      	lsls	r2, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	4423      	add	r3, r4
 8004f24:	4403      	add	r3, r0
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f2c:	545a      	strb	r2, [r3, r1]
						namePos++;
 8004f2e:	f997 31f4 	ldrsb.w	r3, [r7, #500]	; 0x1f4
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4

						//Dont let cursor exceed 18 chars
						if (cursorCol < 18)
 8004f3c:	f997 31f3 	ldrsb.w	r3, [r7, #499]	; 0x1f3
 8004f40:	2b11      	cmp	r3, #17
 8004f42:	dc06      	bgt.n	8004f52 <main+0x92a>
						{
							cursorCol++;
 8004f44:	f997 31f3 	ldrsb.w	r3, [r7, #499]	; 0x1f3
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
						}
						alphaCol = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
						alphaRow = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6

						//Move cursor over one and reset alphabet
						Lcd_cursor(&lcd, 2, cursorCol);
 8004f5e:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8004f62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f66:	2102      	movs	r1, #2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fa85 	bl	8004478 <Lcd_cursor>
						Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8004f6e:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8004f72:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8004f76:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	00da      	lsls	r2, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	4403      	add	r3, r0
 8004f86:	440b      	add	r3, r1
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fa61 	bl	8004458 <Lcd_char>
						//Dont let username exceed 18 chars
						Lcd_cursor(&lcd, 3, 0);
						Lcd_string(&lcd, "    Max letters!    ");
						HAL_Delay(750);
					}
					break;
 8004f96:	e11b      	b.n	80051d0 <main+0xba8>
						Lcd_cursor(&lcd, 3, 0);
 8004f98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fa69 	bl	8004478 <Lcd_cursor>
						Lcd_string(&lcd, "    Max letters!    ");
 8004fa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004faa:	495c      	ldr	r1, [pc, #368]	; (800511c <main+0xaf4>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fa35 	bl	800441c <Lcd_string>
						HAL_Delay(750);
 8004fb2:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004fb6:	f7fb f9c9 	bl	800034c <HAL_Delay>
					break;
 8004fba:	e109      	b.n	80051d0 <main+0xba8>

					//Alphabet Caps
				case 6:
					alphaRow--;
 8004fbc:	f997 31f6 	ldrsb.w	r3, [r7, #502]	; 0x1f6
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
					if(alphaRow < 0)
 8004fca:	f997 31f6 	ldrsb.w	r3, [r7, #502]	; 0x1f6
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	da02      	bge.n	8004fd8 <main+0x9b0>
					{
						alphaRow = 1;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8004fd8:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8004fdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fa48 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8004fe8:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8004fec:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8004ff0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4403      	add	r3, r0
 8005000:	440b      	add	r3, r1
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fa24 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005010:	e0de      	b.n	80051d0 <main+0xba8>

					//Alphabet Decrease
				case 9:
					alphaCol--;
 8005012:	f997 31f5 	ldrsb.w	r3, [r7, #501]	; 0x1f5
 8005016:	b2db      	uxtb	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
					if(alphaCol < 0)
 8005020:	f997 31f5 	ldrsb.w	r3, [r7, #501]	; 0x1f5
 8005024:	2b00      	cmp	r3, #0
 8005026:	da02      	bge.n	800502e <main+0xa06>
					{
						alphaCol = 26;
 8005028:	231a      	movs	r3, #26
 800502a:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 800502e:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8005032:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005036:	2102      	movs	r1, #2
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fa1d 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800503e:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8005042:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8005046:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	00da      	lsls	r2, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	4403      	add	r3, r0
 8005056:	440b      	add	r3, r1
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff f9f9 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005066:	e0b3      	b.n	80051d0 <main+0xba8>

					//Clear Username
				case 11:
					for (int k = 0; k < sizeof(userName); k++)
 8005068:	2300      	movs	r3, #0
 800506a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800506e:	e00b      	b.n	8005088 <main+0xa60>
					{
						userName[k] = ' ';
 8005070:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005074:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005078:	4413      	add	r3, r2
 800507a:	2220      	movs	r2, #32
 800507c:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k < sizeof(userName); k++)
 800507e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005082:	3301      	adds	r3, #1
 8005084:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005088:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800508c:	2b12      	cmp	r3, #18
 800508e:	d9ef      	bls.n	8005070 <main+0xa48>
					}

					alphaRow = 1;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
					alphaCol = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
					namePos = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
					cursorCol = 1;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3

					Lcd_cursor(&lcd, 3, 0);
 80050a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ac:	2200      	movs	r2, #0
 80050ae:	2103      	movs	r1, #3
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff f9e1 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "                    ");
 80050b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ba:	4919      	ldr	r1, [pc, #100]	; (8005120 <main+0xaf8>)
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff f9ad 	bl	800441c <Lcd_string>

					Lcd_cursor(&lcd, 2, cursorCol);
 80050c2:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 80050c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff f9d3 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "                    ");
 80050d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050d6:	4912      	ldr	r1, [pc, #72]	; (8005120 <main+0xaf8>)
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff f99f 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, cursorCol);
 80050de:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 80050e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80050e6:	2102      	movs	r1, #2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff f9c5 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 80050ee:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 80050f2:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 80050f6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80050fa:	4613      	mov	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	4413      	add	r3, r2
 8005100:	00da      	lsls	r2, r3, #3
 8005102:	4413      	add	r3, r2
 8005104:	4403      	add	r3, r0
 8005106:	440b      	add	r3, r1
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff f9a1 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005116:	e05b      	b.n	80051d0 <main+0xba8>
 8005118:	0800835c 	.word	0x0800835c
 800511c:	08008364 	.word	0x08008364
 8005120:	0800837c 	.word	0x0800837c

					//"Backspace"
				case 15:
					if(namePos > 0)
 8005124:	f997 31f4 	ldrsb.w	r3, [r7, #500]	; 0x1f4
 8005128:	2b00      	cmp	r3, #0
 800512a:	dd50      	ble.n	80051ce <main+0xba6>
					{
						userName[namePos-1] = ' ';
 800512c:	f997 31f4 	ldrsb.w	r3, [r7, #500]	; 0x1f4
 8005130:	3b01      	subs	r3, #1
 8005132:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8005136:	2120      	movs	r1, #32
 8005138:	54d1      	strb	r1, [r2, r3]
						namePos -= 1;
 800513a:	f897 31f4 	ldrb.w	r3, [r7, #500]	; 0x1f4
 800513e:	3b01      	subs	r3, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
						cursorCol -= 1;
 8005146:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 800514a:	3b01      	subs	r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
						alphaRow = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
						alphaCol = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5

						Lcd_cursor(&lcd, 2, cursorCol+1);
 800515e:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 8005162:	3301      	adds	r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f983 	bl	8004478 <Lcd_cursor>
						Lcd_char(&lcd, ' ');
 8005172:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005176:	2120      	movs	r1, #32
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff f96d 	bl	8004458 <Lcd_char>
						Lcd_cursor(&lcd, 2, cursorCol);
 800517e:	f897 21f3 	ldrb.w	r2, [r7, #499]	; 0x1f3
 8005182:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005186:	2102      	movs	r1, #2
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff f975 	bl	8004478 <Lcd_cursor>
						Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800518e:	f997 21f6 	ldrsb.w	r2, [r7, #502]	; 0x1f6
 8005192:	f997 11f5 	ldrsb.w	r1, [r7, #501]	; 0x1f5
 8005196:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	00da      	lsls	r2, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	4403      	add	r3, r0
 80051a6:	440b      	add	r3, r1
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff f951 	bl	8004458 <Lcd_char>
						//HAL_Delay(300);
					}
					break;
 80051b6:	e00a      	b.n	80051ce <main+0xba6>

					//Back
				case 7:
					menuState = 11;
 80051b8:	230b      	movs	r3, #11
 80051ba:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
					resetAll();
 80051be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80051c2:	469c      	mov	ip, r3
 80051c4:	f7ff fa1a 	bl	80045fc <resetAll.10015>
					break;
 80051c8:	e002      	b.n	80051d0 <main+0xba8>

				default:
					break;
 80051ca:	bf00      	nop
 80051cc:	e000      	b.n	80051d0 <main+0xba8>
					break;
 80051ce:	bf00      	nop
				}
			}while(menuState != 11);
 80051d0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80051d4:	2b0b      	cmp	r3, #11
 80051d6:	f47f ae01 	bne.w	8004ddc <main+0x7b4>
		}

		//Call Response edit menu
		if(menuState == 115)
 80051da:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80051de:	2b73      	cmp	r3, #115	; 0x73
 80051e0:	f040 82f6 	bne.w	80057d0 <main+0x11a8>
		{
			int8_t alphaRow = 1;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
			int8_t alphaCol = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
			int8_t namePos = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
			int8_t cursorCol = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8
			int8_t chosen = -1;
 80051fc:	23ff      	movs	r3, #255	; 0xff
 80051fe:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7

			if(!set)
 8005202:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d054      	beq.n	80052ba <main+0xc92>
			{
				Lcd_cursor(&lcd, 0, 1);
 8005210:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005214:	2201      	movs	r2, #1
 8005216:	2100      	movs	r1, #0
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff f92d 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "Choose to edit...");
 800521e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005222:	49dc      	ldr	r1, [pc, #880]	; (8005594 <main+0xf6c>)
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff f8f9 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 800522a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800522e:	2200      	movs	r2, #0
 8005230:	2101      	movs	r1, #1
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f920 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "1.");
 8005238:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800523c:	49d6      	ldr	r1, [pc, #856]	; (8005598 <main+0xf70>)
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f8ec 	bl	800441c <Lcd_string>
				Lcd_string(&lcd, profResponses[0]);
 8005244:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005248:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 800524c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff f8e2 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 2, 0);
 8005258:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800525c:	2200      	movs	r2, #0
 800525e:	2102      	movs	r1, #2
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f909 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "2.");
 8005266:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800526a:	49cc      	ldr	r1, [pc, #816]	; (800559c <main+0xf74>)
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff f8d5 	bl	800441c <Lcd_string>
				Lcd_string(&lcd, profResponses[1]);
 8005272:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005276:	f103 0252 	add.w	r2, r3, #82	; 0x52
 800527a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f8cb 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 3, 0);
 8005286:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800528a:	2200      	movs	r2, #0
 800528c:	2103      	movs	r1, #3
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff f8f2 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "3.");
 8005294:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005298:	49c1      	ldr	r1, [pc, #772]	; (80055a0 <main+0xf78>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff f8be 	bl	800441c <Lcd_string>
				Lcd_string(&lcd, profResponses[2]);
 80052a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052a4:	f103 0265 	add.w	r2, r3, #101	; 0x65
 80052a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f8b4 	bl	800441c <Lcd_string>
				set = true;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
			}

			returnKey = keypadRead();
 80052ba:	f7fe ff63 	bl	8004184 <keypadRead>
 80052be:	4603      	mov	r3, r0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey) {
 80052c6:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	f200 827a 	bhi.w	80057c4 <main+0x119c>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <main+0xcb0>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052f9 	.word	0x080052f9
 80052dc:	0800530b 	.word	0x0800530b
 80052e0:	0800531d 	.word	0x0800531d
 80052e4:	080057c5 	.word	0x080057c5
 80052e8:	080057c5 	.word	0x080057c5
 80052ec:	080057c5 	.word	0x080057c5
 80052f0:	080057c5 	.word	0x080057c5
 80052f4:	0800532f 	.word	0x0800532f

			//Response 1
			case 0:
				chosen = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
				resetAll();
 80052fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005302:	469c      	mov	ip, r3
 8005304:	f7ff f97a 	bl	80045fc <resetAll.10015>
				break;
 8005308:	e01a      	b.n	8005340 <main+0xd18>

				//Response 2
			case 1:
				chosen = 1;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
				resetAll();
 8005310:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005314:	469c      	mov	ip, r3
 8005316:	f7ff f971 	bl	80045fc <resetAll.10015>
				break;
 800531a:	e011      	b.n	8005340 <main+0xd18>

				//Response 3
			case 2:
				chosen = 2;
 800531c:	2302      	movs	r3, #2
 800531e:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
				resetAll();
 8005322:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005326:	469c      	mov	ip, r3
 8005328:	f7ff f968 	bl	80045fc <resetAll.10015>
				break;
 800532c:	e008      	b.n	8005340 <main+0xd18>

				//Back
			case 7:
				menuState = 11;
 800532e:	230b      	movs	r3, #11
 8005330:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8005334:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005338:	469c      	mov	ip, r3
 800533a:	f7ff f95f 	bl	80045fc <resetAll.10015>
				break;
 800533e:	bf00      	nop

			}

			while(chosen != -1){
 8005340:	e240      	b.n	80057c4 <main+0x119c>

				if(!set){
 8005342:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8005346:	f083 0301 	eor.w	r3, r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d033      	beq.n	80053b8 <main+0xd90>
					Lcd_cursor(&lcd, 0, 5);
 8005350:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005354:	2205      	movs	r2, #5
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff f88d 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "Response ");
 800535e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005362:	4990      	ldr	r1, [pc, #576]	; (80055a4 <main+0xf7c>)
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff f859 	bl	800441c <Lcd_string>
					Lcd_int(&lcd, chosen + 1);
 800536a:	f997 31e7 	ldrsb.w	r3, [r7, #487]	; 0x1e7
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f838 	bl	80043ec <Lcd_int>
					Lcd_cursor(&lcd, 2, 1);
 800537c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005380:	2201      	movs	r2, #1
 8005382:	2102      	movs	r1, #2
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff f877 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800538a:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 800538e:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 8005392:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	00da      	lsls	r2, r3, #3
 800539e:	4413      	add	r3, r2
 80053a0:	4403      	add	r3, r0
 80053a2:	440b      	add	r3, r1
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff f853 	bl	8004458 <Lcd_char>
					set = true;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
				}


				returnKey = keypadRead();
 80053b8:	f7fe fee4 	bl	8004184 <keypadRead>
 80053bc:	4603      	mov	r3, r0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

				switch (returnKey) {
 80053c4:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 80053c8:	3b01      	subs	r3, #1
 80053ca:	2b0e      	cmp	r3, #14
 80053cc:	f200 81f9 	bhi.w	80057c2 <main+0x119a>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <main+0xdb0>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	08005415 	.word	0x08005415
 80053dc:	080057c3 	.word	0x080057c3
 80053e0:	080057c3 	.word	0x080057c3
 80053e4:	0800546b 	.word	0x0800546b
 80053e8:	080054c1 	.word	0x080054c1
 80053ec:	080055ad 	.word	0x080055ad
 80053f0:	080057ab 	.word	0x080057ab
 80053f4:	080057c3 	.word	0x080057c3
 80053f8:	08005603 	.word	0x08005603
 80053fc:	080057c3 	.word	0x080057c3
 8005400:	08005659 	.word	0x08005659
 8005404:	080057c3 	.word	0x080057c3
 8005408:	080057c3 	.word	0x080057c3
 800540c:	080057c3 	.word	0x080057c3
 8005410:	08005703 	.word	0x08005703
				//Alphabet Increase
				case 1:
					alphaCol++;
 8005414:	f997 31ea 	ldrsb.w	r3, [r7, #490]	; 0x1ea
 8005418:	b2db      	uxtb	r3, r3
 800541a:	3301      	adds	r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
					if(alphaCol > 26)
 8005422:	f997 31ea 	ldrsb.w	r3, [r7, #490]	; 0x1ea
 8005426:	2b1a      	cmp	r3, #26
 8005428:	dd02      	ble.n	8005430 <main+0xe08>
					{
						alphaCol = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8005430:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 8005434:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff f81c 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8005440:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 8005444:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 8005448:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	00da      	lsls	r2, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	4403      	add	r3, r0
 8005458:	440b      	add	r3, r1
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005460:	4611      	mov	r1, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fff8 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005468:	e1ac      	b.n	80057c4 <main+0x119c>

					//Alphabet Caps
				case 4:
					alphaRow++;
 800546a:	f997 31eb 	ldrsb.w	r3, [r7, #491]	; 0x1eb
 800546e:	b2db      	uxtb	r3, r3
 8005470:	3301      	adds	r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
					if(alphaRow > 1)
 8005478:	f997 31eb 	ldrsb.w	r3, [r7, #491]	; 0x1eb
 800547c:	2b01      	cmp	r3, #1
 800547e:	dd02      	ble.n	8005486 <main+0xe5e>
					{
						alphaRow = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 8005486:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 800548a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe fff1 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8005496:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 800549a:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 800549e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	00da      	lsls	r2, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	4403      	add	r3, r0
 80054ae:	440b      	add	r3, r1
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe ffcd 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 80054be:	e181      	b.n	80057c4 <main+0x119c>

					//Char parse
				case 5:
					if(namePos <= 17)
 80054c0:	f997 31e9 	ldrsb.w	r3, [r7, #489]	; 0x1e9
 80054c4:	2b11      	cmp	r3, #17
 80054c6:	dc52      	bgt.n	800556e <main+0xf46>
					{
						//Store letter in name array
						profResponses[chosen][namePos] = alphabets[alphaRow][alphaCol];
 80054c8:	f997 11eb 	ldrsb.w	r1, [r7, #491]	; 0x1eb
 80054cc:	f997 41ea 	ldrsb.w	r4, [r7, #490]	; 0x1ea
 80054d0:	f997 21e7 	ldrsb.w	r2, [r7, #487]	; 0x1e7
 80054d4:	f997 01e9 	ldrsb.w	r0, [r7, #489]	; 0x1e9
 80054d8:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80054dc:	460b      	mov	r3, r1
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	440b      	add	r3, r1
 80054e2:	00d9      	lsls	r1, r3, #3
 80054e4:	440b      	add	r3, r1
 80054e6:	442b      	add	r3, r5
 80054e8:	4423      	add	r3, r4
 80054ea:	7819      	ldrb	r1, [r3, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	4413      	add	r3, r2
 80054f6:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80054fa:	4413      	add	r3, r2
 80054fc:	4403      	add	r3, r0
 80054fe:	3b99      	subs	r3, #153	; 0x99
 8005500:	460a      	mov	r2, r1
 8005502:	701a      	strb	r2, [r3, #0]
						namePos++;
 8005504:	f997 31e9 	ldrsb.w	r3, [r7, #489]	; 0x1e9
 8005508:	b2db      	uxtb	r3, r3
 800550a:	3301      	adds	r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9

						//Dont let cursor exceed 18 chars
						if (cursorCol < 18)
 8005512:	f997 31e8 	ldrsb.w	r3, [r7, #488]	; 0x1e8
 8005516:	2b11      	cmp	r3, #17
 8005518:	dc06      	bgt.n	8005528 <main+0xf00>
						{
							cursorCol++;
 800551a:	f997 31e8 	ldrsb.w	r3, [r7, #488]	; 0x1e8
 800551e:	b2db      	uxtb	r3, r3
 8005520:	3301      	adds	r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8
						}
						alphaCol = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
						alphaRow = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb

						//Move cursor over one and reset alphabet
						Lcd_cursor(&lcd, 2, cursorCol);
 8005534:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 8005538:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe ff9a 	bl	8004478 <Lcd_cursor>
						Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8005544:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 8005548:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 800554c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	00da      	lsls	r2, r3, #3
 8005558:	4413      	add	r3, r2
 800555a:	4403      	add	r3, r0
 800555c:	440b      	add	r3, r1
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe ff76 	bl	8004458 <Lcd_char>
 800556c:	e12a      	b.n	80057c4 <main+0x119c>
						//HAL_Delay(300);
					}else
					{
						//Dont let username exceed 18 chars
						Lcd_cursor(&lcd, 3, 0);
 800556e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005572:	2200      	movs	r2, #0
 8005574:	2103      	movs	r1, #3
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe ff7e 	bl	8004478 <Lcd_cursor>
						Lcd_string(&lcd, "    Max letters!    ");
 800557c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005580:	4909      	ldr	r1, [pc, #36]	; (80055a8 <main+0xf80>)
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe ff4a 	bl	800441c <Lcd_string>
						HAL_Delay(750);
 8005588:	f240 20ee 	movw	r0, #750	; 0x2ee
 800558c:	f7fa fede 	bl	800034c <HAL_Delay>
					}
					break;
 8005590:	e118      	b.n	80057c4 <main+0x119c>
 8005592:	bf00      	nop
 8005594:	08008394 	.word	0x08008394
 8005598:	080083a8 	.word	0x080083a8
 800559c:	080083ac 	.word	0x080083ac
 80055a0:	080083b0 	.word	0x080083b0
 80055a4:	080083b4 	.word	0x080083b4
 80055a8:	08008364 	.word	0x08008364

					//Alphabet Caps
				case 6:
					alphaRow--;
 80055ac:	f997 31eb 	ldrsb.w	r3, [r7, #491]	; 0x1eb
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
					if(alphaRow < 0)
 80055ba:	f997 31eb 	ldrsb.w	r3, [r7, #491]	; 0x1eb
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da02      	bge.n	80055c8 <main+0xfa0>
					{
						alphaRow = 1;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 80055c8:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 80055cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055d0:	2102      	movs	r1, #2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe ff50 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 80055d8:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 80055dc:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 80055e0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80055e4:	4613      	mov	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	4413      	add	r3, r2
 80055ea:	00da      	lsls	r2, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	4403      	add	r3, r0
 80055f0:	440b      	add	r3, r1
 80055f2:	781a      	ldrb	r2, [r3, #0]
 80055f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe ff2c 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005600:	e0e0      	b.n	80057c4 <main+0x119c>

					//Alphabet Decrease
				case 9:
					alphaCol--;
 8005602:	f997 31ea 	ldrsb.w	r3, [r7, #490]	; 0x1ea
 8005606:	b2db      	uxtb	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
					if(alphaCol < 0)
 8005610:	f997 31ea 	ldrsb.w	r3, [r7, #490]	; 0x1ea
 8005614:	2b00      	cmp	r3, #0
 8005616:	da02      	bge.n	800561e <main+0xff6>
					{
						alphaCol = 26;
 8005618:	231a      	movs	r3, #26
 800561a:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
					}

					Lcd_cursor(&lcd, 2, cursorCol);
 800561e:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 8005622:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005626:	2102      	movs	r1, #2
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe ff25 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 800562e:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 8005632:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 8005636:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	00da      	lsls	r2, r3, #3
 8005642:	4413      	add	r3, r2
 8005644:	4403      	add	r3, r0
 8005646:	440b      	add	r3, r1
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe ff01 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005656:	e0b5      	b.n	80057c4 <main+0x119c>

					//Clear
				case 11:

					memset(profResponses[chosen], 0, 19);
 8005658:	f997 21e7 	ldrsb.w	r2, [r7, #487]	; 0x1e7
 800565c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	3338      	adds	r3, #56	; 0x38
 800566c:	440b      	add	r3, r1
 800566e:	3307      	adds	r3, #7
 8005670:	2213      	movs	r2, #19
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f002 fa08 	bl	8007a8a <memset>

					alphaRow = 1;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
					alphaCol = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
					namePos = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
					cursorCol = 1;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8

					Lcd_cursor(&lcd, 3, 0);
 8005692:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005696:	2200      	movs	r2, #0
 8005698:	2103      	movs	r1, #3
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe feec 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "                    ");
 80056a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056a4:	499d      	ldr	r1, [pc, #628]	; (800591c <main+0x12f4>)
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe feb8 	bl	800441c <Lcd_string>

					Lcd_cursor(&lcd, 2, cursorCol);
 80056ac:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 80056b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056b4:	2102      	movs	r1, #2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe fede 	bl	8004478 <Lcd_cursor>
					Lcd_string(&lcd, "                    ");
 80056bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056c0:	4996      	ldr	r1, [pc, #600]	; (800591c <main+0x12f4>)
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe feaa 	bl	800441c <Lcd_string>
					Lcd_cursor(&lcd, 2, cursorCol);
 80056c8:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 80056cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056d0:	2102      	movs	r1, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fed0 	bl	8004478 <Lcd_cursor>
					Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 80056d8:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 80056dc:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 80056e0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	00da      	lsls	r2, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	4403      	add	r3, r0
 80056f0:	440b      	add	r3, r1
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe feac 	bl	8004458 <Lcd_char>
					//HAL_Delay(300);
					break;
 8005700:	e060      	b.n	80057c4 <main+0x119c>

					//"Backspace"
				case 15:
					if(namePos > 0)
 8005702:	f997 31e9 	ldrsb.w	r3, [r7, #489]	; 0x1e9
 8005706:	2b00      	cmp	r3, #0
 8005708:	dd5c      	ble.n	80057c4 <main+0x119c>
					{
						profResponses[chosen][namePos-1] = ' ';
 800570a:	f997 21e7 	ldrsb.w	r2, [r7, #487]	; 0x1e7
 800570e:	f997 31e9 	ldrsb.w	r3, [r7, #489]	; 0x1e9
 8005712:	1e59      	subs	r1, r3, #1
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8005722:	4413      	add	r3, r2
 8005724:	440b      	add	r3, r1
 8005726:	3b99      	subs	r3, #153	; 0x99
 8005728:	2220      	movs	r2, #32
 800572a:	701a      	strb	r2, [r3, #0]
						namePos -= 1;
 800572c:	f897 31e9 	ldrb.w	r3, [r7, #489]	; 0x1e9
 8005730:	3b01      	subs	r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
						cursorCol -= 1;
 8005738:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 800573c:	3b01      	subs	r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8
						alphaRow = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
						alphaCol = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea

						Lcd_cursor(&lcd, 2, cursorCol+1);
 8005750:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 8005754:	3301      	adds	r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fe8a 	bl	8004478 <Lcd_cursor>
						Lcd_char(&lcd, ' ');
 8005764:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005768:	2120      	movs	r1, #32
 800576a:	4618      	mov	r0, r3
 800576c:	f7fe fe74 	bl	8004458 <Lcd_char>
						Lcd_cursor(&lcd, 2, cursorCol);
 8005770:	f897 21e8 	ldrb.w	r2, [r7, #488]	; 0x1e8
 8005774:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005778:	2102      	movs	r1, #2
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fe7c 	bl	8004478 <Lcd_cursor>
						Lcd_char(&lcd, alphabets[alphaRow][alphaCol]);
 8005780:	f997 21eb 	ldrsb.w	r2, [r7, #491]	; 0x1eb
 8005784:	f997 11ea 	ldrsb.w	r1, [r7, #490]	; 0x1ea
 8005788:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	00da      	lsls	r2, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	4403      	add	r3, r0
 8005798:	440b      	add	r3, r1
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fe58 	bl	8004458 <Lcd_char>
						//HAL_Delay(300);
					}
					break;
 80057a8:	e00c      	b.n	80057c4 <main+0x119c>

					//Back
				case 7:
					menuState = 115;
 80057aa:	2373      	movs	r3, #115	; 0x73
 80057ac:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
					chosen = -1;
 80057b0:	23ff      	movs	r3, #255	; 0xff
 80057b2:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
					resetAll();
 80057b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057ba:	469c      	mov	ip, r3
 80057bc:	f7fe ff1e 	bl	80045fc <resetAll.10015>
					break;
 80057c0:	e000      	b.n	80057c4 <main+0x119c>

				default:
					break;
 80057c2:	bf00      	nop
			while(chosen != -1){
 80057c4:	f997 31e7 	ldrsb.w	r3, [r7, #487]	; 0x1e7
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	f47f adb9 	bne.w	8005342 <main+0xd1a>
				}
			}
		}

		//Status Menu
		if(menuState == 12)
 80057d0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	f040 809b 	bne.w	8005910 <main+0x12e8>
		{
			Lcd_cursor(&lcd, 0, 4);
 80057da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057de:	2204      	movs	r2, #4
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fe48 	bl	8004478 <Lcd_cursor>
			Lcd_string(&lcd, "Pick Status");
 80057e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057ec:	494c      	ldr	r1, [pc, #304]	; (8005920 <main+0x12f8>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fe14 	bl	800441c <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80057f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057f8:	2200      	movs	r2, #0
 80057fa:	2101      	movs	r1, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fe3b 	bl	8004478 <Lcd_cursor>
			Lcd_string(&lcd, "1.Available  2.Busy");
 8005802:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005806:	4947      	ldr	r1, [pc, #284]	; (8005924 <main+0x12fc>)
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe fe07 	bl	800441c <Lcd_string>
			Lcd_cursor(&lcd, 2, 0);
 800580e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005812:	2200      	movs	r2, #0
 8005814:	2102      	movs	r1, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fe2e 	bl	8004478 <Lcd_cursor>
			Lcd_string(&lcd, "3.Away");
 800581c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005820:	4941      	ldr	r1, [pc, #260]	; (8005928 <main+0x1300>)
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fdfa 	bl	800441c <Lcd_string>
			Lcd_cursor(&lcd, 3, 0);
 8005828:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800582c:	2200      	movs	r2, #0
 800582e:	2103      	movs	r1, #3
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fe21 	bl	8004478 <Lcd_cursor>
			Lcd_string(&lcd, "Current: ");
 8005836:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800583a:	493c      	ldr	r1, [pc, #240]	; (800592c <main+0x1304>)
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe fded 	bl	800441c <Lcd_string>
			Lcd_cursor(&lcd, 3, 9);
 8005842:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005846:	2209      	movs	r2, #9
 8005848:	2103      	movs	r1, #3
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fe14 	bl	8004478 <Lcd_cursor>
			Lcd_string(&lcd, userStatus);
 8005850:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8005854:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fdde 	bl	800441c <Lcd_string>

			returnKey = keypadRead();
 8005860:	f7fe fc90 	bl	8004184 <keypadRead>
 8005864:	4603      	mov	r3, r0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e

			switch (returnKey) {
 800586c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8005870:	2b07      	cmp	r3, #7
 8005872:	d850      	bhi.n	8005916 <main+0x12ee>
 8005874:	a201      	add	r2, pc, #4	; (adr r2, 800587c <main+0x1254>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	0800589d 	.word	0x0800589d
 8005880:	080058bb 	.word	0x080058bb
 8005884:	080058dd 	.word	0x080058dd
 8005888:	08005917 	.word	0x08005917
 800588c:	08005917 	.word	0x08005917
 8005890:	08005917 	.word	0x08005917
 8005894:	08005917 	.word	0x08005917
 8005898:	080058ff 	.word	0x080058ff
			case 0:
				strcpy(userStatus, "Available");
 800589c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80058a0:	4a23      	ldr	r2, [pc, #140]	; (8005930 <main+0x1308>)
 80058a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80058a4:	c303      	stmia	r3!, {r0, r1}
 80058a6:	801a      	strh	r2, [r3, #0]
				menuState = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80058ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058b2:	469c      	mov	ip, r3
 80058b4:	f7fe fea2 	bl	80045fc <resetAll.10015>
				break;
 80058b8:	e02e      	b.n	8005918 <main+0x12f0>

			case 1:
				strcpy(userStatus, "Busy");
 80058ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <main+0x130c>)
 80058c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058c4:	6018      	str	r0, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	7019      	strb	r1, [r3, #0]
				menuState = 1;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80058d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058d4:	469c      	mov	ip, r3
 80058d6:	f7fe fe91 	bl	80045fc <resetAll.10015>
				break;
 80058da:	e01d      	b.n	8005918 <main+0x12f0>

			case 2:
				strcpy(userStatus, "Away");
 80058dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80058e0:	4a15      	ldr	r2, [pc, #84]	; (8005938 <main+0x1310>)
 80058e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058e6:	6018      	str	r0, [r3, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	7019      	strb	r1, [r3, #0]
				menuState = 1;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 80058f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058f6:	469c      	mov	ip, r3
 80058f8:	f7fe fe80 	bl	80045fc <resetAll.10015>
				break;
 80058fc:	e00c      	b.n	8005918 <main+0x12f0>
			case 4:

				break;

			case 7:
				menuState = 1;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
				resetAll();
 8005904:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005908:	469c      	mov	ip, r3
 800590a:	f7fe fe77 	bl	80045fc <resetAll.10015>
				break;
 800590e:	e003      	b.n	8005918 <main+0x12f0>

			default:
				break;
			}
		}
 8005910:	bf00      	nop
 8005912:	f7fe bf3b 	b.w	800478c <main+0x164>
				break;
 8005916:	bf00      	nop
		memset(TxData, 0, 32);
 8005918:	f7fe bf38 	b.w	800478c <main+0x164>
 800591c:	0800837c 	.word	0x0800837c
 8005920:	080083c0 	.word	0x080083c0
 8005924:	080083cc 	.word	0x080083cc
 8005928:	080083e0 	.word	0x080083e0
 800592c:	080083e8 	.word	0x080083e8
 8005930:	080083f4 	.word	0x080083f4
 8005934:	08008400 	.word	0x08008400
 8005938:	08008408 	.word	0x08008408

0800593c <txData.10019>:
	{
 800593c:	b5b0      	push	{r4, r5, r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	4664      	mov	r4, ip
 8005944:	f8c7 c004 	str.w	ip, [r7, #4]
		NRF24_stopListening();
 8005948:	f001 f8f4 	bl	8006b34 <NRF24_stopListening>
		if(NRF24_write(TxData, 32))
 800594c:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 8005950:	2120      	movs	r1, #32
 8005952:	4618      	mov	r0, r3
 8005954:	f001 f8fa 	bl	8006b4c <NRF24_write>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d014      	beq.n	8005988 <txData.10019+0x4c>
			HAL_UART_Transmit(&huart1, (uint8_t *)"\r\nTransmitted Successfully!\r\n", strlen("\r\nTransmitted Successfully!\r\n"), 10);
 800595e:	230a      	movs	r3, #10
 8005960:	221d      	movs	r2, #29
 8005962:	490e      	ldr	r1, [pc, #56]	; (800599c <txData.10019+0x60>)
 8005964:	480e      	ldr	r0, [pc, #56]	; (80059a0 <txData.10019+0x64>)
 8005966:	f7fe f84c 	bl	8003a02 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *)TxData, strlen(TxData), 10);
 800596a:	f104 058b 	add.w	r5, r4, #139	; 0x8b
 800596e:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 8005972:	4618      	mov	r0, r3
 8005974:	f7fa fc2c 	bl	80001d0 <strlen>
 8005978:	4603      	mov	r3, r0
 800597a:	b29a      	uxth	r2, r3
 800597c:	230a      	movs	r3, #10
 800597e:	4629      	mov	r1, r5
 8005980:	4807      	ldr	r0, [pc, #28]	; (80059a0 <txData.10019+0x64>)
 8005982:	f7fe f83e 	bl	8003a02 <HAL_UART_Transmit>
	}
 8005986:	e005      	b.n	8005994 <txData.10019+0x58>
			HAL_UART_Transmit(&huart1, (uint8_t *)"\r\nTransmitted Un-successfully!\r\n", strlen("\r\nTransmitted Un-successfully!\r\n"), 10);
 8005988:	230a      	movs	r3, #10
 800598a:	2220      	movs	r2, #32
 800598c:	4905      	ldr	r1, [pc, #20]	; (80059a4 <txData.10019+0x68>)
 800598e:	4804      	ldr	r0, [pc, #16]	; (80059a0 <txData.10019+0x64>)
 8005990:	f7fe f837 	bl	8003a02 <HAL_UART_Transmit>
	}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bdb0      	pop	{r4, r5, r7, pc}
 800599c:	080084ac 	.word	0x080084ac
 80059a0:	20000248 	.word	0x20000248
 80059a4:	080084cc 	.word	0x080084cc

080059a8 <responseScreen.10021>:
	{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4664      	mov	r4, ip
 80059b0:	f8c7 c004 	str.w	ip, [r7, #4]
		while(/*HAL_GetTick() < (ringDelay + 10000)*/ returnKey != 0 && returnKey != 1 && returnKey != 2)
 80059b4:	e06c      	b.n	8005a90 <responseScreen.10021+0xe8>
			if(!set){
 80059b6:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 80059ba:	f083 0301 	eor.w	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d032      	beq.n	8005a2a <responseScreen.10021+0x82>
				Lcd_string(&lcd, "1.");
 80059c4:	4623      	mov	r3, r4
 80059c6:	493c      	ldr	r1, [pc, #240]	; (8005ab8 <responseScreen.10021+0x110>)
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fd27 	bl	800441c <Lcd_string>
				Lcd_string(&lcd, profResponses[0]);
 80059ce:	4622      	mov	r2, r4
 80059d0:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7fe fd20 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 80059dc:	4623      	mov	r3, r4
 80059de:	2200      	movs	r2, #0
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fd48 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "2.");
 80059e8:	4623      	mov	r3, r4
 80059ea:	4934      	ldr	r1, [pc, #208]	; (8005abc <responseScreen.10021+0x114>)
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe fd15 	bl	800441c <Lcd_string>
				Lcd_string(&lcd, profResponses[1]);
 80059f2:	4622      	mov	r2, r4
 80059f4:	f104 0352 	add.w	r3, r4, #82	; 0x52
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fe fd0e 	bl	800441c <Lcd_string>
				Lcd_cursor(&lcd, 2, 0);
 8005a00:	4623      	mov	r3, r4
 8005a02:	2200      	movs	r2, #0
 8005a04:	2102      	movs	r1, #2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fd36 	bl	8004478 <Lcd_cursor>
				Lcd_string(&lcd, "3.");
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	492c      	ldr	r1, [pc, #176]	; (8005ac0 <responseScreen.10021+0x118>)
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe fd03 	bl	800441c <Lcd_string>
				Lcd_string(&lcd, profResponses[2]);
 8005a16:	4622      	mov	r2, r4
 8005a18:	f104 0365 	add.w	r3, r4, #101	; 0x65
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe fcfc 	bl	800441c <Lcd_string>
				set = true;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
			returnKey = keypadRead();
 8005a2a:	f7fe fbab 	bl	8004184 <keypadRead>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			switch (returnKey)
 8005a36:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d00f      	beq.n	8005a5e <responseScreen.10021+0xb6>
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d019      	beq.n	8005a76 <responseScreen.10021+0xce>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d123      	bne.n	8005a8e <responseScreen.10021+0xe6>
				strcpy(TxData, profResponses[0]);
 8005a46:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 8005a4a:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f002 f843 	bl	8007adc <strcpy>
				txData();
 8005a56:	46a4      	mov	ip, r4
 8005a58:	f7ff ff70 	bl	800593c <txData.10019>
				break;
 8005a5c:	e018      	b.n	8005a90 <responseScreen.10021+0xe8>
				strcpy(TxData, profResponses[1]);
 8005a5e:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 8005a62:	f104 0252 	add.w	r2, r4, #82	; 0x52
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 f837 	bl	8007adc <strcpy>
				txData();
 8005a6e:	46a4      	mov	ip, r4
 8005a70:	f7ff ff64 	bl	800593c <txData.10019>
				break;
 8005a74:	e00c      	b.n	8005a90 <responseScreen.10021+0xe8>
				strcpy(TxData, profResponses[2]);
 8005a76:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 8005a7a:	f104 0265 	add.w	r2, r4, #101	; 0x65
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 f82b 	bl	8007adc <strcpy>
				txData();
 8005a86:	46a4      	mov	ip, r4
 8005a88:	f7ff ff58 	bl	800593c <txData.10019>
				break;
 8005a8c:	e000      	b.n	8005a90 <responseScreen.10021+0xe8>
				break;
 8005a8e:	bf00      	nop
		while(/*HAL_GetTick() < (ringDelay + 10000)*/ returnKey != 0 && returnKey != 1 && returnKey != 2)
 8005a90:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <responseScreen.10021+0x100>
 8005a98:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d003      	beq.n	8005aa8 <responseScreen.10021+0x100>
 8005aa0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d186      	bne.n	80059b6 <responseScreen.10021+0xe>
		resetAll();
 8005aa8:	46a4      	mov	ip, r4
 8005aaa:	f7fe fda7 	bl	80045fc <resetAll.10015>
	}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd90      	pop	{r4, r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	080083a8 	.word	0x080083a8
 8005abc:	080083ac 	.word	0x080083ac
 8005ac0:	080083b0 	.word	0x080083b0

08005ac4 <rxData.10031>:
	{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4664      	mov	r4, ip
 8005acc:	f8c7 c004 	str.w	ip, [r7, #4]
		NRF24_startListening();
 8005ad0:	f001 f80a 	bl	8006ae8 <NRF24_startListening>
		if(NRF24_available())
 8005ad4:	f001 f886 	bl	8006be4 <NRF24_available>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01f      	beq.n	8005b1e <rxData.10031+0x5a>
			memset(RxData, 0, 34);
 8005ade:	f104 031c 	add.w	r3, r4, #28
 8005ae2:	2222      	movs	r2, #34	; 0x22
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 ffcf 	bl	8007a8a <memset>
			NRF24_read(RxData, 32);
 8005aec:	f104 031c 	add.w	r3, r4, #28
 8005af0:	2120      	movs	r1, #32
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 f87e 	bl	8006bf4 <NRF24_read>
			RxData[32] = '\r';
 8005af8:	230d      	movs	r3, #13
 8005afa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			RxData[32+1] = '\n';
 8005afe:	230a      	movs	r3, #10
 8005b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			HAL_UART_Transmit(&huart1, (uint8_t *)RxData, 32+2, 10);
 8005b04:	f104 011c 	add.w	r1, r4, #28
 8005b08:	230a      	movs	r3, #10
 8005b0a:	2222      	movs	r2, #34	; 0x22
 8005b0c:	4806      	ldr	r0, [pc, #24]	; (8005b28 <rxData.10031+0x64>)
 8005b0e:	f7fd ff78 	bl	8003a02 <HAL_UART_Transmit>
			resetAll();
 8005b12:	46a4      	mov	ip, r4
 8005b14:	f7fe fd72 	bl	80045fc <resetAll.10015>
			responseScreen();
 8005b18:	46a4      	mov	ip, r4
 8005b1a:	f7ff ff45 	bl	80059a8 <responseScreen.10021>
	}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000248 	.word	0x20000248

08005b2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b09e      	sub	sp, #120	; 0x78
 8005b30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b36:	2228      	movs	r2, #40	; 0x28
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 ffa5 	bl	8007a8a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b50:	463b      	mov	r3, r7
 8005b52:	223c      	movs	r2, #60	; 0x3c
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 ff97 	bl	8007a8a <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005b66:	2300      	movs	r3, #0
 8005b68:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b76:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005b78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005b7c:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fa fe98 	bl	80008b8 <HAL_RCC_OscConfig>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8005b8e:	f000 fb05 	bl	800619c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b92:	230f      	movs	r3, #15
 8005b94:	63fb      	str	r3, [r7, #60]	; 0x3c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b96:	2302      	movs	r3, #2
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bac:	2102      	movs	r1, #2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fb fd70 	bl	8001694 <HAL_RCC_ClockConfig>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <SystemClock_Config+0x92>
	{
		Error_Handler();
 8005bba:	f000 faef 	bl	800619c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fb ff99 	bl	8001b00 <HAL_RCCEx_PeriphCLKConfig>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8005bd4:	f000 fae2 	bl	800619c <Error_Handler>
	}
}
 8005bd8:	bf00      	nop
 8005bda:	3778      	adds	r7, #120	; 0x78
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8005be4:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005be6:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <MX_SPI1_Init+0x78>)
 8005be8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8005bea:	4b1a      	ldr	r3, [pc, #104]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005bf0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005bf8:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005bfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005bfe:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c00:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c12:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c16:	2208      	movs	r2, #8
 8005c18:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c20:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8005c2c:	4b09      	ldr	r3, [pc, #36]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c2e:	2207      	movs	r2, #7
 8005c30:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005c3e:	4805      	ldr	r0, [pc, #20]	; (8005c54 <MX_SPI1_Init+0x74>)
 8005c40:	f7fc f90e 	bl	8001e60 <HAL_SPI_Init>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8005c4a:	f000 faa7 	bl	800619c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8005c4e:	bf00      	nop
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200002b8 	.word	0x200002b8
 8005c58:	40013000 	.word	0x40013000

08005c5c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08e      	sub	sp, #56	; 0x38
 8005c60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
 8005c6c:	609a      	str	r2, [r3, #8]
 8005c6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c70:	f107 031c 	add.w	r3, r7, #28
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	605a      	str	r2, [r3, #4]
 8005c84:	609a      	str	r2, [r3, #8]
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	615a      	str	r2, [r3, #20]
 8005c8c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c94:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8005c96:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c9c:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 8005ca2:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ca8:	4b26      	ldr	r3, [pc, #152]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cae:	4b25      	ldr	r3, [pc, #148]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005cb4:	4823      	ldr	r0, [pc, #140]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005cb6:	f7fc ff54 	bl	8002b62 <HAL_TIM_Base_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 8005cc0:	f000 fa6c 	bl	800619c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cce:	4619      	mov	r1, r3
 8005cd0:	481c      	ldr	r0, [pc, #112]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005cd2:	f7fc ffc1 	bl	8002c58 <HAL_TIM_ConfigClockSource>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8005cdc:	f000 fa5e 	bl	800619c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005ce0:	4818      	ldr	r0, [pc, #96]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005ce2:	f7fc ff84 	bl	8002bee <HAL_TIM_PWM_Init>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8005cec:	f000 fa56 	bl	800619c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cf8:	f107 031c 	add.w	r3, r7, #28
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4811      	ldr	r0, [pc, #68]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005d00:	f7fd fd04 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 8005d0a:	f000 fa47 	bl	800619c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d0e:	2360      	movs	r3, #96	; 0x60
 8005d10:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d1e:	463b      	mov	r3, r7
 8005d20:	2204      	movs	r2, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4807      	ldr	r0, [pc, #28]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005d26:	f7fd fbd9 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8005d30:	f000 fa34 	bl	800619c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8005d34:	4803      	ldr	r0, [pc, #12]	; (8005d44 <MX_TIM2_Init+0xe8>)
 8005d36:	f000 faf9 	bl	800632c <HAL_TIM_MspPostInit>

}
 8005d3a:	bf00      	nop
 8005d3c:	3738      	adds	r7, #56	; 0x38
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2000031c 	.word	0x2000031c

08005d48 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	; 0x38
 8005d4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	605a      	str	r2, [r3, #4]
 8005d58:	609a      	str	r2, [r3, #8]
 8005d5a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d5c:	f107 031c 	add.w	r3, r7, #28
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005d68:	463b      	mov	r3, r7
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	609a      	str	r2, [r3, #8]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	611a      	str	r2, [r3, #16]
 8005d76:	615a      	str	r2, [r3, #20]
 8005d78:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	; (8005e30 <MX_TIM3_Init+0xe8>)
 8005d7e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d86:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 8005d8c:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d98:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005d9e:	4823      	ldr	r0, [pc, #140]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005da0:	f7fc fedf 	bl	8002b62 <HAL_TIM_Base_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 8005daa:	f000 f9f7 	bl	800619c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db8:	4619      	mov	r1, r3
 8005dba:	481c      	ldr	r0, [pc, #112]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005dbc:	f7fc ff4c 	bl	8002c58 <HAL_TIM_ConfigClockSource>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 8005dc6:	f000 f9e9 	bl	800619c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005dca:	4818      	ldr	r0, [pc, #96]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005dcc:	f7fc ff0f 	bl	8002bee <HAL_TIM_PWM_Init>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 8005dd6:	f000 f9e1 	bl	800619c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005de2:	f107 031c 	add.w	r3, r7, #28
 8005de6:	4619      	mov	r1, r3
 8005de8:	4810      	ldr	r0, [pc, #64]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005dea:	f7fd fc8f 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 8005df4:	f000 f9d2 	bl	800619c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005df8:	2360      	movs	r3, #96	; 0x60
 8005dfa:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e08:	463b      	mov	r3, r7
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4807      	ldr	r0, [pc, #28]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005e10:	f7fd fb64 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 8005e1a:	f000 f9bf 	bl	800619c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8005e1e:	4803      	ldr	r0, [pc, #12]	; (8005e2c <MX_TIM3_Init+0xe4>)
 8005e20:	f000 fa84 	bl	800632c <HAL_TIM_MspPostInit>

}
 8005e24:	bf00      	nop
 8005e26:	3738      	adds	r7, #56	; 0x38
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000208 	.word	0x20000208
 8005e30:	40000400 	.word	0x40000400

08005e34 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	609a      	str	r2, [r3, #8]
 8005e46:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e48:	f107 031c 	add.w	r3, r7, #28
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005e54:	463b      	mov	r3, r7
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	611a      	str	r2, [r3, #16]
 8005e62:	615a      	str	r2, [r3, #20]
 8005e64:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8005e66:	4b2c      	ldr	r3, [pc, #176]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e68:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <MX_TIM4_Init+0xe8>)
 8005e6a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e72:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e7e:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005e8a:	4823      	ldr	r0, [pc, #140]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005e8c:	f7fc fe69 	bl	8002b62 <HAL_TIM_Base_Init>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <MX_TIM4_Init+0x66>
	{
		Error_Handler();
 8005e96:	f000 f981 	bl	800619c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	481c      	ldr	r0, [pc, #112]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005ea8:	f7fc fed6 	bl	8002c58 <HAL_TIM_ConfigClockSource>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <MX_TIM4_Init+0x82>
	{
		Error_Handler();
 8005eb2:	f000 f973 	bl	800619c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005eb6:	4818      	ldr	r0, [pc, #96]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005eb8:	f7fc fe99 	bl	8002bee <HAL_TIM_PWM_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <MX_TIM4_Init+0x92>
	{
		Error_Handler();
 8005ec2:	f000 f96b 	bl	800619c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ece:	f107 031c 	add.w	r3, r7, #28
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4810      	ldr	r0, [pc, #64]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005ed6:	f7fd fc19 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <MX_TIM4_Init+0xb0>
	{
		Error_Handler();
 8005ee0:	f000 f95c 	bl	800619c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ee4:	2360      	movs	r3, #96	; 0x60
 8005ee6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4807      	ldr	r0, [pc, #28]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005efc:	f7fd faee 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_TIM4_Init+0xd6>
	{
		Error_Handler();
 8005f06:	f000 f949 	bl	800619c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8005f0a:	4803      	ldr	r0, [pc, #12]	; (8005f18 <MX_TIM4_Init+0xe4>)
 8005f0c:	f000 fa0e 	bl	800632c <HAL_TIM_MspPostInit>

}
 8005f10:	bf00      	nop
 8005f12:	3738      	adds	r7, #56	; 0x38
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000188 	.word	0x20000188
 8005f1c:	40000800 	.word	0x40000800

08005f20 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f26:	f107 0310 	add.w	r3, r7, #16
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	609a      	str	r2, [r3, #8]
 8005f32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8005f3e:	4b1f      	ldr	r3, [pc, #124]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f40:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <MX_TIM15_Init+0xa0>)
 8005f42:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 72-1;
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f46:	2247      	movs	r2, #71	; 0x47
 8005f48:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 0xffff-1;
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005f56:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8005f5e:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f64:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005f6a:	4814      	ldr	r0, [pc, #80]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f6c:	f7fc fdf9 	bl	8002b62 <HAL_TIM_Base_Init>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <MX_TIM15_Init+0x5a>
	{
		Error_Handler();
 8005f76:	f000 f911 	bl	800619c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f7e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	4619      	mov	r1, r3
 8005f86:	480d      	ldr	r0, [pc, #52]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005f88:	f7fc fe66 	bl	8002c58 <HAL_TIM_ConfigClockSource>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <MX_TIM15_Init+0x76>
	{
		Error_Handler();
 8005f92:	f000 f903 	bl	800619c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4806      	ldr	r0, [pc, #24]	; (8005fbc <MX_TIM15_Init+0x9c>)
 8005fa4:	f7fd fbb2 	bl	800370c <HAL_TIMEx_MasterConfigSynchronization>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <MX_TIM15_Init+0x92>
	{
		Error_Handler();
 8005fae:	f000 f8f5 	bl	800619c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8005fb2:	bf00      	nop
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200001c8 	.word	0x200001c8
 8005fc0:	40014000 	.word	0x40014000

08005fc4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <MX_USART1_UART_Init+0x5c>)
 8005fcc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005fd0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005fd4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005fea:	220c      	movs	r2, #12
 8005fec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ffa:	4b08      	ldr	r3, [pc, #32]	; (800601c <MX_USART1_UART_Init+0x58>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <MX_USART1_UART_Init+0x58>)
 8006002:	2200      	movs	r2, #0
 8006004:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8006006:	4805      	ldr	r0, [pc, #20]	; (800601c <MX_USART1_UART_Init+0x58>)
 8006008:	f7fd fcaa 	bl	8003960 <HAL_UART_Init>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8006012:	f000 f8c3 	bl	800619c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8006016:	bf00      	nop
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000248 	.word	0x20000248
 8006020:	40013800 	.word	0x40013800

08006024 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800602a:	f107 031c 	add.w	r3, r7, #28
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	609a      	str	r2, [r3, #8]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800603a:	4b53      	ldr	r3, [pc, #332]	; (8006188 <MX_GPIO_Init+0x164>)
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	4a52      	ldr	r2, [pc, #328]	; (8006188 <MX_GPIO_Init+0x164>)
 8006040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006044:	6153      	str	r3, [r2, #20]
 8006046:	4b50      	ldr	r3, [pc, #320]	; (8006188 <MX_GPIO_Init+0x164>)
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8006052:	4b4d      	ldr	r3, [pc, #308]	; (8006188 <MX_GPIO_Init+0x164>)
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4a4c      	ldr	r2, [pc, #304]	; (8006188 <MX_GPIO_Init+0x164>)
 8006058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800605c:	6153      	str	r3, [r2, #20]
 800605e:	4b4a      	ldr	r3, [pc, #296]	; (8006188 <MX_GPIO_Init+0x164>)
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800606a:	4b47      	ldr	r3, [pc, #284]	; (8006188 <MX_GPIO_Init+0x164>)
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4a46      	ldr	r2, [pc, #280]	; (8006188 <MX_GPIO_Init+0x164>)
 8006070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006074:	6153      	str	r3, [r2, #20]
 8006076:	4b44      	ldr	r3, [pc, #272]	; (8006188 <MX_GPIO_Init+0x164>)
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006082:	4b41      	ldr	r3, [pc, #260]	; (8006188 <MX_GPIO_Init+0x164>)
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4a40      	ldr	r2, [pc, #256]	; (8006188 <MX_GPIO_Init+0x164>)
 8006088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800608c:	6153      	str	r3, [r2, #20]
 800608e:	4b3e      	ldr	r3, [pc, #248]	; (8006188 <MX_GPIO_Init+0x164>)
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800609a:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <MX_GPIO_Init+0x164>)
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4a3a      	ldr	r2, [pc, #232]	; (8006188 <MX_GPIO_Init+0x164>)
 80060a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a4:	6153      	str	r3, [r2, #20]
 80060a6:	4b38      	ldr	r3, [pc, #224]	; (8006188 <MX_GPIO_Init+0x164>)
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ae:	60bb      	str	r3, [r7, #8]
 80060b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80060b2:	4b35      	ldr	r3, [pc, #212]	; (8006188 <MX_GPIO_Init+0x164>)
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	4a34      	ldr	r2, [pc, #208]	; (8006188 <MX_GPIO_Init+0x164>)
 80060b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060bc:	6153      	str	r3, [r2, #20]
 80060be:	4b32      	ldr	r3, [pc, #200]	; (8006188 <MX_GPIO_Init+0x164>)
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CSpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 80060ca:	2200      	movs	r2, #0
 80060cc:	2103      	movs	r1, #3
 80060ce:	482f      	ldr	r0, [pc, #188]	; (800618c <MX_GPIO_Init+0x168>)
 80060d0:	f7fa fbda 	bl	8000888 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80060d4:	2200      	movs	r2, #0
 80060d6:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80060da:	482d      	ldr	r0, [pc, #180]	; (8006190 <MX_GPIO_Init+0x16c>)
 80060dc:	f7fa fbd4 	bl	8000888 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 80060e0:	2200      	movs	r2, #0
 80060e2:	21c0      	movs	r1, #192	; 0xc0
 80060e4:	482b      	ldr	r0, [pc, #172]	; (8006194 <MX_GPIO_Init+0x170>)
 80060e6:	f7fa fbcf 	bl	8000888 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 80060ea:	2200      	movs	r2, #0
 80060ec:	210f      	movs	r1, #15
 80060ee:	482a      	ldr	r0, [pc, #168]	; (8006198 <MX_GPIO_Init+0x174>)
 80060f0:	f7fa fbca 	bl	8000888 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CSpin_Pin CEpin_Pin */
	GPIO_InitStruct.Pin = CSpin_Pin|CEpin_Pin;
 80060f4:	2303      	movs	r3, #3
 80060f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f8:	2301      	movs	r3, #1
 80060fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006100:	2300      	movs	r3, #0
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006104:	f107 031c 	add.w	r3, r7, #28
 8006108:	4619      	mov	r1, r3
 800610a:	4820      	ldr	r0, [pc, #128]	; (800618c <MX_GPIO_Init+0x168>)
 800610c:	f7fa fa26 	bl	800055c <HAL_GPIO_Init>

	/*Configure GPIO pins : C0_In_Pin C1_In_Pin C2_In_Pin C3_In_Pin */
	GPIO_InitStruct.Pin = C0_In_Pin|C1_In_Pin|C2_In_Pin|C3_In_Pin;
 8006110:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8006114:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800611a:	2301      	movs	r3, #1
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800611e:	f107 031c 	add.w	r3, r7, #28
 8006122:	4619      	mov	r1, r3
 8006124:	481a      	ldr	r0, [pc, #104]	; (8006190 <MX_GPIO_Init+0x16c>)
 8006126:	f7fa fa19 	bl	800055c <HAL_GPIO_Init>

	/*Configure GPIO pins : PE11 PE12 PE13 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800612a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800612e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006130:	2301      	movs	r3, #1
 8006132:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	2300      	movs	r3, #0
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006138:	2300      	movs	r3, #0
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800613c:	f107 031c 	add.w	r3, r7, #28
 8006140:	4619      	mov	r1, r3
 8006142:	4813      	ldr	r0, [pc, #76]	; (8006190 <MX_GPIO_Init+0x16c>)
 8006144:	f7fa fa0a 	bl	800055c <HAL_GPIO_Init>

	/*Configure GPIO pins : RS_Pin EN_Pin */
	GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 8006148:	23c0      	movs	r3, #192	; 0xc0
 800614a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800614c:	2301      	movs	r3, #1
 800614e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006150:	2300      	movs	r3, #0
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006154:	2300      	movs	r3, #0
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006158:	f107 031c 	add.w	r3, r7, #28
 800615c:	4619      	mov	r1, r3
 800615e:	480d      	ldr	r0, [pc, #52]	; (8006194 <MX_GPIO_Init+0x170>)
 8006160:	f7fa f9fc 	bl	800055c <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8006164:	230f      	movs	r3, #15
 8006166:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006168:	2301      	movs	r3, #1
 800616a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616c:	2300      	movs	r3, #0
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006170:	2300      	movs	r3, #0
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006174:	f107 031c 	add.w	r3, r7, #28
 8006178:	4619      	mov	r1, r3
 800617a:	4807      	ldr	r0, [pc, #28]	; (8006198 <MX_GPIO_Init+0x174>)
 800617c:	f7fa f9ee 	bl	800055c <HAL_GPIO_Init>

}
 8006180:	bf00      	nop
 8006182:	3730      	adds	r7, #48	; 0x30
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40021000 	.word	0x40021000
 800618c:	48000400 	.word	0x48000400
 8006190:	48001000 	.word	0x48001000
 8006194:	48000800 	.word	0x48000800
 8006198:	48000c00 	.word	0x48000c00

0800619c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <HAL_MspInit+0x44>)
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	4a0e      	ldr	r2, [pc, #56]	; (80061f0 <HAL_MspInit+0x44>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6193      	str	r3, [r2, #24]
 80061be:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <HAL_MspInit+0x44>)
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_MspInit+0x44>)
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <HAL_MspInit+0x44>)
 80061d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d4:	61d3      	str	r3, [r2, #28]
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_MspInit+0x44>)
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80061e2:	2007      	movs	r0, #7
 80061e4:	f7fa f986 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40021000 	.word	0x40021000

080061f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061fc:	f107 0314 	add.w	r3, r7, #20
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a17      	ldr	r2, [pc, #92]	; (8006270 <HAL_SPI_MspInit+0x7c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d128      	bne.n	8006268 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <HAL_SPI_MspInit+0x80>)
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	4a16      	ldr	r2, [pc, #88]	; (8006274 <HAL_SPI_MspInit+0x80>)
 800621c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006220:	6193      	str	r3, [r2, #24]
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_SPI_MspInit+0x80>)
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_SPI_MspInit+0x80>)
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <HAL_SPI_MspInit+0x80>)
 8006234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006238:	6153      	str	r3, [r2, #20]
 800623a:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <HAL_SPI_MspInit+0x80>)
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006246:	23e0      	movs	r3, #224	; 0xe0
 8006248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624a:	2302      	movs	r3, #2
 800624c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006252:	2303      	movs	r3, #3
 8006254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006256:	2305      	movs	r3, #5
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	4619      	mov	r1, r3
 8006260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006264:	f7fa f97a 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006268:	bf00      	nop
 800626a:	3728      	adds	r7, #40	; 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40013000 	.word	0x40013000
 8006274:	40021000 	.word	0x40021000

08006278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d10c      	bne.n	80062a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4a23      	ldr	r2, [pc, #140]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	61d3      	str	r3, [r2, #28]
 8006296:	4b21      	ldr	r3, [pc, #132]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80062a2:	e034      	b.n	800630e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_TIM_Base_MspInit+0xa8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d10c      	bne.n	80062c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062ae:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	61d3      	str	r3, [r2, #28]
 80062ba:	4b18      	ldr	r3, [pc, #96]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]
}
 80062c6:	e022      	b.n	800630e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a15      	ldr	r2, [pc, #84]	; (8006324 <HAL_TIM_Base_MspInit+0xac>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10c      	bne.n	80062ec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	4a11      	ldr	r2, [pc, #68]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062d8:	f043 0304 	orr.w	r3, r3, #4
 80062dc:	61d3      	str	r3, [r2, #28]
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
}
 80062ea:	e010      	b.n	800630e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0d      	ldr	r2, [pc, #52]	; (8006328 <HAL_TIM_Base_MspInit+0xb0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10b      	bne.n	800630e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	4a08      	ldr	r2, [pc, #32]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006300:	6193      	str	r3, [r2, #24]
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_TIM_Base_MspInit+0xa4>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630a:	60bb      	str	r3, [r7, #8]
 800630c:	68bb      	ldr	r3, [r7, #8]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40021000 	.word	0x40021000
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40014000 	.word	0x40014000

0800632c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006334:	f107 0314 	add.w	r3, r7, #20
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	609a      	str	r2, [r3, #8]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d11d      	bne.n	800638a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800634e:	4b33      	ldr	r3, [pc, #204]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4a32      	ldr	r2, [pc, #200]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 8006354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006358:	6153      	str	r3, [r2, #20]
 800635a:	4b30      	ldr	r3, [pc, #192]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006366:	2302      	movs	r3, #2
 8006368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800636a:	2302      	movs	r3, #2
 800636c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006376:	2301      	movs	r3, #1
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800637a:	f107 0314 	add.w	r3, r7, #20
 800637e:	4619      	mov	r1, r3
 8006380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006384:	f7fa f8ea 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006388:	e043      	b.n	8006412 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a24      	ldr	r2, [pc, #144]	; (8006420 <HAL_TIM_MspPostInit+0xf4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d11c      	bne.n	80063ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006394:	4b21      	ldr	r3, [pc, #132]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	4a20      	ldr	r2, [pc, #128]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 800639a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800639e:	6153      	str	r3, [r2, #20]
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80063ac:	2304      	movs	r3, #4
 80063ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b0:	2302      	movs	r3, #2
 80063b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b8:	2300      	movs	r3, #0
 80063ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063bc:	2302      	movs	r3, #2
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063c0:	f107 0314 	add.w	r3, r7, #20
 80063c4:	4619      	mov	r1, r3
 80063c6:	4817      	ldr	r0, [pc, #92]	; (8006424 <HAL_TIM_MspPostInit+0xf8>)
 80063c8:	f7fa f8c8 	bl	800055c <HAL_GPIO_Init>
}
 80063cc:	e021      	b.n	8006412 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a15      	ldr	r2, [pc, #84]	; (8006428 <HAL_TIM_MspPostInit+0xfc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d11c      	bne.n	8006412 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	4a0f      	ldr	r2, [pc, #60]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 80063de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e2:	6153      	str	r3, [r2, #20]
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <HAL_TIM_MspPostInit+0xf0>)
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80063f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f6:	2302      	movs	r3, #2
 80063f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063fe:	2300      	movs	r3, #0
 8006400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006402:	2302      	movs	r3, #2
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006406:	f107 0314 	add.w	r3, r7, #20
 800640a:	4619      	mov	r1, r3
 800640c:	4807      	ldr	r0, [pc, #28]	; (800642c <HAL_TIM_MspPostInit+0x100>)
 800640e:	f7fa f8a5 	bl	800055c <HAL_GPIO_Init>
}
 8006412:	bf00      	nop
 8006414:	3728      	adds	r7, #40	; 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000
 8006420:	40000400 	.word	0x40000400
 8006424:	48001000 	.word	0x48001000
 8006428:	40000800 	.word	0x40000800
 800642c:	48000c00 	.word	0x48000c00

08006430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <HAL_UART_MspInit+0x7c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d127      	bne.n	80064a2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006452:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <HAL_UART_MspInit+0x80>)
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <HAL_UART_MspInit+0x80>)
 8006458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800645c:	6193      	str	r3, [r2, #24]
 800645e:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <HAL_UART_MspInit+0x80>)
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800646a:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <HAL_UART_MspInit+0x80>)
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <HAL_UART_MspInit+0x80>)
 8006470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006474:	6153      	str	r3, [r2, #20]
 8006476:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <HAL_UART_MspInit+0x80>)
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006482:	2330      	movs	r3, #48	; 0x30
 8006484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006486:	2302      	movs	r3, #2
 8006488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800648e:	2303      	movs	r3, #3
 8006490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006492:	2307      	movs	r3, #7
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006496:	f107 0314 	add.w	r3, r7, #20
 800649a:	4619      	mov	r1, r3
 800649c:	4805      	ldr	r0, [pc, #20]	; (80064b4 <HAL_UART_MspInit+0x84>)
 800649e:	f7fa f85d 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80064a2:	bf00      	nop
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40013800 	.word	0x40013800
 80064b0:	40021000 	.word	0x40021000
 80064b4:	48000800 	.word	0x48000800

080064b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064ca:	e7fe      	b.n	80064ca <HardFault_Handler+0x4>

080064cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064d0:	e7fe      	b.n	80064d0 <MemManage_Handler+0x4>

080064d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064d2:	b480      	push	{r7}
 80064d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064d6:	e7fe      	b.n	80064d6 <BusFault_Handler+0x4>

080064d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064dc:	e7fe      	b.n	80064dc <UsageFault_Handler+0x4>

080064de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064de:	b480      	push	{r7}
 80064e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064e2:	bf00      	nop
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064f0:	bf00      	nop
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064fe:	bf00      	nop
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800650c:	f7f9 fefe 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006510:	bf00      	nop
 8006512:	bd80      	pop	{r7, pc}

08006514 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <_sbrk+0x50>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <_sbrk+0x16>
		heap_end = &end;
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <_sbrk+0x50>)
 8006526:	4a10      	ldr	r2, [pc, #64]	; (8006568 <_sbrk+0x54>)
 8006528:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800652a:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <_sbrk+0x50>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <_sbrk+0x50>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	466a      	mov	r2, sp
 800653a:	4293      	cmp	r3, r2
 800653c:	d907      	bls.n	800654e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800653e:	f001 fa6f 	bl	8007a20 <__errno>
 8006542:	4602      	mov	r2, r0
 8006544:	230c      	movs	r3, #12
 8006546:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006548:	f04f 33ff 	mov.w	r3, #4294967295
 800654c:	e006      	b.n	800655c <_sbrk+0x48>
	}

	heap_end += incr;
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <_sbrk+0x50>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	4a03      	ldr	r2, [pc, #12]	; (8006564 <_sbrk+0x50>)
 8006558:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	2000008c 	.word	0x2000008c
 8006568:	20000360 	.word	0x20000360

0800656c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006570:	4b1f      	ldr	r3, [pc, #124]	; (80065f0 <SystemInit+0x84>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <SystemInit+0x84>)
 8006578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800657c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006580:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <SystemInit+0x88>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1b      	ldr	r2, [pc, #108]	; (80065f4 <SystemInit+0x88>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800658c:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <SystemInit+0x88>)
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	4918      	ldr	r1, [pc, #96]	; (80065f4 <SystemInit+0x88>)
 8006592:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <SystemInit+0x8c>)
 8006594:	4013      	ands	r3, r2
 8006596:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006598:	4b16      	ldr	r3, [pc, #88]	; (80065f4 <SystemInit+0x88>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <SystemInit+0x88>)
 800659e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80065a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80065a8:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <SystemInit+0x88>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a11      	ldr	r2, [pc, #68]	; (80065f4 <SystemInit+0x88>)
 80065ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80065b4:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <SystemInit+0x88>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	4a0e      	ldr	r2, [pc, #56]	; (80065f4 <SystemInit+0x88>)
 80065ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80065be:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80065c0:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <SystemInit+0x88>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	4a0b      	ldr	r2, [pc, #44]	; (80065f4 <SystemInit+0x88>)
 80065c6:	f023 030f 	bic.w	r3, r3, #15
 80065ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <SystemInit+0x88>)
 80065ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d0:	4908      	ldr	r1, [pc, #32]	; (80065f4 <SystemInit+0x88>)
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <SystemInit+0x90>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <SystemInit+0x88>)
 80065da:	2200      	movs	r2, #0
 80065dc:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065de:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <SystemInit+0x84>)
 80065e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065e4:	609a      	str	r2, [r3, #8]
#endif
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	e000ed00 	.word	0xe000ed00
 80065f4:	40021000 	.word	0x40021000
 80065f8:	f87fc00c 	.word	0xf87fc00c
 80065fc:	ff00fccc 	.word	0xff00fccc

08006600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006638 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006604:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006606:	e003      	b.n	8006610 <LoopCopyDataInit>

08006608 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800660a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800660c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800660e:	3104      	adds	r1, #4

08006610 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006610:	480b      	ldr	r0, [pc, #44]	; (8006640 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006614:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006616:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006618:	d3f6      	bcc.n	8006608 <CopyDataInit>
	ldr	r2, =_sbss
 800661a:	4a0b      	ldr	r2, [pc, #44]	; (8006648 <LoopForever+0x12>)
	b	LoopFillZerobss
 800661c:	e002      	b.n	8006624 <LoopFillZerobss>

0800661e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800661e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006620:	f842 3b04 	str.w	r3, [r2], #4

08006624 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006624:	4b09      	ldr	r3, [pc, #36]	; (800664c <LoopForever+0x16>)
	cmp	r2, r3
 8006626:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006628:	d3f9      	bcc.n	800661e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800662a:	f7ff ff9f 	bl	800656c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800662e:	f001 f9fd 	bl	8007a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006632:	f7fd fff9 	bl	8004628 <main>

08006636 <LoopForever>:

LoopForever:
    b LoopForever
 8006636:	e7fe      	b.n	8006636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006638:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800663c:	08008abc 	.word	0x08008abc
	ldr	r0, =_sdata
 8006640:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006644:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8006648:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800664c:	20000360 	.word	0x20000360

08006650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006650:	e7fe      	b.n	8006650 <ADC1_2_IRQHandler>
	...

08006654 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <NRF24_DelayMicroSeconds+0x38>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <NRF24_DelayMicroSeconds+0x3c>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	0c9a      	lsrs	r2, r3, #18
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8006674:	bf00      	nop
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	60fa      	str	r2, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1fa      	bne.n	8006676 <NRF24_DelayMicroSeconds+0x22>
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20000008 	.word	0x20000008
 8006690:	165e9f81 	.word	0x165e9f81

08006694 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <NRF24_csn+0x20>
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <NRF24_csn+0x38>)
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <NRF24_csn+0x3c>)
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	2201      	movs	r2, #1
 80066ac:	4619      	mov	r1, r3
 80066ae:	f7fa f8eb 	bl	8000888 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80066b2:	e007      	b.n	80066c4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <NRF24_csn+0x38>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <NRF24_csn+0x3c>)
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	2200      	movs	r2, #0
 80066be:	4619      	mov	r1, r3
 80066c0:	f7fa f8e2 	bl	8000888 <HAL_GPIO_WritePin>
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200000a0 	.word	0x200000a0
 80066d0:	200000a4 	.word	0x200000a4

080066d4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <NRF24_ce+0x20>
 80066e2:	4b0a      	ldr	r3, [pc, #40]	; (800670c <NRF24_ce+0x38>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <NRF24_ce+0x3c>)
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	2201      	movs	r2, #1
 80066ec:	4619      	mov	r1, r3
 80066ee:	f7fa f8cb 	bl	8000888 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80066f2:	e007      	b.n	8006704 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <NRF24_ce+0x38>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <NRF24_ce+0x3c>)
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	f7fa f8c2 	bl	8000888 <HAL_GPIO_WritePin>
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200000a0 	.word	0x200000a0
 8006710:	200000a6 	.word	0x200000a6

08006714 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800671e:	2000      	movs	r0, #0
 8006720:	f7ff ffb8 	bl	8006694 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	b2db      	uxtb	r3, r3
 800672c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800672e:	f107 010c 	add.w	r1, r7, #12
 8006732:	2364      	movs	r3, #100	; 0x64
 8006734:	2201      	movs	r2, #1
 8006736:	480a      	ldr	r0, [pc, #40]	; (8006760 <NRF24_read_register+0x4c>)
 8006738:	f7fb fc24 	bl	8001f84 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	1c59      	adds	r1, r3, #1
 8006742:	2364      	movs	r3, #100	; 0x64
 8006744:	2201      	movs	r2, #1
 8006746:	4806      	ldr	r0, [pc, #24]	; (8006760 <NRF24_read_register+0x4c>)
 8006748:	f7fb fd72 	bl	8002230 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800674c:	7b7b      	ldrb	r3, [r7, #13]
 800674e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8006750:	2001      	movs	r0, #1
 8006752:	f7ff ff9f 	bl	8006694 <NRF24_csn>
	return retData;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200000a8 	.word	0x200000a8

08006764 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	4613      	mov	r3, r2
 8006772:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8006774:	2000      	movs	r0, #0
 8006776:	f7ff ff8d 	bl	8006694 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	b2db      	uxtb	r3, r3
 8006782:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006784:	f107 010c 	add.w	r1, r7, #12
 8006788:	2364      	movs	r3, #100	; 0x64
 800678a:	2201      	movs	r2, #1
 800678c:	4808      	ldr	r0, [pc, #32]	; (80067b0 <NRF24_read_registerN+0x4c>)
 800678e:	f7fb fbf9 	bl	8001f84 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8006792:	79bb      	ldrb	r3, [r7, #6]
 8006794:	b29a      	uxth	r2, r3
 8006796:	2364      	movs	r3, #100	; 0x64
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <NRF24_read_registerN+0x4c>)
 800679c:	f7fb fd48 	bl	8002230 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80067a0:	2001      	movs	r0, #1
 80067a2:	f7ff ff77 	bl	8006694 <NRF24_csn>
}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200000a8 	.word	0x200000a8

080067b4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	460a      	mov	r2, r1
 80067be:	71fb      	strb	r3, [r7, #7]
 80067c0:	4613      	mov	r3, r2
 80067c2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80067c4:	2000      	movs	r0, #0
 80067c6:	f7ff ff65 	bl	8006694 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	f043 0320 	orr.w	r3, r3, #32
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80067d4:	79bb      	ldrb	r3, [r7, #6]
 80067d6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80067d8:	f107 010c 	add.w	r1, r7, #12
 80067dc:	2364      	movs	r3, #100	; 0x64
 80067de:	2202      	movs	r2, #2
 80067e0:	4804      	ldr	r0, [pc, #16]	; (80067f4 <NRF24_write_register+0x40>)
 80067e2:	f7fb fbcf 	bl	8001f84 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80067e6:	2001      	movs	r0, #1
 80067e8:	f7ff ff54 	bl	8006694 <NRF24_csn>
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	200000a8 	.word	0x200000a8

080067f8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
 8006804:	4613      	mov	r3, r2
 8006806:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8006808:	2000      	movs	r0, #0
 800680a:	f7ff ff43 	bl	8006694 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	f043 0320 	orr.w	r3, r3, #32
 8006814:	b2db      	uxtb	r3, r3
 8006816:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006818:	f107 010c 	add.w	r1, r7, #12
 800681c:	2364      	movs	r3, #100	; 0x64
 800681e:	2201      	movs	r2, #1
 8006820:	4808      	ldr	r0, [pc, #32]	; (8006844 <NRF24_write_registerN+0x4c>)
 8006822:	f7fb fbaf 	bl	8001f84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8006826:	79bb      	ldrb	r3, [r7, #6]
 8006828:	b29a      	uxth	r2, r3
 800682a:	2364      	movs	r3, #100	; 0x64
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <NRF24_write_registerN+0x4c>)
 8006830:	f7fb fba8 	bl	8001f84 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8006834:	2001      	movs	r0, #1
 8006836:	f7ff ff2d 	bl	8006694 <NRF24_csn>
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200000a8 	.word	0x200000a8

08006848 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8006854:	2000      	movs	r0, #0
 8006856:	f7ff ff1d 	bl	8006694 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800685a:	23a0      	movs	r3, #160	; 0xa0
 800685c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800685e:	f107 010f 	add.w	r1, r7, #15
 8006862:	2364      	movs	r3, #100	; 0x64
 8006864:	2201      	movs	r2, #1
 8006866:	4808      	ldr	r0, [pc, #32]	; (8006888 <NRF24_write_payload+0x40>)
 8006868:	f7fb fb8c 	bl	8001f84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	b29a      	uxth	r2, r3
 8006870:	2364      	movs	r3, #100	; 0x64
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	4804      	ldr	r0, [pc, #16]	; (8006888 <NRF24_write_payload+0x40>)
 8006876:	f7fb fb85 	bl	8001f84 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800687a:	2001      	movs	r0, #1
 800687c:	f7ff ff0a 	bl	8006694 <NRF24_csn>
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200000a8 	.word	0x200000a8

0800688c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8006898:	f000 fa86 	bl	8006da8 <NRF24_getPayloadSize>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d303      	bcc.n	80068ae <NRF24_read_payload+0x22>
 80068a6:	f000 fa7f 	bl	8006da8 <NRF24_getPayloadSize>
 80068aa:	4603      	mov	r3, r0
 80068ac:	e000      	b.n	80068b0 <NRF24_read_payload+0x24>
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80068b2:	2000      	movs	r0, #0
 80068b4:	f7ff feee 	bl	8006694 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80068b8:	2361      	movs	r3, #97	; 0x61
 80068ba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80068bc:	f107 010e 	add.w	r1, r7, #14
 80068c0:	2364      	movs	r3, #100	; 0x64
 80068c2:	2201      	movs	r2, #1
 80068c4:	4808      	ldr	r0, [pc, #32]	; (80068e8 <NRF24_read_payload+0x5c>)
 80068c6:	f7fb fb5d 	bl	8001f84 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	2364      	movs	r3, #100	; 0x64
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4805      	ldr	r0, [pc, #20]	; (80068e8 <NRF24_read_payload+0x5c>)
 80068d4:	f7fb fcac 	bl	8002230 <HAL_SPI_Receive>
	NRF24_csn(1);
 80068d8:	2001      	movs	r0, #1
 80068da:	f7ff fedb 	bl	8006694 <NRF24_csn>
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200000a8 	.word	0x200000a8

080068ec <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80068f0:	21ff      	movs	r1, #255	; 0xff
 80068f2:	20e1      	movs	r0, #225	; 0xe1
 80068f4:	f7ff ff5e 	bl	80067b4 <NRF24_write_register>
}
 80068f8:	bf00      	nop
 80068fa:	bd80      	pop	{r7, pc}

080068fc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8006900:	21ff      	movs	r1, #255	; 0xff
 8006902:	20e2      	movs	r0, #226	; 0xe2
 8006904:	f7ff ff56 	bl	80067b4 <NRF24_write_register>
}
 8006908:	bf00      	nop
 800690a:	bd80      	pop	{r7, pc}

0800690c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8006912:	2007      	movs	r0, #7
 8006914:	f7ff fefe 	bl	8006714 <NRF24_read_register>
 8006918:	4603      	mov	r3, r0
 800691a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800691c:	79fb      	ldrb	r3, [r7, #7]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8006928:	b082      	sub	sp, #8
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
 8006938:	4613      	mov	r3, r2
 800693a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800693c:	4b66      	ldr	r3, [pc, #408]	; (8006ad8 <NRF24_begin+0x1b0>)
 800693e:	4618      	mov	r0, r3
 8006940:	f107 031c 	add.w	r3, r7, #28
 8006944:	2264      	movs	r2, #100	; 0x64
 8006946:	4619      	mov	r1, r3
 8006948:	f001 f894 	bl	8007a74 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800694c:	4a63      	ldr	r2, [pc, #396]	; (8006adc <NRF24_begin+0x1b4>)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8006952:	4a63      	ldr	r2, [pc, #396]	; (8006ae0 <NRF24_begin+0x1b8>)
 8006954:	887b      	ldrh	r3, [r7, #2]
 8006956:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8006958:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <NRF24_begin+0x1bc>)
 800695a:	883b      	ldrh	r3, [r7, #0]
 800695c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800695e:	2001      	movs	r0, #1
 8006960:	f7ff fe98 	bl	8006694 <NRF24_csn>
	NRF24_ce(0);
 8006964:	2000      	movs	r0, #0
 8006966:	f7ff feb5 	bl	80066d4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800696a:	2005      	movs	r0, #5
 800696c:	f7f9 fcee 	bl	800034c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8006970:	2108      	movs	r1, #8
 8006972:	2000      	movs	r0, #0
 8006974:	f7ff ff1e 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8006978:	213f      	movs	r1, #63	; 0x3f
 800697a:	2001      	movs	r0, #1
 800697c:	f7ff ff1a 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8006980:	2103      	movs	r1, #3
 8006982:	2002      	movs	r0, #2
 8006984:	f7ff ff16 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8006988:	2103      	movs	r1, #3
 800698a:	2003      	movs	r0, #3
 800698c:	f7ff ff12 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8006990:	2103      	movs	r1, #3
 8006992:	2004      	movs	r0, #4
 8006994:	f7ff ff0e 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8006998:	2102      	movs	r1, #2
 800699a:	2005      	movs	r0, #5
 800699c:	f7ff ff0a 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80069a0:	210f      	movs	r1, #15
 80069a2:	2006      	movs	r0, #6
 80069a4:	f7ff ff06 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80069a8:	210e      	movs	r1, #14
 80069aa:	2007      	movs	r0, #7
 80069ac:	f7ff ff02 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80069b0:	2100      	movs	r1, #0
 80069b2:	2008      	movs	r0, #8
 80069b4:	f7ff fefe 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80069b8:	2100      	movs	r1, #0
 80069ba:	2009      	movs	r0, #9
 80069bc:	f7ff fefa 	bl	80067b4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80069c0:	23e7      	movs	r3, #231	; 0xe7
 80069c2:	733b      	strb	r3, [r7, #12]
 80069c4:	23e7      	movs	r3, #231	; 0xe7
 80069c6:	72fb      	strb	r3, [r7, #11]
 80069c8:	23e7      	movs	r3, #231	; 0xe7
 80069ca:	72bb      	strb	r3, [r7, #10]
 80069cc:	23e7      	movs	r3, #231	; 0xe7
 80069ce:	727b      	strb	r3, [r7, #9]
 80069d0:	23e7      	movs	r3, #231	; 0xe7
 80069d2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80069d4:	f107 0308 	add.w	r3, r7, #8
 80069d8:	2205      	movs	r2, #5
 80069da:	4619      	mov	r1, r3
 80069dc:	200a      	movs	r0, #10
 80069de:	f7ff ff0b 	bl	80067f8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80069e2:	23c2      	movs	r3, #194	; 0xc2
 80069e4:	733b      	strb	r3, [r7, #12]
 80069e6:	23c2      	movs	r3, #194	; 0xc2
 80069e8:	72fb      	strb	r3, [r7, #11]
 80069ea:	23c2      	movs	r3, #194	; 0xc2
 80069ec:	72bb      	strb	r3, [r7, #10]
 80069ee:	23c2      	movs	r3, #194	; 0xc2
 80069f0:	727b      	strb	r3, [r7, #9]
 80069f2:	23c2      	movs	r3, #194	; 0xc2
 80069f4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80069f6:	f107 0308 	add.w	r3, r7, #8
 80069fa:	2205      	movs	r2, #5
 80069fc:	4619      	mov	r1, r3
 80069fe:	200b      	movs	r0, #11
 8006a00:	f7ff fefa 	bl	80067f8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8006a04:	21c3      	movs	r1, #195	; 0xc3
 8006a06:	200c      	movs	r0, #12
 8006a08:	f7ff fed4 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8006a0c:	21c4      	movs	r1, #196	; 0xc4
 8006a0e:	200d      	movs	r0, #13
 8006a10:	f7ff fed0 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8006a14:	21c5      	movs	r1, #197	; 0xc5
 8006a16:	200e      	movs	r0, #14
 8006a18:	f7ff fecc 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8006a1c:	21c6      	movs	r1, #198	; 0xc6
 8006a1e:	200f      	movs	r0, #15
 8006a20:	f7ff fec8 	bl	80067b4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8006a24:	23e7      	movs	r3, #231	; 0xe7
 8006a26:	733b      	strb	r3, [r7, #12]
 8006a28:	23e7      	movs	r3, #231	; 0xe7
 8006a2a:	72fb      	strb	r3, [r7, #11]
 8006a2c:	23e7      	movs	r3, #231	; 0xe7
 8006a2e:	72bb      	strb	r3, [r7, #10]
 8006a30:	23e7      	movs	r3, #231	; 0xe7
 8006a32:	727b      	strb	r3, [r7, #9]
 8006a34:	23e7      	movs	r3, #231	; 0xe7
 8006a36:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	4619      	mov	r1, r3
 8006a40:	2010      	movs	r0, #16
 8006a42:	f7ff fed9 	bl	80067f8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8006a46:	2100      	movs	r1, #0
 8006a48:	2011      	movs	r0, #17
 8006a4a:	f7ff feb3 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8006a4e:	2100      	movs	r1, #0
 8006a50:	2012      	movs	r0, #18
 8006a52:	f7ff feaf 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8006a56:	2100      	movs	r1, #0
 8006a58:	2013      	movs	r0, #19
 8006a5a:	f7ff feab 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8006a5e:	2100      	movs	r1, #0
 8006a60:	2014      	movs	r0, #20
 8006a62:	f7ff fea7 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8006a66:	2100      	movs	r1, #0
 8006a68:	2015      	movs	r0, #21
 8006a6a:	f7ff fea3 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	2016      	movs	r0, #22
 8006a72:	f7ff fe9f 	bl	80067b4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8006a76:	f000 fb0f 	bl	8007098 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	201c      	movs	r0, #28
 8006a7e:	f7ff fe99 	bl	80067b4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8006a82:	2100      	movs	r1, #0
 8006a84:	201d      	movs	r0, #29
 8006a86:	f7ff fe95 	bl	80067b4 <NRF24_write_register>
	printRadioSettings();
 8006a8a:	f000 fb1f 	bl	80070cc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8006a8e:	210f      	movs	r1, #15
 8006a90:	200f      	movs	r0, #15
 8006a92:	f000 f941 	bl	8006d18 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8006a96:	2003      	movs	r0, #3
 8006a98:	f000 f9b2 	bl	8006e00 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f000 f9e9 	bl	8006e74 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8006aa2:	2002      	movs	r0, #2
 8006aa4:	f000 fa2c 	bl	8006f00 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8006aa8:	f000 f992 	bl	8006dd0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8006aac:	2020      	movs	r0, #32
 8006aae:	f000 f963 	bl	8006d78 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8006ab2:	f000 fae8 	bl	8007086 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8006ab6:	204c      	movs	r0, #76	; 0x4c
 8006ab8:	f000 f949 	bl	8006d4e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8006abc:	f7ff ff16 	bl	80068ec <NRF24_flush_tx>
	NRF24_flush_rx();
 8006ac0:	f7ff ff1c 	bl	80068fc <NRF24_flush_rx>

	NRF24_powerDown();
 8006ac4:	f000 fa44 	bl	8006f50 <NRF24_powerDown>

}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad2:	b002      	add	sp, #8
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	200000a8 	.word	0x200000a8
 8006adc:	200000a0 	.word	0x200000a0
 8006ae0:	200000a4 	.word	0x200000a4
 8006ae4:	200000a6 	.word	0x200000a6

08006ae8 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8006ae8:	b598      	push	{r3, r4, r7, lr}
 8006aea:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8006aec:	2000      	movs	r0, #0
 8006aee:	f7ff fe11 	bl	8006714 <NRF24_read_register>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f043 0303 	orr.w	r3, r3, #3
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	4619      	mov	r1, r3
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7ff fe59 	bl	80067b4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <NRF24_startListening+0x48>)
 8006b04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b08:	4323      	orrs	r3, r4
 8006b0a:	d004      	beq.n	8006b16 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8006b0c:	2205      	movs	r2, #5
 8006b0e:	4908      	ldr	r1, [pc, #32]	; (8006b30 <NRF24_startListening+0x48>)
 8006b10:	200a      	movs	r0, #10
 8006b12:	f7ff fe71 	bl	80067f8 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8006b16:	f7ff fee9 	bl	80068ec <NRF24_flush_tx>
	NRF24_flush_rx();
 8006b1a:	f7ff feef 	bl	80068fc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8006b1e:	2001      	movs	r0, #1
 8006b20:	f7ff fdd8 	bl	80066d4 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8006b24:	2096      	movs	r0, #150	; 0x96
 8006b26:	f7ff fd95 	bl	8006654 <NRF24_DelayMicroSeconds>
}
 8006b2a:	bf00      	nop
 8006b2c:	bd98      	pop	{r3, r4, r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000090 	.word	0x20000090

08006b34 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f7ff fdcb 	bl	80066d4 <NRF24_ce>
	NRF24_flush_tx();
 8006b3e:	f7ff fed5 	bl	80068ec <NRF24_flush_tx>
	NRF24_flush_rx();
 8006b42:	f7ff fedb 	bl	80068fc <NRF24_flush_rx>
}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8006b58:	f000 fa95 	bl	8007086 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8006b5c:	78fb      	ldrb	r3, [r7, #3]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fa34 	bl	8006fce <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8006b66:	f7f9 fbe5 	bl	8000334 <HAL_GetTick>
 8006b6a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8006b6c:	230a      	movs	r3, #10
 8006b6e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8006b70:	f107 030d 	add.w	r3, r7, #13
 8006b74:	2201      	movs	r2, #1
 8006b76:	4619      	mov	r1, r3
 8006b78:	2008      	movs	r0, #8
 8006b7a:	f7ff fdf3 	bl	8006764 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8006b7e:	f7ff fec5 	bl	800690c <NRF24_get_status>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <NRF24_write+0x54>
 8006b90:	f7f9 fbd0 	bl	8000334 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d8e7      	bhi.n	8006b70 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8006ba0:	f107 010b 	add.w	r1, r7, #11
 8006ba4:	f107 030c 	add.w	r3, r7, #12
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <NRF24_write+0x90>)
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fa38 	bl	8007020 <NRF24_whatHappened>
	retStatus = tx_ok;
 8006bb0:	7b3b      	ldrb	r3, [r7, #12]
 8006bb2:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8006bb4:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <NRF24_write+0x90>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8006bbc:	f000 f900 	bl	8006dc0 <NRF24_getDynamicPayloadSize>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <NRF24_write+0x94>)
 8006bc6:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8006bc8:	f000 f80c 	bl	8006be4 <NRF24_available>
	NRF24_flush_tx();
 8006bcc:	f7ff fe8e 	bl	80068ec <NRF24_flush_tx>
	return retStatus;
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000098 	.word	0x20000098
 8006be0:	20000099 	.word	0x20000099

08006be4 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8006be8:	2000      	movs	r0, #0
 8006bea:	f000 f9c0 	bl	8006f6e <NRF24_availablePipe>
 8006bee:	4603      	mov	r3, r0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff fe41 	bl	800688c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8006c0a:	2017      	movs	r0, #23
 8006c0c:	f7ff fd82 	bl	8006714 <NRF24_read_register>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8006c18:	f7ff fe70 	bl	80068fc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8006c1c:	f000 f8d0 	bl	8006dc0 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf14      	ite	ne
 8006c26:	2301      	movne	r3, #1
 8006c28:	2300      	moveq	r3, #0
 8006c2a:	b2db      	uxtb	r3, r3
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8006c3e:	463b      	mov	r3, r7
 8006c40:	2205      	movs	r2, #5
 8006c42:	4619      	mov	r1, r3
 8006c44:	200a      	movs	r0, #10
 8006c46:	f7ff fdd7 	bl	80067f8 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	2205      	movs	r2, #5
 8006c4e:	4619      	mov	r1, r3
 8006c50:	2010      	movs	r0, #16
 8006c52:	f7ff fdd1 	bl	80067f8 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8006c56:	2320      	movs	r3, #32
 8006c58:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <NRF24_openWritingPipe+0x44>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	7bfa      	ldrb	r2, [r7, #15]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bf28      	it	cs
 8006c64:	4613      	movcs	r3, r2
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4619      	mov	r1, r3
 8006c6a:	2011      	movs	r0, #17
 8006c6c:	f7ff fda2 	bl	80067b4 <NRF24_write_register>
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000009a 	.word	0x2000009a

08006c7c <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4601      	mov	r1, r0
 8006c84:	e9c7 2300 	strd	r2, r3, [r7]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8006c92:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	; (8006d08 <NRF24_openReadingPipe+0x8c>)
 8006c98:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d82d      	bhi.n	8006cfe <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d808      	bhi.n	8006cba <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4a18      	ldr	r2, [pc, #96]	; (8006d0c <NRF24_openReadingPipe+0x90>)
 8006cac:	5cd3      	ldrb	r3, [r2, r3]
 8006cae:	4639      	mov	r1, r7
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fda0 	bl	80067f8 <NRF24_write_registerN>
 8006cb8:	e007      	b.n	8006cca <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <NRF24_openReadingPipe+0x90>)
 8006cbe:	5cd3      	ldrb	r3, [r2, r3]
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fd97 	bl	80067f8 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <NRF24_openReadingPipe+0x94>)
 8006cce:	5cd2      	ldrb	r2, [r2, r3]
 8006cd0:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <NRF24_openReadingPipe+0x98>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f7ff fd6c 	bl	80067b4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8006cdc:	2002      	movs	r0, #2
 8006cde:	f7ff fd19 	bl	8006714 <NRF24_read_register>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	b25a      	sxtb	r2, r3
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2101      	movs	r1, #1
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	2002      	movs	r0, #2
 8006cfa:	f7ff fd5b 	bl	80067b4 <NRF24_write_register>
	}

}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd90      	pop	{r4, r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000090 	.word	0x20000090
 8006d0c:	08008a70 	.word	0x08008a70
 8006d10:	08008a78 	.word	0x08008a78
 8006d14:	2000009a 	.word	0x2000009a

08006d18 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460a      	mov	r2, r1
 8006d22:	71fb      	strb	r3, [r7, #7]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	b25a      	sxtb	r2, r3
 8006d2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	4619      	mov	r1, r3
 8006d40:	2004      	movs	r0, #4
 8006d42:	f7ff fd37 	bl	80067b4 <NRF24_write_register>
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	4603      	mov	r3, r0
 8006d56:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8006d58:	237f      	movs	r3, #127	; 0x7f
 8006d5a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8006d5c:	7bfa      	ldrb	r2, [r7, #15]
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	bf28      	it	cs
 8006d64:	4613      	movcs	r3, r2
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	2005      	movs	r0, #5
 8006d6c:	f7ff fd22 	bl	80067b4 <NRF24_write_register>
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8006d82:	2320      	movs	r3, #32
 8006d84:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bf28      	it	cs
 8006d8e:	4613      	movcs	r3, r2
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <NRF24_setPayloadSize+0x2c>)
 8006d94:	701a      	strb	r2, [r3, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	2000009a 	.word	0x2000009a

08006da8 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
	return payload_size;
 8006dac:	4b03      	ldr	r3, [pc, #12]	; (8006dbc <NRF24_getPayloadSize+0x14>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	2000009a 	.word	0x2000009a

08006dc0 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8006dc4:	2060      	movs	r0, #96	; 0x60
 8006dc6:	f7ff fca5 	bl	8006714 <NRF24_read_register>
 8006dca:	4603      	mov	r3, r0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8006dd4:	201d      	movs	r0, #29
 8006dd6:	f7ff fc9d 	bl	8006714 <NRF24_read_register>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f023 0304 	bic.w	r3, r3, #4
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	4619      	mov	r1, r3
 8006de4:	201d      	movs	r0, #29
 8006de6:	f7ff fce5 	bl	80067b4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8006dea:	2100      	movs	r1, #0
 8006dec:	201c      	movs	r0, #28
 8006dee:	f7ff fce1 	bl	80067b4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8006df2:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <NRF24_disableDynamicPayloads+0x2c>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	2000009b 	.word	0x2000009b

08006e00 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8006e0a:	2006      	movs	r0, #6
 8006e0c:	f7ff fc82 	bl	8006714 <NRF24_read_register>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	f023 0306 	bic.w	r3, r3, #6
 8006e1a:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d104      	bne.n	8006e2c <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	f043 0306 	orr.w	r3, r3, #6
 8006e28:	73fb      	strb	r3, [r7, #15]
 8006e2a:	e019      	b.n	8006e60 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d104      	bne.n	8006e3c <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e011      	b.n	8006e60 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d104      	bne.n	8006e4c <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	f043 0302 	orr.w	r3, r3, #2
 8006e48:	73fb      	strb	r3, [r7, #15]
 8006e4a:	e009      	b.n	8006e60 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d103      	bne.n	8006e60 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	f043 0306 	orr.w	r3, r3, #6
 8006e5e:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	4619      	mov	r1, r3
 8006e64:	2006      	movs	r0, #6
 8006e66:	f7ff fca5 	bl	80067b4 <NRF24_write_register>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8006e82:	2006      	movs	r0, #6
 8006e84:	f7ff fc46 	bl	8006714 <NRF24_read_register>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	; (8006efc <NRF24_setDataRate+0x88>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006e98:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d107      	bne.n	8006eb0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8006ea0:	4b16      	ldr	r3, [pc, #88]	; (8006efc <NRF24_setDataRate+0x88>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	f043 0320 	orr.w	r3, r3, #32
 8006eac:	73bb      	strb	r3, [r7, #14]
 8006eae:	e00d      	b.n	8006ecc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <NRF24_setDataRate+0x88>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	f043 0308 	orr.w	r3, r3, #8
 8006ec2:	73bb      	strb	r3, [r7, #14]
 8006ec4:	e002      	b.n	8006ecc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <NRF24_setDataRate+0x88>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	2006      	movs	r0, #6
 8006ed2:	f7ff fc6f 	bl	80067b4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8006ed6:	2006      	movs	r0, #6
 8006ed8:	f7ff fc1c 	bl	8006714 <NRF24_read_register>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d102      	bne.n	8006eec <NRF24_setDataRate+0x78>
  {
    result = true;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	73fb      	strb	r3, [r7, #15]
 8006eea:	e002      	b.n	8006ef2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8006eec:	4b03      	ldr	r3, [pc, #12]	; (8006efc <NRF24_setDataRate+0x88>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	2000009c 	.word	0x2000009c

08006f00 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f7ff fc02 	bl	8006714 <NRF24_read_register>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f023 030c 	bic.w	r3, r3, #12
 8006f16:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00f      	beq.n	8006f3e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d104      	bne.n	8006f2e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	f043 0308 	orr.w	r3, r3, #8
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	e007      	b.n	8006f3e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	f043 0308 	orr.w	r3, r3, #8
 8006f34:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	f043 0304 	orr.w	r3, r3, #4
 8006f3c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	4619      	mov	r1, r3
 8006f42:	2000      	movs	r0, #0
 8006f44:	f7ff fc36 	bl	80067b4 <NRF24_write_register>
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8006f54:	2000      	movs	r0, #0
 8006f56:	f7ff fbdd 	bl	8006714 <NRF24_read_register>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	2000      	movs	r0, #0
 8006f66:	f7ff fc25 	bl	80067b4 <NRF24_write_register>
}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8006f76:	f7ff fcc9 	bl	800690c <NRF24_get_status>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d017      	beq.n	8006fc4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8006faa:	2140      	movs	r1, #64	; 0x40
 8006fac:	2007      	movs	r0, #7
 8006fae:	f7ff fc01 	bl	80067b4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8006fbc:	2120      	movs	r1, #32
 8006fbe:	2007      	movs	r0, #7
 8006fc0:	f7ff fbf8 	bl	80067b4 <NRF24_write_register>
    }
  }
  return result;
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f7ff fb9a 	bl	8006714 <NRF24_read_register>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f043 0302 	orr.w	r3, r3, #2
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f7ff fbdf 	bl	80067b4 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8006ff6:	2096      	movs	r0, #150	; 0x96
 8006ff8:	f7ff fb2c 	bl	8006654 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fc21 	bl	8006848 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8007006:	2001      	movs	r0, #1
 8007008:	f7ff fb64 	bl	80066d4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800700c:	200f      	movs	r0, #15
 800700e:	f7ff fb21 	bl	8006654 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8007012:	2000      	movs	r0, #0
 8007014:	f7ff fb5e 	bl	80066d4 <NRF24_ce>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 800702c:	f7ff fc6e 	bl	800690c <NRF24_get_status>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800703a:	2170      	movs	r1, #112	; 0x70
 800703c:	2007      	movs	r0, #7
 800703e:	f7ff fbb9 	bl	80067b4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2da      	uxtb	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	bf14      	ite	ne
 8007060:	2301      	movne	r3, #1
 8007062:	2300      	moveq	r3, #0
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2da      	uxtb	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	701a      	strb	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800708a:	2170      	movs	r1, #112	; 0x70
 800708c:	2007      	movs	r0, #7
 800708e:	f7ff fb91 	bl	80067b4 <NRF24_write_register>
}
 8007092:	bf00      	nop
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800709e:	2000      	movs	r0, #0
 80070a0:	f7ff faf8 	bl	8006694 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80070a4:	2350      	movs	r3, #80	; 0x50
 80070a6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80070a8:	2373      	movs	r3, #115	; 0x73
 80070aa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80070ac:	1d39      	adds	r1, r7, #4
 80070ae:	2364      	movs	r3, #100	; 0x64
 80070b0:	2202      	movs	r2, #2
 80070b2:	4805      	ldr	r0, [pc, #20]	; (80070c8 <NRF24_ACTIVATE_cmd+0x30>)
 80070b4:	f7fa ff66 	bl	8001f84 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80070b8:	2001      	movs	r0, #1
 80070ba:	f7ff faeb 	bl	8006694 <NRF24_csn>
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200000a8 	.word	0x200000a8

080070cc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80070cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ce:	b0a1      	sub	sp, #132	; 0x84
 80070d0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80070d2:	f107 0308 	add.w	r3, r7, #8
 80070d6:	4ab6      	ldr	r2, [pc, #728]	; (80073b0 <printRadioSettings+0x2e4>)
 80070d8:	461c      	mov	r4, r3
 80070da:	4615      	mov	r5, r2
 80070dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	8022      	strh	r2, [r4, #0]
 80070ee:	3402      	adds	r4, #2
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7f9 f869 	bl	80001d0 <strlen>
 80070fe:	4603      	mov	r3, r0
 8007100:	b29a      	uxth	r2, r3
 8007102:	f107 0108 	add.w	r1, r7, #8
 8007106:	230a      	movs	r3, #10
 8007108:	48aa      	ldr	r0, [pc, #680]	; (80073b4 <printRadioSettings+0x2e8>)
 800710a:	f7fc fc7a 	bl	8003a02 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800710e:	2000      	movs	r0, #0
 8007110:	f7ff fb00 	bl	8006714 <NRF24_read_register>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800711a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d020      	beq.n	8007168 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8007126:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <printRadioSettings+0x7e>
 8007132:	f107 0308 	add.w	r3, r7, #8
 8007136:	4aa0      	ldr	r2, [pc, #640]	; (80073b8 <printRadioSettings+0x2ec>)
 8007138:	461c      	mov	r4, r3
 800713a:	4615      	mov	r5, r2
 800713c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800713e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007140:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007148:	e017      	b.n	800717a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800714a:	f107 0308 	add.w	r3, r7, #8
 800714e:	4a9b      	ldr	r2, [pc, #620]	; (80073bc <printRadioSettings+0x2f0>)
 8007150:	461c      	mov	r4, r3
 8007152:	4615      	mov	r5, r2
 8007154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800715c:	c403      	stmia	r4!, {r0, r1}
 800715e:	8022      	strh	r2, [r4, #0]
 8007160:	3402      	adds	r4, #2
 8007162:	0c13      	lsrs	r3, r2, #16
 8007164:	7023      	strb	r3, [r4, #0]
 8007166:	e008      	b.n	800717a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	4a94      	ldr	r2, [pc, #592]	; (80073c0 <printRadioSettings+0x2f4>)
 800716e:	461c      	mov	r4, r3
 8007170:	4615      	mov	r5, r2
 8007172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007176:	682b      	ldr	r3, [r5, #0]
 8007178:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800717a:	f107 0308 	add.w	r3, r7, #8
 800717e:	4618      	mov	r0, r3
 8007180:	f7f9 f826 	bl	80001d0 <strlen>
 8007184:	4603      	mov	r3, r0
 8007186:	b29a      	uxth	r2, r3
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	230a      	movs	r3, #10
 800718e:	4889      	ldr	r0, [pc, #548]	; (80073b4 <printRadioSettings+0x2e8>)
 8007190:	f7fc fc37 	bl	8003a02 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8007194:	2001      	movs	r0, #1
 8007196:	f7ff fabd 	bl	8006714 <NRF24_read_register>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071a4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bfcc      	ite	gt
 80071ac:	2301      	movgt	r3, #1
 80071ae:	2300      	movle	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071b8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfcc      	ite	gt
 80071c0:	2301      	movgt	r3, #1
 80071c2:	2300      	movle	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071cc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bfcc      	ite	gt
 80071d4:	2301      	movgt	r3, #1
 80071d6:	2300      	movle	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071e0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfcc      	ite	gt
 80071e8:	2301      	movgt	r3, #1
 80071ea:	2300      	movle	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80071f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80071f4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfcc      	ite	gt
 80071fc:	2301      	movgt	r3, #1
 80071fe:	2300      	movle	r3, #0
 8007200:	b2db      	uxtb	r3, r3
 8007202:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007204:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007208:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfcc      	ite	gt
 8007210:	2301      	movgt	r3, #1
 8007212:	2300      	movle	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f107 0008 	add.w	r0, r7, #8
 800721a:	9303      	str	r3, [sp, #12]
 800721c:	9402      	str	r4, [sp, #8]
 800721e:	9101      	str	r1, [sp, #4]
 8007220:	9200      	str	r2, [sp, #0]
 8007222:	4633      	mov	r3, r6
 8007224:	462a      	mov	r2, r5
 8007226:	4967      	ldr	r1, [pc, #412]	; (80073c4 <printRadioSettings+0x2f8>)
 8007228:	f000 fc38 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4618      	mov	r0, r3
 8007232:	f7f8 ffcd 	bl	80001d0 <strlen>
 8007236:	4603      	mov	r3, r0
 8007238:	b29a      	uxth	r2, r3
 800723a:	f107 0108 	add.w	r1, r7, #8
 800723e:	230a      	movs	r3, #10
 8007240:	485c      	ldr	r0, [pc, #368]	; (80073b4 <printRadioSettings+0x2e8>)
 8007242:	f7fc fbde 	bl	8003a02 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8007246:	2002      	movs	r0, #2
 8007248:	f7ff fa64 	bl	8006714 <NRF24_read_register>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007252:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007256:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfcc      	ite	gt
 800725e:	2301      	movgt	r3, #1
 8007260:	2300      	movle	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007266:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800726a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800726e:	2b00      	cmp	r3, #0
 8007270:	bfcc      	ite	gt
 8007272:	2301      	movgt	r3, #1
 8007274:	2300      	movle	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800727a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800727e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfcc      	ite	gt
 8007286:	2301      	movgt	r3, #1
 8007288:	2300      	movle	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800728e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007292:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007296:	2b00      	cmp	r3, #0
 8007298:	bfcc      	ite	gt
 800729a:	2301      	movgt	r3, #1
 800729c:	2300      	movle	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80072a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072a6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfcc      	ite	gt
 80072ae:	2301      	movgt	r3, #1
 80072b0:	2300      	movle	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80072b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072ba:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bfcc      	ite	gt
 80072c2:	2301      	movgt	r3, #1
 80072c4:	2300      	movle	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f107 0008 	add.w	r0, r7, #8
 80072cc:	9303      	str	r3, [sp, #12]
 80072ce:	9402      	str	r4, [sp, #8]
 80072d0:	9101      	str	r1, [sp, #4]
 80072d2:	9200      	str	r2, [sp, #0]
 80072d4:	4633      	mov	r3, r6
 80072d6:	462a      	mov	r2, r5
 80072d8:	493b      	ldr	r1, [pc, #236]	; (80073c8 <printRadioSettings+0x2fc>)
 80072da:	f000 fbdf 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80072de:	f107 0308 	add.w	r3, r7, #8
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7f8 ff74 	bl	80001d0 <strlen>
 80072e8:	4603      	mov	r3, r0
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	f107 0108 	add.w	r1, r7, #8
 80072f0:	230a      	movs	r3, #10
 80072f2:	4830      	ldr	r0, [pc, #192]	; (80073b4 <printRadioSettings+0x2e8>)
 80072f4:	f7fc fb85 	bl	8003a02 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80072f8:	2003      	movs	r0, #3
 80072fa:	f7ff fa0b 	bl	8006714 <NRF24_read_register>
 80072fe:	4603      	mov	r3, r0
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8007308:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800730c:	3302      	adds	r3, #2
 800730e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8007312:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007316:	f107 0308 	add.w	r3, r7, #8
 800731a:	492c      	ldr	r1, [pc, #176]	; (80073cc <printRadioSettings+0x300>)
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fbbd 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007322:	f107 0308 	add.w	r3, r7, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f7f8 ff52 	bl	80001d0 <strlen>
 800732c:	4603      	mov	r3, r0
 800732e:	b29a      	uxth	r2, r3
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	230a      	movs	r3, #10
 8007336:	481f      	ldr	r0, [pc, #124]	; (80073b4 <printRadioSettings+0x2e8>)
 8007338:	f7fc fb63 	bl	8003a02 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800733c:	2005      	movs	r0, #5
 800733e:	f7ff f9e9 	bl	8006714 <NRF24_read_register>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8007348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800734c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007350:	f107 0308 	add.w	r3, r7, #8
 8007354:	491e      	ldr	r1, [pc, #120]	; (80073d0 <printRadioSettings+0x304>)
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fba0 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800735c:	f107 0308 	add.w	r3, r7, #8
 8007360:	4618      	mov	r0, r3
 8007362:	f7f8 ff35 	bl	80001d0 <strlen>
 8007366:	4603      	mov	r3, r0
 8007368:	b29a      	uxth	r2, r3
 800736a:	f107 0108 	add.w	r1, r7, #8
 800736e:	230a      	movs	r3, #10
 8007370:	4810      	ldr	r0, [pc, #64]	; (80073b4 <printRadioSettings+0x2e8>)
 8007372:	f7fc fb46 	bl	8003a02 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8007376:	2006      	movs	r0, #6
 8007378:	f7ff f9cc 	bl	8006714 <NRF24_read_register>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8007382:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d024      	beq.n	80073d8 <printRadioSettings+0x30c>
 800738e:	f107 0308 	add.w	r3, r7, #8
 8007392:	4a10      	ldr	r2, [pc, #64]	; (80073d4 <printRadioSettings+0x308>)
 8007394:	461c      	mov	r4, r3
 8007396:	4615      	mov	r5, r2
 8007398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800739a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80073a0:	6020      	str	r0, [r4, #0]
 80073a2:	3404      	adds	r4, #4
 80073a4:	8021      	strh	r1, [r4, #0]
 80073a6:	3402      	adds	r4, #2
 80073a8:	0c0b      	lsrs	r3, r1, #16
 80073aa:	7023      	strb	r3, [r4, #0]
 80073ac:	e023      	b.n	80073f6 <printRadioSettings+0x32a>
 80073ae:	bf00      	nop
 80073b0:	080084f0 	.word	0x080084f0
 80073b4:	2000010c 	.word	0x2000010c
 80073b8:	08008524 	.word	0x08008524
 80073bc:	08008540 	.word	0x08008540
 80073c0:	0800855c 	.word	0x0800855c
 80073c4:	08008570 	.word	0x08008570
 80073c8:	080085b4 	.word	0x080085b4
 80073cc:	08008600 	.word	0x08008600
 80073d0:	0800861c 	.word	0x0800861c
 80073d4:	08008630 	.word	0x08008630
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4a29      	ldr	r2, [pc, #164]	; (8007484 <printRadioSettings+0x3b8>)
 80073de:	461c      	mov	r4, r3
 80073e0:	4615      	mov	r5, r2
 80073e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80073ea:	6020      	str	r0, [r4, #0]
 80073ec:	3404      	adds	r4, #4
 80073ee:	8021      	strh	r1, [r4, #0]
 80073f0:	3402      	adds	r4, #2
 80073f2:	0c0b      	lsrs	r3, r1, #16
 80073f4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80073f6:	f107 0308 	add.w	r3, r7, #8
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7f8 fee8 	bl	80001d0 <strlen>
 8007400:	4603      	mov	r3, r0
 8007402:	b29a      	uxth	r2, r3
 8007404:	f107 0108 	add.w	r1, r7, #8
 8007408:	230a      	movs	r3, #10
 800740a:	481f      	ldr	r0, [pc, #124]	; (8007488 <printRadioSettings+0x3bc>)
 800740c:	f7fc faf9 	bl	8003a02 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8007410:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007414:	f003 0306 	and.w	r3, r3, #6
 8007418:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800741c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8007426:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <printRadioSettings+0x376>
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <printRadioSettings+0x3c0>)
 8007434:	461c      	mov	r4, r3
 8007436:	4615      	mov	r5, r2
 8007438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800743a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	e037      	b.n	80074b2 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8007442:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007446:	2b01      	cmp	r3, #1
 8007448:	d109      	bne.n	800745e <printRadioSettings+0x392>
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <printRadioSettings+0x3c4>)
 8007450:	461c      	mov	r4, r3
 8007452:	4615      	mov	r5, r2
 8007454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	e029      	b.n	80074b2 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800745e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007462:	2b02      	cmp	r3, #2
 8007464:	d118      	bne.n	8007498 <printRadioSettings+0x3cc>
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4a0a      	ldr	r2, [pc, #40]	; (8007494 <printRadioSettings+0x3c8>)
 800746c:	461c      	mov	r4, r3
 800746e:	4615      	mov	r5, r2
 8007470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	8022      	strh	r2, [r4, #0]
 800747a:	3402      	adds	r4, #2
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	7023      	strb	r3, [r4, #0]
 8007480:	e017      	b.n	80074b2 <printRadioSettings+0x3e6>
 8007482:	bf00      	nop
 8007484:	08008648 	.word	0x08008648
 8007488:	2000010c 	.word	0x2000010c
 800748c:	08008660 	.word	0x08008660
 8007490:	08008674 	.word	0x08008674
 8007494:	08008688 	.word	0x08008688
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8007498:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800749c:	2b03      	cmp	r3, #3
 800749e:	d108      	bne.n	80074b2 <printRadioSettings+0x3e6>
 80074a0:	f107 0308 	add.w	r3, r7, #8
 80074a4:	4ad7      	ldr	r2, [pc, #860]	; (8007804 <printRadioSettings+0x738>)
 80074a6:	461c      	mov	r4, r3
 80074a8:	4615      	mov	r5, r2
 80074aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80074b2:	f107 0308 	add.w	r3, r7, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7f8 fe8a 	bl	80001d0 <strlen>
 80074bc:	4603      	mov	r3, r0
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f107 0108 	add.w	r1, r7, #8
 80074c4:	230a      	movs	r3, #10
 80074c6:	48d0      	ldr	r0, [pc, #832]	; (8007808 <printRadioSettings+0x73c>)
 80074c8:	f7fc fa9b 	bl	8003a02 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80074cc:	463b      	mov	r3, r7
 80074ce:	2205      	movs	r2, #5
 80074d0:	4619      	mov	r1, r3
 80074d2:	200a      	movs	r0, #10
 80074d4:	f7ff f946 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80074d8:	793b      	ldrb	r3, [r7, #4]
 80074da:	461c      	mov	r4, r3
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	461d      	mov	r5, r3
 80074e0:	78bb      	ldrb	r3, [r7, #2]
 80074e2:	787a      	ldrb	r2, [r7, #1]
 80074e4:	7839      	ldrb	r1, [r7, #0]
 80074e6:	f107 0008 	add.w	r0, r7, #8
 80074ea:	9102      	str	r1, [sp, #8]
 80074ec:	9201      	str	r2, [sp, #4]
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	462b      	mov	r3, r5
 80074f2:	4622      	mov	r2, r4
 80074f4:	49c5      	ldr	r1, [pc, #788]	; (800780c <printRadioSettings+0x740>)
 80074f6:	f000 fad1 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	4618      	mov	r0, r3
 8007500:	f7f8 fe66 	bl	80001d0 <strlen>
 8007504:	4603      	mov	r3, r0
 8007506:	b29a      	uxth	r2, r3
 8007508:	f107 0108 	add.w	r1, r7, #8
 800750c:	230a      	movs	r3, #10
 800750e:	48be      	ldr	r0, [pc, #760]	; (8007808 <printRadioSettings+0x73c>)
 8007510:	f7fc fa77 	bl	8003a02 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8007514:	463b      	mov	r3, r7
 8007516:	2205      	movs	r2, #5
 8007518:	4619      	mov	r1, r3
 800751a:	200b      	movs	r0, #11
 800751c:	f7ff f922 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8007520:	793b      	ldrb	r3, [r7, #4]
 8007522:	461c      	mov	r4, r3
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	461d      	mov	r5, r3
 8007528:	78bb      	ldrb	r3, [r7, #2]
 800752a:	787a      	ldrb	r2, [r7, #1]
 800752c:	7839      	ldrb	r1, [r7, #0]
 800752e:	f107 0008 	add.w	r0, r7, #8
 8007532:	9102      	str	r1, [sp, #8]
 8007534:	9201      	str	r2, [sp, #4]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	462b      	mov	r3, r5
 800753a:	4622      	mov	r2, r4
 800753c:	49b4      	ldr	r1, [pc, #720]	; (8007810 <printRadioSettings+0x744>)
 800753e:	f000 faad 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	4618      	mov	r0, r3
 8007548:	f7f8 fe42 	bl	80001d0 <strlen>
 800754c:	4603      	mov	r3, r0
 800754e:	b29a      	uxth	r2, r3
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	230a      	movs	r3, #10
 8007556:	48ac      	ldr	r0, [pc, #688]	; (8007808 <printRadioSettings+0x73c>)
 8007558:	f7fc fa53 	bl	8003a02 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800755c:	463b      	mov	r3, r7
 800755e:	2201      	movs	r2, #1
 8007560:	4619      	mov	r1, r3
 8007562:	200c      	movs	r0, #12
 8007564:	f7ff f8fe 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007568:	783b      	ldrb	r3, [r7, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	f107 0308 	add.w	r3, r7, #8
 8007570:	49a8      	ldr	r1, [pc, #672]	; (8007814 <printRadioSettings+0x748>)
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fa92 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	4618      	mov	r0, r3
 800757e:	f7f8 fe27 	bl	80001d0 <strlen>
 8007582:	4603      	mov	r3, r0
 8007584:	b29a      	uxth	r2, r3
 8007586:	f107 0108 	add.w	r1, r7, #8
 800758a:	230a      	movs	r3, #10
 800758c:	489e      	ldr	r0, [pc, #632]	; (8007808 <printRadioSettings+0x73c>)
 800758e:	f7fc fa38 	bl	8003a02 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8007592:	463b      	mov	r3, r7
 8007594:	2201      	movs	r2, #1
 8007596:	4619      	mov	r1, r3
 8007598:	200d      	movs	r0, #13
 800759a:	f7ff f8e3 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800759e:	783b      	ldrb	r3, [r7, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	f107 0308 	add.w	r3, r7, #8
 80075a6:	499c      	ldr	r1, [pc, #624]	; (8007818 <printRadioSettings+0x74c>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fa77 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7f8 fe0c 	bl	80001d0 <strlen>
 80075b8:	4603      	mov	r3, r0
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	f107 0108 	add.w	r1, r7, #8
 80075c0:	230a      	movs	r3, #10
 80075c2:	4891      	ldr	r0, [pc, #580]	; (8007808 <printRadioSettings+0x73c>)
 80075c4:	f7fc fa1d 	bl	8003a02 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80075c8:	463b      	mov	r3, r7
 80075ca:	2201      	movs	r2, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	200e      	movs	r0, #14
 80075d0:	f7ff f8c8 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80075d4:	783b      	ldrb	r3, [r7, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f107 0308 	add.w	r3, r7, #8
 80075dc:	498f      	ldr	r1, [pc, #572]	; (800781c <printRadioSettings+0x750>)
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fa5c 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7f8 fdf1 	bl	80001d0 <strlen>
 80075ee:	4603      	mov	r3, r0
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f107 0108 	add.w	r1, r7, #8
 80075f6:	230a      	movs	r3, #10
 80075f8:	4883      	ldr	r0, [pc, #524]	; (8007808 <printRadioSettings+0x73c>)
 80075fa:	f7fc fa02 	bl	8003a02 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80075fe:	463b      	mov	r3, r7
 8007600:	2201      	movs	r2, #1
 8007602:	4619      	mov	r1, r3
 8007604:	200f      	movs	r0, #15
 8007606:	f7ff f8ad 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800760a:	783b      	ldrb	r3, [r7, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	4983      	ldr	r1, [pc, #524]	; (8007820 <printRadioSettings+0x754>)
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fa41 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4618      	mov	r0, r3
 8007620:	f7f8 fdd6 	bl	80001d0 <strlen>
 8007624:	4603      	mov	r3, r0
 8007626:	b29a      	uxth	r2, r3
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	230a      	movs	r3, #10
 800762e:	4876      	ldr	r0, [pc, #472]	; (8007808 <printRadioSettings+0x73c>)
 8007630:	f7fc f9e7 	bl	8003a02 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8007634:	463b      	mov	r3, r7
 8007636:	2205      	movs	r2, #5
 8007638:	4619      	mov	r1, r3
 800763a:	2010      	movs	r0, #16
 800763c:	f7ff f892 	bl	8006764 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8007640:	793b      	ldrb	r3, [r7, #4]
 8007642:	461c      	mov	r4, r3
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	461d      	mov	r5, r3
 8007648:	78bb      	ldrb	r3, [r7, #2]
 800764a:	787a      	ldrb	r2, [r7, #1]
 800764c:	7839      	ldrb	r1, [r7, #0]
 800764e:	f107 0008 	add.w	r0, r7, #8
 8007652:	9102      	str	r1, [sp, #8]
 8007654:	9201      	str	r2, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	462b      	mov	r3, r5
 800765a:	4622      	mov	r2, r4
 800765c:	4971      	ldr	r1, [pc, #452]	; (8007824 <printRadioSettings+0x758>)
 800765e:	f000 fa1d 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4618      	mov	r0, r3
 8007668:	f7f8 fdb2 	bl	80001d0 <strlen>
 800766c:	4603      	mov	r3, r0
 800766e:	b29a      	uxth	r2, r3
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	230a      	movs	r3, #10
 8007676:	4864      	ldr	r0, [pc, #400]	; (8007808 <printRadioSettings+0x73c>)
 8007678:	f7fc f9c3 	bl	8003a02 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800767c:	2011      	movs	r0, #17
 800767e:	f7ff f849 	bl	8006714 <NRF24_read_register>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007688:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800768c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007690:	f107 0308 	add.w	r3, r7, #8
 8007694:	4964      	ldr	r1, [pc, #400]	; (8007828 <printRadioSettings+0x75c>)
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fa00 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800769c:	f107 0308 	add.w	r3, r7, #8
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7f8 fd95 	bl	80001d0 <strlen>
 80076a6:	4603      	mov	r3, r0
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f107 0108 	add.w	r1, r7, #8
 80076ae:	230a      	movs	r3, #10
 80076b0:	4855      	ldr	r0, [pc, #340]	; (8007808 <printRadioSettings+0x73c>)
 80076b2:	f7fc f9a6 	bl	8003a02 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80076b6:	2012      	movs	r0, #18
 80076b8:	f7ff f82c 	bl	8006714 <NRF24_read_register>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80076c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076ca:	f107 0308 	add.w	r3, r7, #8
 80076ce:	4957      	ldr	r1, [pc, #348]	; (800782c <printRadioSettings+0x760>)
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 f9e3 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80076d6:	f107 0308 	add.w	r3, r7, #8
 80076da:	4618      	mov	r0, r3
 80076dc:	f7f8 fd78 	bl	80001d0 <strlen>
 80076e0:	4603      	mov	r3, r0
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	230a      	movs	r3, #10
 80076ea:	4847      	ldr	r0, [pc, #284]	; (8007808 <printRadioSettings+0x73c>)
 80076ec:	f7fc f989 	bl	8003a02 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80076f0:	2013      	movs	r0, #19
 80076f2:	f7ff f80f 	bl	8006714 <NRF24_read_register>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80076fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007700:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007704:	f107 0308 	add.w	r3, r7, #8
 8007708:	4949      	ldr	r1, [pc, #292]	; (8007830 <printRadioSettings+0x764>)
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f9c6 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007710:	f107 0308 	add.w	r3, r7, #8
 8007714:	4618      	mov	r0, r3
 8007716:	f7f8 fd5b 	bl	80001d0 <strlen>
 800771a:	4603      	mov	r3, r0
 800771c:	b29a      	uxth	r2, r3
 800771e:	f107 0108 	add.w	r1, r7, #8
 8007722:	230a      	movs	r3, #10
 8007724:	4838      	ldr	r0, [pc, #224]	; (8007808 <printRadioSettings+0x73c>)
 8007726:	f7fc f96c 	bl	8003a02 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800772a:	2014      	movs	r0, #20
 800772c:	f7fe fff2 	bl	8006714 <NRF24_read_register>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007736:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800773a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800773e:	f107 0308 	add.w	r3, r7, #8
 8007742:	493c      	ldr	r1, [pc, #240]	; (8007834 <printRadioSettings+0x768>)
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f9a9 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800774a:	f107 0308 	add.w	r3, r7, #8
 800774e:	4618      	mov	r0, r3
 8007750:	f7f8 fd3e 	bl	80001d0 <strlen>
 8007754:	4603      	mov	r3, r0
 8007756:	b29a      	uxth	r2, r3
 8007758:	f107 0108 	add.w	r1, r7, #8
 800775c:	230a      	movs	r3, #10
 800775e:	482a      	ldr	r0, [pc, #168]	; (8007808 <printRadioSettings+0x73c>)
 8007760:	f7fc f94f 	bl	8003a02 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8007764:	2015      	movs	r0, #21
 8007766:	f7fe ffd5 	bl	8006714 <NRF24_read_register>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007770:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007778:	f107 0308 	add.w	r3, r7, #8
 800777c:	492e      	ldr	r1, [pc, #184]	; (8007838 <printRadioSettings+0x76c>)
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f98c 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 fd21 	bl	80001d0 <strlen>
 800778e:	4603      	mov	r3, r0
 8007790:	b29a      	uxth	r2, r3
 8007792:	f107 0108 	add.w	r1, r7, #8
 8007796:	230a      	movs	r3, #10
 8007798:	481b      	ldr	r0, [pc, #108]	; (8007808 <printRadioSettings+0x73c>)
 800779a:	f7fc f932 	bl	8003a02 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800779e:	2016      	movs	r0, #22
 80077a0:	f7fe ffb8 	bl	8006714 <NRF24_read_register>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80077aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	4921      	ldr	r1, [pc, #132]	; (800783c <printRadioSettings+0x770>)
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f96f 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f8 fd04 	bl	80001d0 <strlen>
 80077c8:	4603      	mov	r3, r0
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f107 0108 	add.w	r1, r7, #8
 80077d0:	230a      	movs	r3, #10
 80077d2:	480d      	ldr	r0, [pc, #52]	; (8007808 <printRadioSettings+0x73c>)
 80077d4:	f7fc f915 	bl	8003a02 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80077d8:	201c      	movs	r0, #28
 80077da:	f7fe ff9b 	bl	8006714 <NRF24_read_register>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80077e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bfcc      	ite	gt
 80077f0:	2301      	movgt	r3, #1
 80077f2:	2300      	movle	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80077f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	e01e      	b.n	8007840 <printRadioSettings+0x774>
 8007802:	bf00      	nop
 8007804:	0800869c 	.word	0x0800869c
 8007808:	2000010c 	.word	0x2000010c
 800780c:	080086b0 	.word	0x080086b0
 8007810:	080086e0 	.word	0x080086e0
 8007814:	08008710 	.word	0x08008710
 8007818:	08008738 	.word	0x08008738
 800781c:	08008760 	.word	0x08008760
 8007820:	08008788 	.word	0x08008788
 8007824:	080087b0 	.word	0x080087b0
 8007828:	080087dc 	.word	0x080087dc
 800782c:	080087f8 	.word	0x080087f8
 8007830:	08008814 	.word	0x08008814
 8007834:	08008830 	.word	0x08008830
 8007838:	0800884c 	.word	0x0800884c
 800783c:	08008868 	.word	0x08008868
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007840:	2b00      	cmp	r3, #0
 8007842:	bfcc      	ite	gt
 8007844:	2301      	movgt	r3, #1
 8007846:	2300      	movle	r3, #0
 8007848:	b2db      	uxtb	r3, r3
 800784a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800784c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007850:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfcc      	ite	gt
 8007858:	2301      	movgt	r3, #1
 800785a:	2300      	movle	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007860:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007864:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007868:	2b00      	cmp	r3, #0
 800786a:	bfcc      	ite	gt
 800786c:	2301      	movgt	r3, #1
 800786e:	2300      	movle	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007874:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007878:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfcc      	ite	gt
 8007880:	2301      	movgt	r3, #1
 8007882:	2300      	movle	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007888:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800788c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfcc      	ite	gt
 8007894:	2301      	movgt	r3, #1
 8007896:	2300      	movle	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	f107 0008 	add.w	r0, r7, #8
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	9402      	str	r4, [sp, #8]
 80078a2:	9101      	str	r1, [sp, #4]
 80078a4:	9200      	str	r2, [sp, #0]
 80078a6:	4633      	mov	r3, r6
 80078a8:	462a      	mov	r2, r5
 80078aa:	494a      	ldr	r1, [pc, #296]	; (80079d4 <printRadioSettings+0x908>)
 80078ac:	f000 f8f6 	bl	8007a9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7f8 fc8b 	bl	80001d0 <strlen>
 80078ba:	4603      	mov	r3, r0
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f107 0108 	add.w	r1, r7, #8
 80078c2:	230a      	movs	r3, #10
 80078c4:	4844      	ldr	r0, [pc, #272]	; (80079d8 <printRadioSettings+0x90c>)
 80078c6:	f7fc f89c 	bl	8003a02 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80078ca:	201d      	movs	r0, #29
 80078cc:	f7fe ff22 	bl	8006714 <NRF24_read_register>
 80078d0:	4603      	mov	r3, r0
 80078d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80078d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00c      	beq.n	80078fc <printRadioSettings+0x830>
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4a3d      	ldr	r2, [pc, #244]	; (80079dc <printRadioSettings+0x910>)
 80078e8:	461c      	mov	r4, r3
 80078ea:	4615      	mov	r5, r2
 80078ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80078f4:	6020      	str	r0, [r4, #0]
 80078f6:	3404      	adds	r4, #4
 80078f8:	8021      	strh	r1, [r4, #0]
 80078fa:	e00e      	b.n	800791a <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80078fc:	f107 0308 	add.w	r3, r7, #8
 8007900:	4a37      	ldr	r2, [pc, #220]	; (80079e0 <printRadioSettings+0x914>)
 8007902:	461c      	mov	r4, r3
 8007904:	4615      	mov	r5, r2
 8007906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800790a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800790e:	6020      	str	r0, [r4, #0]
 8007910:	3404      	adds	r4, #4
 8007912:	8021      	strh	r1, [r4, #0]
 8007914:	3402      	adds	r4, #2
 8007916:	0c0b      	lsrs	r3, r1, #16
 8007918:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4618      	mov	r0, r3
 8007920:	f7f8 fc56 	bl	80001d0 <strlen>
 8007924:	4603      	mov	r3, r0
 8007926:	b29a      	uxth	r2, r3
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	230a      	movs	r3, #10
 800792e:	482a      	ldr	r0, [pc, #168]	; (80079d8 <printRadioSettings+0x90c>)
 8007930:	f7fc f867 	bl	8003a02 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8007934:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <printRadioSettings+0x88c>
 8007940:	f107 0308 	add.w	r3, r7, #8
 8007944:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <printRadioSettings+0x918>)
 8007946:	461c      	mov	r4, r3
 8007948:	4615      	mov	r5, r2
 800794a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800794c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800794e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007952:	c403      	stmia	r4!, {r0, r1}
 8007954:	8022      	strh	r2, [r4, #0]
 8007956:	e00d      	b.n	8007974 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8007958:	f107 0308 	add.w	r3, r7, #8
 800795c:	4a22      	ldr	r2, [pc, #136]	; (80079e8 <printRadioSettings+0x91c>)
 800795e:	461c      	mov	r4, r3
 8007960:	4615      	mov	r5, r2
 8007962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800796a:	c403      	stmia	r4!, {r0, r1}
 800796c:	8022      	strh	r2, [r4, #0]
 800796e:	3402      	adds	r4, #2
 8007970:	0c13      	lsrs	r3, r2, #16
 8007972:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4618      	mov	r0, r3
 800797a:	f7f8 fc29 	bl	80001d0 <strlen>
 800797e:	4603      	mov	r3, r0
 8007980:	b29a      	uxth	r2, r3
 8007982:	f107 0108 	add.w	r1, r7, #8
 8007986:	230a      	movs	r3, #10
 8007988:	4813      	ldr	r0, [pc, #76]	; (80079d8 <printRadioSettings+0x90c>)
 800798a:	f7fc f83a 	bl	8003a02 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800798e:	f107 0308 	add.w	r3, r7, #8
 8007992:	4a16      	ldr	r2, [pc, #88]	; (80079ec <printRadioSettings+0x920>)
 8007994:	461c      	mov	r4, r3
 8007996:	4615      	mov	r5, r2
 8007998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800799a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800799c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800799e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	8022      	strh	r2, [r4, #0]
 80079aa:	3402      	adds	r4, #2
 80079ac:	0c1b      	lsrs	r3, r3, #16
 80079ae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80079b0:	f107 0308 	add.w	r3, r7, #8
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7f8 fc0b 	bl	80001d0 <strlen>
 80079ba:	4603      	mov	r3, r0
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f107 0108 	add.w	r1, r7, #8
 80079c2:	230a      	movs	r3, #10
 80079c4:	4804      	ldr	r0, [pc, #16]	; (80079d8 <printRadioSettings+0x90c>)
 80079c6:	f7fc f81c 	bl	8003a02 <HAL_UART_Transmit>
}
 80079ca:	bf00      	nop
 80079cc:	3774      	adds	r7, #116	; 0x74
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d2:	bf00      	nop
 80079d4:	08008884 	.word	0x08008884
 80079d8:	2000010c 	.word	0x2000010c
 80079dc:	080088d0 	.word	0x080088d0
 80079e0:	080088e8 	.word	0x080088e8
 80079e4:	08008900 	.word	0x08008900
 80079e8:	0800891c 	.word	0x0800891c
 80079ec:	080084f0 	.word	0x080084f0

080079f0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80079f0:	b084      	sub	sp, #16
 80079f2:	b580      	push	{r7, lr}
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	f107 0c08 	add.w	ip, r7, #8
 80079fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80079fe:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <nrf24_DebugUART_Init+0x2c>)
 8007a00:	4618      	mov	r0, r3
 8007a02:	f107 0108 	add.w	r1, r7, #8
 8007a06:	2370      	movs	r3, #112	; 0x70
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f000 f833 	bl	8007a74 <memcpy>
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a16:	b004      	add	sp, #16
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	2000010c 	.word	0x2000010c

08007a20 <__errno>:
 8007a20:	4b01      	ldr	r3, [pc, #4]	; (8007a28 <__errno+0x8>)
 8007a22:	6818      	ldr	r0, [r3, #0]
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	2000000c 	.word	0x2000000c

08007a2c <__libc_init_array>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4e0d      	ldr	r6, [pc, #52]	; (8007a64 <__libc_init_array+0x38>)
 8007a30:	4c0d      	ldr	r4, [pc, #52]	; (8007a68 <__libc_init_array+0x3c>)
 8007a32:	1ba4      	subs	r4, r4, r6
 8007a34:	10a4      	asrs	r4, r4, #2
 8007a36:	2500      	movs	r5, #0
 8007a38:	42a5      	cmp	r5, r4
 8007a3a:	d109      	bne.n	8007a50 <__libc_init_array+0x24>
 8007a3c:	4e0b      	ldr	r6, [pc, #44]	; (8007a6c <__libc_init_array+0x40>)
 8007a3e:	4c0c      	ldr	r4, [pc, #48]	; (8007a70 <__libc_init_array+0x44>)
 8007a40:	f000 fc30 	bl	80082a4 <_init>
 8007a44:	1ba4      	subs	r4, r4, r6
 8007a46:	10a4      	asrs	r4, r4, #2
 8007a48:	2500      	movs	r5, #0
 8007a4a:	42a5      	cmp	r5, r4
 8007a4c:	d105      	bne.n	8007a5a <__libc_init_array+0x2e>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a54:	4798      	blx	r3
 8007a56:	3501      	adds	r5, #1
 8007a58:	e7ee      	b.n	8007a38 <__libc_init_array+0xc>
 8007a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a5e:	4798      	blx	r3
 8007a60:	3501      	adds	r5, #1
 8007a62:	e7f2      	b.n	8007a4a <__libc_init_array+0x1e>
 8007a64:	08008ab4 	.word	0x08008ab4
 8007a68:	08008ab4 	.word	0x08008ab4
 8007a6c:	08008ab4 	.word	0x08008ab4
 8007a70:	08008ab8 	.word	0x08008ab8

08007a74 <memcpy>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	1e43      	subs	r3, r0, #1
 8007a78:	440a      	add	r2, r1
 8007a7a:	4291      	cmp	r1, r2
 8007a7c:	d100      	bne.n	8007a80 <memcpy+0xc>
 8007a7e:	bd10      	pop	{r4, pc}
 8007a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a88:	e7f7      	b.n	8007a7a <memcpy+0x6>

08007a8a <memset>:
 8007a8a:	4402      	add	r2, r0
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d100      	bne.n	8007a94 <memset+0xa>
 8007a92:	4770      	bx	lr
 8007a94:	f803 1b01 	strb.w	r1, [r3], #1
 8007a98:	e7f9      	b.n	8007a8e <memset+0x4>
	...

08007a9c <siprintf>:
 8007a9c:	b40e      	push	{r1, r2, r3}
 8007a9e:	b500      	push	{lr}
 8007aa0:	b09c      	sub	sp, #112	; 0x70
 8007aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8007aa4:	9002      	str	r0, [sp, #8]
 8007aa6:	9006      	str	r0, [sp, #24]
 8007aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007aac:	4809      	ldr	r0, [pc, #36]	; (8007ad4 <siprintf+0x38>)
 8007aae:	9107      	str	r1, [sp, #28]
 8007ab0:	9104      	str	r1, [sp, #16]
 8007ab2:	4909      	ldr	r1, [pc, #36]	; (8007ad8 <siprintf+0x3c>)
 8007ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab8:	9105      	str	r1, [sp, #20]
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	a902      	add	r1, sp, #8
 8007ac0:	f000 f86e 	bl	8007ba0 <_svfiprintf_r>
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	b01c      	add	sp, #112	; 0x70
 8007acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ad0:	b003      	add	sp, #12
 8007ad2:	4770      	bx	lr
 8007ad4:	2000000c 	.word	0x2000000c
 8007ad8:	ffff0208 	.word	0xffff0208

08007adc <strcpy>:
 8007adc:	4603      	mov	r3, r0
 8007ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ae2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	d1f9      	bne.n	8007ade <strcpy+0x2>
 8007aea:	4770      	bx	lr

08007aec <__ssputs_r>:
 8007aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	688e      	ldr	r6, [r1, #8]
 8007af2:	429e      	cmp	r6, r3
 8007af4:	4682      	mov	sl, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4690      	mov	r8, r2
 8007afa:	4699      	mov	r9, r3
 8007afc:	d837      	bhi.n	8007b6e <__ssputs_r+0x82>
 8007afe:	898a      	ldrh	r2, [r1, #12]
 8007b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b04:	d031      	beq.n	8007b6a <__ssputs_r+0x7e>
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	6909      	ldr	r1, [r1, #16]
 8007b0a:	1a6f      	subs	r7, r5, r1
 8007b0c:	6965      	ldr	r5, [r4, #20]
 8007b0e:	2302      	movs	r3, #2
 8007b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b14:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b18:	f109 0301 	add.w	r3, r9, #1
 8007b1c:	443b      	add	r3, r7
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	bf38      	it	cc
 8007b22:	461d      	movcc	r5, r3
 8007b24:	0553      	lsls	r3, r2, #21
 8007b26:	d530      	bpl.n	8007b8a <__ssputs_r+0x9e>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f000 fb21 	bl	8008170 <_malloc_r>
 8007b2e:	4606      	mov	r6, r0
 8007b30:	b950      	cbnz	r0, 8007b48 <__ssputs_r+0x5c>
 8007b32:	230c      	movs	r3, #12
 8007b34:	f8ca 3000 	str.w	r3, [sl]
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	463a      	mov	r2, r7
 8007b4a:	6921      	ldr	r1, [r4, #16]
 8007b4c:	f7ff ff92 	bl	8007a74 <memcpy>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	6126      	str	r6, [r4, #16]
 8007b5e:	6165      	str	r5, [r4, #20]
 8007b60:	443e      	add	r6, r7
 8007b62:	1bed      	subs	r5, r5, r7
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	60a5      	str	r5, [r4, #8]
 8007b68:	464e      	mov	r6, r9
 8007b6a:	454e      	cmp	r6, r9
 8007b6c:	d900      	bls.n	8007b70 <__ssputs_r+0x84>
 8007b6e:	464e      	mov	r6, r9
 8007b70:	4632      	mov	r2, r6
 8007b72:	4641      	mov	r1, r8
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	f000 fa93 	bl	80080a0 <memmove>
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	1b9b      	subs	r3, r3, r6
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	441e      	add	r6, r3
 8007b84:	6026      	str	r6, [r4, #0]
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7dc      	b.n	8007b44 <__ssputs_r+0x58>
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	f000 fb4a 	bl	8008224 <_realloc_r>
 8007b90:	4606      	mov	r6, r0
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d1e2      	bne.n	8007b5c <__ssputs_r+0x70>
 8007b96:	6921      	ldr	r1, [r4, #16]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	f000 fa9b 	bl	80080d4 <_free_r>
 8007b9e:	e7c8      	b.n	8007b32 <__ssputs_r+0x46>

08007ba0 <_svfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	461d      	mov	r5, r3
 8007ba6:	898b      	ldrh	r3, [r1, #12]
 8007ba8:	061f      	lsls	r7, r3, #24
 8007baa:	b09d      	sub	sp, #116	; 0x74
 8007bac:	4680      	mov	r8, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d50f      	bpl.n	8007bd4 <_svfiprintf_r+0x34>
 8007bb4:	690b      	ldr	r3, [r1, #16]
 8007bb6:	b96b      	cbnz	r3, 8007bd4 <_svfiprintf_r+0x34>
 8007bb8:	2140      	movs	r1, #64	; 0x40
 8007bba:	f000 fad9 	bl	8008170 <_malloc_r>
 8007bbe:	6020      	str	r0, [r4, #0]
 8007bc0:	6120      	str	r0, [r4, #16]
 8007bc2:	b928      	cbnz	r0, 8007bd0 <_svfiprintf_r+0x30>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	f8c8 3000 	str.w	r3, [r8]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	e0c8      	b.n	8007d62 <_svfiprintf_r+0x1c2>
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	6163      	str	r3, [r4, #20]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bde:	2330      	movs	r3, #48	; 0x30
 8007be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be4:	9503      	str	r5, [sp, #12]
 8007be6:	f04f 0b01 	mov.w	fp, #1
 8007bea:	4637      	mov	r7, r6
 8007bec:	463d      	mov	r5, r7
 8007bee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bf2:	b10b      	cbz	r3, 8007bf8 <_svfiprintf_r+0x58>
 8007bf4:	2b25      	cmp	r3, #37	; 0x25
 8007bf6:	d13e      	bne.n	8007c76 <_svfiprintf_r+0xd6>
 8007bf8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bfc:	d00b      	beq.n	8007c16 <_svfiprintf_r+0x76>
 8007bfe:	4653      	mov	r3, sl
 8007c00:	4632      	mov	r2, r6
 8007c02:	4621      	mov	r1, r4
 8007c04:	4640      	mov	r0, r8
 8007c06:	f7ff ff71 	bl	8007aec <__ssputs_r>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f000 80a4 	beq.w	8007d58 <_svfiprintf_r+0x1b8>
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	4453      	add	r3, sl
 8007c14:	9309      	str	r3, [sp, #36]	; 0x24
 8007c16:	783b      	ldrb	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 809d 	beq.w	8007d58 <_svfiprintf_r+0x1b8>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295
 8007c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9307      	str	r3, [sp, #28]
 8007c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c30:	931a      	str	r3, [sp, #104]	; 0x68
 8007c32:	462f      	mov	r7, r5
 8007c34:	2205      	movs	r2, #5
 8007c36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c3a:	4850      	ldr	r0, [pc, #320]	; (8007d7c <_svfiprintf_r+0x1dc>)
 8007c3c:	f7f8 fad0 	bl	80001e0 <memchr>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	b9d0      	cbnz	r0, 8007c7a <_svfiprintf_r+0xda>
 8007c44:	06d9      	lsls	r1, r3, #27
 8007c46:	bf44      	itt	mi
 8007c48:	2220      	movmi	r2, #32
 8007c4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c4e:	071a      	lsls	r2, r3, #28
 8007c50:	bf44      	itt	mi
 8007c52:	222b      	movmi	r2, #43	; 0x2b
 8007c54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c58:	782a      	ldrb	r2, [r5, #0]
 8007c5a:	2a2a      	cmp	r2, #42	; 0x2a
 8007c5c:	d015      	beq.n	8007c8a <_svfiprintf_r+0xea>
 8007c5e:	9a07      	ldr	r2, [sp, #28]
 8007c60:	462f      	mov	r7, r5
 8007c62:	2000      	movs	r0, #0
 8007c64:	250a      	movs	r5, #10
 8007c66:	4639      	mov	r1, r7
 8007c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c6c:	3b30      	subs	r3, #48	; 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d94d      	bls.n	8007d0e <_svfiprintf_r+0x16e>
 8007c72:	b1b8      	cbz	r0, 8007ca4 <_svfiprintf_r+0x104>
 8007c74:	e00f      	b.n	8007c96 <_svfiprintf_r+0xf6>
 8007c76:	462f      	mov	r7, r5
 8007c78:	e7b8      	b.n	8007bec <_svfiprintf_r+0x4c>
 8007c7a:	4a40      	ldr	r2, [pc, #256]	; (8007d7c <_svfiprintf_r+0x1dc>)
 8007c7c:	1a80      	subs	r0, r0, r2
 8007c7e:	fa0b f000 	lsl.w	r0, fp, r0
 8007c82:	4318      	orrs	r0, r3
 8007c84:	9004      	str	r0, [sp, #16]
 8007c86:	463d      	mov	r5, r7
 8007c88:	e7d3      	b.n	8007c32 <_svfiprintf_r+0x92>
 8007c8a:	9a03      	ldr	r2, [sp, #12]
 8007c8c:	1d11      	adds	r1, r2, #4
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	9103      	str	r1, [sp, #12]
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	db01      	blt.n	8007c9a <_svfiprintf_r+0xfa>
 8007c96:	9207      	str	r2, [sp, #28]
 8007c98:	e004      	b.n	8007ca4 <_svfiprintf_r+0x104>
 8007c9a:	4252      	negs	r2, r2
 8007c9c:	f043 0302 	orr.w	r3, r3, #2
 8007ca0:	9207      	str	r2, [sp, #28]
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	783b      	ldrb	r3, [r7, #0]
 8007ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca8:	d10c      	bne.n	8007cc4 <_svfiprintf_r+0x124>
 8007caa:	787b      	ldrb	r3, [r7, #1]
 8007cac:	2b2a      	cmp	r3, #42	; 0x2a
 8007cae:	d133      	bne.n	8007d18 <_svfiprintf_r+0x178>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	1d1a      	adds	r2, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfb8      	it	lt
 8007cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc0:	3702      	adds	r7, #2
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	4d2e      	ldr	r5, [pc, #184]	; (8007d80 <_svfiprintf_r+0x1e0>)
 8007cc6:	7839      	ldrb	r1, [r7, #0]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7f8 fa88 	bl	80001e0 <memchr>
 8007cd0:	b138      	cbz	r0, 8007ce2 <_svfiprintf_r+0x142>
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	1b40      	subs	r0, r0, r5
 8007cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	4303      	orrs	r3, r0
 8007cde:	3701      	adds	r7, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	7839      	ldrb	r1, [r7, #0]
 8007ce4:	4827      	ldr	r0, [pc, #156]	; (8007d84 <_svfiprintf_r+0x1e4>)
 8007ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cea:	2206      	movs	r2, #6
 8007cec:	1c7e      	adds	r6, r7, #1
 8007cee:	f7f8 fa77 	bl	80001e0 <memchr>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d038      	beq.n	8007d68 <_svfiprintf_r+0x1c8>
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <_svfiprintf_r+0x1e8>)
 8007cf8:	bb13      	cbnz	r3, 8007d40 <_svfiprintf_r+0x1a0>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	3308      	adds	r3, #8
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	444b      	add	r3, r9
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	e76d      	b.n	8007bea <_svfiprintf_r+0x4a>
 8007d0e:	fb05 3202 	mla	r2, r5, r2, r3
 8007d12:	2001      	movs	r0, #1
 8007d14:	460f      	mov	r7, r1
 8007d16:	e7a6      	b.n	8007c66 <_svfiprintf_r+0xc6>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	3701      	adds	r7, #1
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	250a      	movs	r5, #10
 8007d22:	4638      	mov	r0, r7
 8007d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d28:	3a30      	subs	r2, #48	; 0x30
 8007d2a:	2a09      	cmp	r2, #9
 8007d2c:	d903      	bls.n	8007d36 <_svfiprintf_r+0x196>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0c8      	beq.n	8007cc4 <_svfiprintf_r+0x124>
 8007d32:	9105      	str	r1, [sp, #20]
 8007d34:	e7c6      	b.n	8007cc4 <_svfiprintf_r+0x124>
 8007d36:	fb05 2101 	mla	r1, r5, r1, r2
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	e7f0      	b.n	8007d22 <_svfiprintf_r+0x182>
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4622      	mov	r2, r4
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <_svfiprintf_r+0x1ec>)
 8007d48:	a904      	add	r1, sp, #16
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f3af 8000 	nop.w
 8007d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d54:	4681      	mov	r9, r0
 8007d56:	d1d6      	bne.n	8007d06 <_svfiprintf_r+0x166>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	065b      	lsls	r3, r3, #25
 8007d5c:	f53f af35 	bmi.w	8007bca <_svfiprintf_r+0x2a>
 8007d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d62:	b01d      	add	sp, #116	; 0x74
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <_svfiprintf_r+0x1ec>)
 8007d70:	a904      	add	r1, sp, #16
 8007d72:	4640      	mov	r0, r8
 8007d74:	f000 f882 	bl	8007e7c <_printf_i>
 8007d78:	e7ea      	b.n	8007d50 <_svfiprintf_r+0x1b0>
 8007d7a:	bf00      	nop
 8007d7c:	08008a7e 	.word	0x08008a7e
 8007d80:	08008a84 	.word	0x08008a84
 8007d84:	08008a88 	.word	0x08008a88
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	08007aed 	.word	0x08007aed

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4691      	mov	r9, r2
 8007d96:	461f      	mov	r7, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfb8      	it	lt
 8007da4:	4613      	movlt	r3, r2
 8007da6:	f8c9 3000 	str.w	r3, [r9]
 8007daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dae:	4606      	mov	r6, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	b112      	cbz	r2, 8007dba <_printf_common+0x2a>
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c9 3000 	str.w	r3, [r9]
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	0699      	lsls	r1, r3, #26
 8007dbe:	bf42      	ittt	mi
 8007dc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007dc4:	3302      	addmi	r3, #2
 8007dc6:	f8c9 3000 	strmi.w	r3, [r9]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d107      	bne.n	8007de2 <_printf_common+0x52>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	dc28      	bgt.n	8007e34 <_printf_common+0xa4>
 8007de2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	3300      	adds	r3, #0
 8007dea:	bf18      	it	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	0692      	lsls	r2, r2, #26
 8007df0:	d42d      	bmi.n	8007e4e <_printf_common+0xbe>
 8007df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df6:	4639      	mov	r1, r7
 8007df8:	4630      	mov	r0, r6
 8007dfa:	47c0      	blx	r8
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d020      	beq.n	8007e42 <_printf_common+0xb2>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	68e5      	ldr	r5, [r4, #12]
 8007e04:	f8d9 2000 	ldr.w	r2, [r9]
 8007e08:	f003 0306 	and.w	r3, r3, #6
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	bf08      	it	eq
 8007e10:	1aad      	subeq	r5, r5, r2
 8007e12:	68a3      	ldr	r3, [r4, #8]
 8007e14:	6922      	ldr	r2, [r4, #16]
 8007e16:	bf0c      	ite	eq
 8007e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e1c:	2500      	movne	r5, #0
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	bfc4      	itt	gt
 8007e22:	1a9b      	subgt	r3, r3, r2
 8007e24:	18ed      	addgt	r5, r5, r3
 8007e26:	f04f 0900 	mov.w	r9, #0
 8007e2a:	341a      	adds	r4, #26
 8007e2c:	454d      	cmp	r5, r9
 8007e2e:	d11a      	bne.n	8007e66 <_printf_common+0xd6>
 8007e30:	2000      	movs	r0, #0
 8007e32:	e008      	b.n	8007e46 <_printf_common+0xb6>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4652      	mov	r2, sl
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	47c0      	blx	r8
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d103      	bne.n	8007e4a <_printf_common+0xba>
 8007e42:	f04f 30ff 	mov.w	r0, #4294967295
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	e7c3      	b.n	8007dd6 <_printf_common+0x46>
 8007e4e:	18e1      	adds	r1, r4, r3
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	2030      	movs	r0, #48	; 0x30
 8007e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e58:	4422      	add	r2, r4
 8007e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e62:	3302      	adds	r3, #2
 8007e64:	e7c5      	b.n	8007df2 <_printf_common+0x62>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	47c0      	blx	r8
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0e6      	beq.n	8007e42 <_printf_common+0xb2>
 8007e74:	f109 0901 	add.w	r9, r9, #1
 8007e78:	e7d8      	b.n	8007e2c <_printf_common+0x9c>
	...

08007e7c <_printf_i>:
 8007e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e84:	460c      	mov	r4, r1
 8007e86:	7e09      	ldrb	r1, [r1, #24]
 8007e88:	b085      	sub	sp, #20
 8007e8a:	296e      	cmp	r1, #110	; 0x6e
 8007e8c:	4617      	mov	r7, r2
 8007e8e:	4606      	mov	r6, r0
 8007e90:	4698      	mov	r8, r3
 8007e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e94:	f000 80b3 	beq.w	8007ffe <_printf_i+0x182>
 8007e98:	d822      	bhi.n	8007ee0 <_printf_i+0x64>
 8007e9a:	2963      	cmp	r1, #99	; 0x63
 8007e9c:	d036      	beq.n	8007f0c <_printf_i+0x90>
 8007e9e:	d80a      	bhi.n	8007eb6 <_printf_i+0x3a>
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	f000 80b9 	beq.w	8008018 <_printf_i+0x19c>
 8007ea6:	2958      	cmp	r1, #88	; 0x58
 8007ea8:	f000 8083 	beq.w	8007fb2 <_printf_i+0x136>
 8007eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007eb4:	e032      	b.n	8007f1c <_printf_i+0xa0>
 8007eb6:	2964      	cmp	r1, #100	; 0x64
 8007eb8:	d001      	beq.n	8007ebe <_printf_i+0x42>
 8007eba:	2969      	cmp	r1, #105	; 0x69
 8007ebc:	d1f6      	bne.n	8007eac <_printf_i+0x30>
 8007ebe:	6820      	ldr	r0, [r4, #0]
 8007ec0:	6813      	ldr	r3, [r2, #0]
 8007ec2:	0605      	lsls	r5, r0, #24
 8007ec4:	f103 0104 	add.w	r1, r3, #4
 8007ec8:	d52a      	bpl.n	8007f20 <_printf_i+0xa4>
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da03      	bge.n	8007eda <_printf_i+0x5e>
 8007ed2:	222d      	movs	r2, #45	; 0x2d
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eda:	486f      	ldr	r0, [pc, #444]	; (8008098 <_printf_i+0x21c>)
 8007edc:	220a      	movs	r2, #10
 8007ede:	e039      	b.n	8007f54 <_printf_i+0xd8>
 8007ee0:	2973      	cmp	r1, #115	; 0x73
 8007ee2:	f000 809d 	beq.w	8008020 <_printf_i+0x1a4>
 8007ee6:	d808      	bhi.n	8007efa <_printf_i+0x7e>
 8007ee8:	296f      	cmp	r1, #111	; 0x6f
 8007eea:	d020      	beq.n	8007f2e <_printf_i+0xb2>
 8007eec:	2970      	cmp	r1, #112	; 0x70
 8007eee:	d1dd      	bne.n	8007eac <_printf_i+0x30>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	f043 0320 	orr.w	r3, r3, #32
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	e003      	b.n	8007f02 <_printf_i+0x86>
 8007efa:	2975      	cmp	r1, #117	; 0x75
 8007efc:	d017      	beq.n	8007f2e <_printf_i+0xb2>
 8007efe:	2978      	cmp	r1, #120	; 0x78
 8007f00:	d1d4      	bne.n	8007eac <_printf_i+0x30>
 8007f02:	2378      	movs	r3, #120	; 0x78
 8007f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f08:	4864      	ldr	r0, [pc, #400]	; (800809c <_printf_i+0x220>)
 8007f0a:	e055      	b.n	8007fb8 <_printf_i+0x13c>
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	1d19      	adds	r1, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6011      	str	r1, [r2, #0]
 8007f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e08c      	b.n	800803a <_printf_i+0x1be>
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6011      	str	r1, [r2, #0]
 8007f24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f28:	bf18      	it	ne
 8007f2a:	b21b      	sxthne	r3, r3
 8007f2c:	e7cf      	b.n	8007ece <_printf_i+0x52>
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6010      	str	r0, [r2, #0]
 8007f36:	0628      	lsls	r0, r5, #24
 8007f38:	d501      	bpl.n	8007f3e <_printf_i+0xc2>
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	e002      	b.n	8007f44 <_printf_i+0xc8>
 8007f3e:	0668      	lsls	r0, r5, #25
 8007f40:	d5fb      	bpl.n	8007f3a <_printf_i+0xbe>
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	4854      	ldr	r0, [pc, #336]	; (8008098 <_printf_i+0x21c>)
 8007f46:	296f      	cmp	r1, #111	; 0x6f
 8007f48:	bf14      	ite	ne
 8007f4a:	220a      	movne	r2, #10
 8007f4c:	2208      	moveq	r2, #8
 8007f4e:	2100      	movs	r1, #0
 8007f50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f54:	6865      	ldr	r5, [r4, #4]
 8007f56:	60a5      	str	r5, [r4, #8]
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	f2c0 8095 	blt.w	8008088 <_printf_i+0x20c>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	f021 0104 	bic.w	r1, r1, #4
 8007f64:	6021      	str	r1, [r4, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d13d      	bne.n	8007fe6 <_printf_i+0x16a>
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	f040 808e 	bne.w	800808c <_printf_i+0x210>
 8007f70:	4665      	mov	r5, ip
 8007f72:	2a08      	cmp	r2, #8
 8007f74:	d10b      	bne.n	8007f8e <_printf_i+0x112>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	07db      	lsls	r3, r3, #31
 8007f7a:	d508      	bpl.n	8007f8e <_printf_i+0x112>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bfde      	ittt	le
 8007f84:	2330      	movle	r3, #48	; 0x30
 8007f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f8e:	ebac 0305 	sub.w	r3, ip, r5
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	f8cd 8000 	str.w	r8, [sp]
 8007f98:	463b      	mov	r3, r7
 8007f9a:	aa03      	add	r2, sp, #12
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff fef6 	bl	8007d90 <_printf_common>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d14d      	bne.n	8008044 <_printf_i+0x1c8>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	b005      	add	sp, #20
 8007fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	4839      	ldr	r0, [pc, #228]	; (8008098 <_printf_i+0x21c>)
 8007fb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	6821      	ldr	r1, [r4, #0]
 8007fbc:	1d1d      	adds	r5, r3, #4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6015      	str	r5, [r2, #0]
 8007fc2:	060a      	lsls	r2, r1, #24
 8007fc4:	d50b      	bpl.n	8007fde <_printf_i+0x162>
 8007fc6:	07ca      	lsls	r2, r1, #31
 8007fc8:	bf44      	itt	mi
 8007fca:	f041 0120 	orrmi.w	r1, r1, #32
 8007fce:	6021      	strmi	r1, [r4, #0]
 8007fd0:	b91b      	cbnz	r3, 8007fda <_printf_i+0x15e>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	f022 0220 	bic.w	r2, r2, #32
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	e7b7      	b.n	8007f4e <_printf_i+0xd2>
 8007fde:	064d      	lsls	r5, r1, #25
 8007fe0:	bf48      	it	mi
 8007fe2:	b29b      	uxthmi	r3, r3
 8007fe4:	e7ef      	b.n	8007fc6 <_printf_i+0x14a>
 8007fe6:	4665      	mov	r5, ip
 8007fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fec:	fb02 3311 	mls	r3, r2, r1, r3
 8007ff0:	5cc3      	ldrb	r3, [r0, r3]
 8007ff2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d1f5      	bne.n	8007fe8 <_printf_i+0x16c>
 8007ffc:	e7b9      	b.n	8007f72 <_printf_i+0xf6>
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	6825      	ldr	r5, [r4, #0]
 8008002:	6961      	ldr	r1, [r4, #20]
 8008004:	1d18      	adds	r0, r3, #4
 8008006:	6010      	str	r0, [r2, #0]
 8008008:	0628      	lsls	r0, r5, #24
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	d501      	bpl.n	8008012 <_printf_i+0x196>
 800800e:	6019      	str	r1, [r3, #0]
 8008010:	e002      	b.n	8008018 <_printf_i+0x19c>
 8008012:	066a      	lsls	r2, r5, #25
 8008014:	d5fb      	bpl.n	800800e <_printf_i+0x192>
 8008016:	8019      	strh	r1, [r3, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	4665      	mov	r5, ip
 800801e:	e7b9      	b.n	8007f94 <_printf_i+0x118>
 8008020:	6813      	ldr	r3, [r2, #0]
 8008022:	1d19      	adds	r1, r3, #4
 8008024:	6011      	str	r1, [r2, #0]
 8008026:	681d      	ldr	r5, [r3, #0]
 8008028:	6862      	ldr	r2, [r4, #4]
 800802a:	2100      	movs	r1, #0
 800802c:	4628      	mov	r0, r5
 800802e:	f7f8 f8d7 	bl	80001e0 <memchr>
 8008032:	b108      	cbz	r0, 8008038 <_printf_i+0x1bc>
 8008034:	1b40      	subs	r0, r0, r5
 8008036:	6060      	str	r0, [r4, #4]
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	2300      	movs	r3, #0
 800803e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008042:	e7a7      	b.n	8007f94 <_printf_i+0x118>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	462a      	mov	r2, r5
 8008048:	4639      	mov	r1, r7
 800804a:	4630      	mov	r0, r6
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d0aa      	beq.n	8007fa8 <_printf_i+0x12c>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	079b      	lsls	r3, r3, #30
 8008056:	d413      	bmi.n	8008080 <_printf_i+0x204>
 8008058:	68e0      	ldr	r0, [r4, #12]
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	4298      	cmp	r0, r3
 800805e:	bfb8      	it	lt
 8008060:	4618      	movlt	r0, r3
 8008062:	e7a3      	b.n	8007fac <_printf_i+0x130>
 8008064:	2301      	movs	r3, #1
 8008066:	464a      	mov	r2, r9
 8008068:	4639      	mov	r1, r7
 800806a:	4630      	mov	r0, r6
 800806c:	47c0      	blx	r8
 800806e:	3001      	adds	r0, #1
 8008070:	d09a      	beq.n	8007fa8 <_printf_i+0x12c>
 8008072:	3501      	adds	r5, #1
 8008074:	68e3      	ldr	r3, [r4, #12]
 8008076:	9a03      	ldr	r2, [sp, #12]
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	42ab      	cmp	r3, r5
 800807c:	dcf2      	bgt.n	8008064 <_printf_i+0x1e8>
 800807e:	e7eb      	b.n	8008058 <_printf_i+0x1dc>
 8008080:	2500      	movs	r5, #0
 8008082:	f104 0919 	add.w	r9, r4, #25
 8008086:	e7f5      	b.n	8008074 <_printf_i+0x1f8>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1ac      	bne.n	8007fe6 <_printf_i+0x16a>
 800808c:	7803      	ldrb	r3, [r0, #0]
 800808e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008096:	e76c      	b.n	8007f72 <_printf_i+0xf6>
 8008098:	08008a8f 	.word	0x08008a8f
 800809c:	08008aa0 	.word	0x08008aa0

080080a0 <memmove>:
 80080a0:	4288      	cmp	r0, r1
 80080a2:	b510      	push	{r4, lr}
 80080a4:	eb01 0302 	add.w	r3, r1, r2
 80080a8:	d807      	bhi.n	80080ba <memmove+0x1a>
 80080aa:	1e42      	subs	r2, r0, #1
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d00a      	beq.n	80080c6 <memmove+0x26>
 80080b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080b8:	e7f8      	b.n	80080ac <memmove+0xc>
 80080ba:	4283      	cmp	r3, r0
 80080bc:	d9f5      	bls.n	80080aa <memmove+0xa>
 80080be:	1881      	adds	r1, r0, r2
 80080c0:	1ad2      	subs	r2, r2, r3
 80080c2:	42d3      	cmn	r3, r2
 80080c4:	d100      	bne.n	80080c8 <memmove+0x28>
 80080c6:	bd10      	pop	{r4, pc}
 80080c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080d0:	e7f7      	b.n	80080c2 <memmove+0x22>
	...

080080d4 <_free_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4605      	mov	r5, r0
 80080d8:	2900      	cmp	r1, #0
 80080da:	d045      	beq.n	8008168 <_free_r+0x94>
 80080dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e0:	1f0c      	subs	r4, r1, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bfb8      	it	lt
 80080e6:	18e4      	addlt	r4, r4, r3
 80080e8:	f000 f8d2 	bl	8008290 <__malloc_lock>
 80080ec:	4a1f      	ldr	r2, [pc, #124]	; (800816c <_free_r+0x98>)
 80080ee:	6813      	ldr	r3, [r2, #0]
 80080f0:	4610      	mov	r0, r2
 80080f2:	b933      	cbnz	r3, 8008102 <_free_r+0x2e>
 80080f4:	6063      	str	r3, [r4, #4]
 80080f6:	6014      	str	r4, [r2, #0]
 80080f8:	4628      	mov	r0, r5
 80080fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fe:	f000 b8c8 	b.w	8008292 <__malloc_unlock>
 8008102:	42a3      	cmp	r3, r4
 8008104:	d90c      	bls.n	8008120 <_free_r+0x4c>
 8008106:	6821      	ldr	r1, [r4, #0]
 8008108:	1862      	adds	r2, r4, r1
 800810a:	4293      	cmp	r3, r2
 800810c:	bf04      	itt	eq
 800810e:	681a      	ldreq	r2, [r3, #0]
 8008110:	685b      	ldreq	r3, [r3, #4]
 8008112:	6063      	str	r3, [r4, #4]
 8008114:	bf04      	itt	eq
 8008116:	1852      	addeq	r2, r2, r1
 8008118:	6022      	streq	r2, [r4, #0]
 800811a:	6004      	str	r4, [r0, #0]
 800811c:	e7ec      	b.n	80080f8 <_free_r+0x24>
 800811e:	4613      	mov	r3, r2
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	b10a      	cbz	r2, 8008128 <_free_r+0x54>
 8008124:	42a2      	cmp	r2, r4
 8008126:	d9fa      	bls.n	800811e <_free_r+0x4a>
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	1858      	adds	r0, r3, r1
 800812c:	42a0      	cmp	r0, r4
 800812e:	d10b      	bne.n	8008148 <_free_r+0x74>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	4401      	add	r1, r0
 8008134:	1858      	adds	r0, r3, r1
 8008136:	4282      	cmp	r2, r0
 8008138:	6019      	str	r1, [r3, #0]
 800813a:	d1dd      	bne.n	80080f8 <_free_r+0x24>
 800813c:	6810      	ldr	r0, [r2, #0]
 800813e:	6852      	ldr	r2, [r2, #4]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	4401      	add	r1, r0
 8008144:	6019      	str	r1, [r3, #0]
 8008146:	e7d7      	b.n	80080f8 <_free_r+0x24>
 8008148:	d902      	bls.n	8008150 <_free_r+0x7c>
 800814a:	230c      	movs	r3, #12
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	e7d3      	b.n	80080f8 <_free_r+0x24>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	1821      	adds	r1, r4, r0
 8008154:	428a      	cmp	r2, r1
 8008156:	bf04      	itt	eq
 8008158:	6811      	ldreq	r1, [r2, #0]
 800815a:	6852      	ldreq	r2, [r2, #4]
 800815c:	6062      	str	r2, [r4, #4]
 800815e:	bf04      	itt	eq
 8008160:	1809      	addeq	r1, r1, r0
 8008162:	6021      	streq	r1, [r4, #0]
 8008164:	605c      	str	r4, [r3, #4]
 8008166:	e7c7      	b.n	80080f8 <_free_r+0x24>
 8008168:	bd38      	pop	{r3, r4, r5, pc}
 800816a:	bf00      	nop
 800816c:	2000017c 	.word	0x2000017c

08008170 <_malloc_r>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	1ccd      	adds	r5, r1, #3
 8008174:	f025 0503 	bic.w	r5, r5, #3
 8008178:	3508      	adds	r5, #8
 800817a:	2d0c      	cmp	r5, #12
 800817c:	bf38      	it	cc
 800817e:	250c      	movcc	r5, #12
 8008180:	2d00      	cmp	r5, #0
 8008182:	4606      	mov	r6, r0
 8008184:	db01      	blt.n	800818a <_malloc_r+0x1a>
 8008186:	42a9      	cmp	r1, r5
 8008188:	d903      	bls.n	8008192 <_malloc_r+0x22>
 800818a:	230c      	movs	r3, #12
 800818c:	6033      	str	r3, [r6, #0]
 800818e:	2000      	movs	r0, #0
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	f000 f87d 	bl	8008290 <__malloc_lock>
 8008196:	4a21      	ldr	r2, [pc, #132]	; (800821c <_malloc_r+0xac>)
 8008198:	6814      	ldr	r4, [r2, #0]
 800819a:	4621      	mov	r1, r4
 800819c:	b991      	cbnz	r1, 80081c4 <_malloc_r+0x54>
 800819e:	4c20      	ldr	r4, [pc, #128]	; (8008220 <_malloc_r+0xb0>)
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	b91b      	cbnz	r3, 80081ac <_malloc_r+0x3c>
 80081a4:	4630      	mov	r0, r6
 80081a6:	f000 f863 	bl	8008270 <_sbrk_r>
 80081aa:	6020      	str	r0, [r4, #0]
 80081ac:	4629      	mov	r1, r5
 80081ae:	4630      	mov	r0, r6
 80081b0:	f000 f85e 	bl	8008270 <_sbrk_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d124      	bne.n	8008202 <_malloc_r+0x92>
 80081b8:	230c      	movs	r3, #12
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f868 	bl	8008292 <__malloc_unlock>
 80081c2:	e7e4      	b.n	800818e <_malloc_r+0x1e>
 80081c4:	680b      	ldr	r3, [r1, #0]
 80081c6:	1b5b      	subs	r3, r3, r5
 80081c8:	d418      	bmi.n	80081fc <_malloc_r+0x8c>
 80081ca:	2b0b      	cmp	r3, #11
 80081cc:	d90f      	bls.n	80081ee <_malloc_r+0x7e>
 80081ce:	600b      	str	r3, [r1, #0]
 80081d0:	50cd      	str	r5, [r1, r3]
 80081d2:	18cc      	adds	r4, r1, r3
 80081d4:	4630      	mov	r0, r6
 80081d6:	f000 f85c 	bl	8008292 <__malloc_unlock>
 80081da:	f104 000b 	add.w	r0, r4, #11
 80081de:	1d23      	adds	r3, r4, #4
 80081e0:	f020 0007 	bic.w	r0, r0, #7
 80081e4:	1ac3      	subs	r3, r0, r3
 80081e6:	d0d3      	beq.n	8008190 <_malloc_r+0x20>
 80081e8:	425a      	negs	r2, r3
 80081ea:	50e2      	str	r2, [r4, r3]
 80081ec:	e7d0      	b.n	8008190 <_malloc_r+0x20>
 80081ee:	428c      	cmp	r4, r1
 80081f0:	684b      	ldr	r3, [r1, #4]
 80081f2:	bf16      	itet	ne
 80081f4:	6063      	strne	r3, [r4, #4]
 80081f6:	6013      	streq	r3, [r2, #0]
 80081f8:	460c      	movne	r4, r1
 80081fa:	e7eb      	b.n	80081d4 <_malloc_r+0x64>
 80081fc:	460c      	mov	r4, r1
 80081fe:	6849      	ldr	r1, [r1, #4]
 8008200:	e7cc      	b.n	800819c <_malloc_r+0x2c>
 8008202:	1cc4      	adds	r4, r0, #3
 8008204:	f024 0403 	bic.w	r4, r4, #3
 8008208:	42a0      	cmp	r0, r4
 800820a:	d005      	beq.n	8008218 <_malloc_r+0xa8>
 800820c:	1a21      	subs	r1, r4, r0
 800820e:	4630      	mov	r0, r6
 8008210:	f000 f82e 	bl	8008270 <_sbrk_r>
 8008214:	3001      	adds	r0, #1
 8008216:	d0cf      	beq.n	80081b8 <_malloc_r+0x48>
 8008218:	6025      	str	r5, [r4, #0]
 800821a:	e7db      	b.n	80081d4 <_malloc_r+0x64>
 800821c:	2000017c 	.word	0x2000017c
 8008220:	20000180 	.word	0x20000180

08008224 <_realloc_r>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	4607      	mov	r7, r0
 8008228:	4614      	mov	r4, r2
 800822a:	460e      	mov	r6, r1
 800822c:	b921      	cbnz	r1, 8008238 <_realloc_r+0x14>
 800822e:	4611      	mov	r1, r2
 8008230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008234:	f7ff bf9c 	b.w	8008170 <_malloc_r>
 8008238:	b922      	cbnz	r2, 8008244 <_realloc_r+0x20>
 800823a:	f7ff ff4b 	bl	80080d4 <_free_r>
 800823e:	4625      	mov	r5, r4
 8008240:	4628      	mov	r0, r5
 8008242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008244:	f000 f826 	bl	8008294 <_malloc_usable_size_r>
 8008248:	42a0      	cmp	r0, r4
 800824a:	d20f      	bcs.n	800826c <_realloc_r+0x48>
 800824c:	4621      	mov	r1, r4
 800824e:	4638      	mov	r0, r7
 8008250:	f7ff ff8e 	bl	8008170 <_malloc_r>
 8008254:	4605      	mov	r5, r0
 8008256:	2800      	cmp	r0, #0
 8008258:	d0f2      	beq.n	8008240 <_realloc_r+0x1c>
 800825a:	4631      	mov	r1, r6
 800825c:	4622      	mov	r2, r4
 800825e:	f7ff fc09 	bl	8007a74 <memcpy>
 8008262:	4631      	mov	r1, r6
 8008264:	4638      	mov	r0, r7
 8008266:	f7ff ff35 	bl	80080d4 <_free_r>
 800826a:	e7e9      	b.n	8008240 <_realloc_r+0x1c>
 800826c:	4635      	mov	r5, r6
 800826e:	e7e7      	b.n	8008240 <_realloc_r+0x1c>

08008270 <_sbrk_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4c06      	ldr	r4, [pc, #24]	; (800828c <_sbrk_r+0x1c>)
 8008274:	2300      	movs	r3, #0
 8008276:	4605      	mov	r5, r0
 8008278:	4608      	mov	r0, r1
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	f7fe f94a 	bl	8006514 <_sbrk>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_sbrk_r+0x1a>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	b103      	cbz	r3, 800828a <_sbrk_r+0x1a>
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	2000035c 	.word	0x2000035c

08008290 <__malloc_lock>:
 8008290:	4770      	bx	lr

08008292 <__malloc_unlock>:
 8008292:	4770      	bx	lr

08008294 <_malloc_usable_size_r>:
 8008294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008298:	1f18      	subs	r0, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfbc      	itt	lt
 800829e:	580b      	ldrlt	r3, [r1, r0]
 80082a0:	18c0      	addlt	r0, r0, r3
 80082a2:	4770      	bx	lr

080082a4 <_init>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	bf00      	nop
 80082a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082aa:	bc08      	pop	{r3}
 80082ac:	469e      	mov	lr, r3
 80082ae:	4770      	bx	lr

080082b0 <_fini>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr
